{
	// この設定が false の場合、新しい設定の値に関係なくテレメトリは送信されません。`telemetry.telemetryLevel`設定に結合されているため、非推奨になりました。
	// クラッシュ レポートの収取を有効にします。これにより、安定性が向上します。
	// このオプションを有効にするには、再起動が必要です。
	"telemetry.enableCrashReporter": true,
	// この設定が false の場合、新しい設定の値に関係なくテレメトリは送信されません。`telemetry.telemetryLevel`設定を優先して非推奨になりました。
	// 診断データの収集を有効にします。これにより、Visual Studio Code の実行状況と改善が必要な箇所について理解を深めることができます。収集する情報とプライバシーに関する声明についての [Read more] (https://go.microsoft.com/fwlink/?LinkId=521839) をご覧ください。
	"telemetry.enableTelemetry": true,
	// 
	// Visual Studio Code テレメトリ、ファースト パーティ拡張テレメトリ機能、および参加しているサード パーティの拡張機能テレメトリを制御します。一部のサード パーティの拡張機能では、この設定が考慮されない場合があります。確認するには、特定の拡張機能のドキュメントを参照してください。テレメトリにより、Visual Studio Code のパフォーマンス、改善が必要な場所、および機能の使用方法について理解しやすくなります。 [収集するデータ](https://aka.ms/vscode-telemetry) と[プライバシーに関する声明](https://go.microsoft.com/fwlink/?LinkId=521839) を参照してください。 クラッシュ レポートの変更を有効にするには、アプリケーションを完全に再起動する必要があります。
	// 
	// &nbsp;
	// 
	// 次の表は、各設定で送信されるデータの概要を示しています。
	// 
	// |       | クラッシュ レポート | エラー テレメトリ | 使用状況データ |
	// |:------|:---------------------:|:---------------:|:--------------:|
	// | all   |            ✓          |        ✓        |        ✓       |
	// | error |            ✓          |        ✓        |        -       |
	// | crash |            ✓          |        -        |        -       |
	// | off   |            -          |        -        |        -       |
	// 
	// 
	// &nbsp;
	// 
	// ****注:*** この設定が 'off' の場合、他のテレメトリ設定に関係なくテレメトリは送信されません。この設定が 'off' 以外に設定されていて、非推奨の設定でテレメトリが無効になっている場合、テレメトリは送信されません。*
	// 
	//  - all: 使用状況データ、エラー、クラッシュ レポートを送信します。
	//  - error: 一般的なエラー テレメトリとクラッシュ レポートを送信します。
	//  - crash: OS レベルのクラッシュ レポートを送信します。
	//  - off: すべての製品テレメトリを無効にします。
	"telemetry.telemetryLevel": "all",
	// エディターで CodeLens を表示するかどうかを制御します。
	"diffEditor.codeLens": false,
	// 
	//  - legacy: 従来の差分アルゴリズムを使用します。
	//  - advanced: 高度な差分アルゴリズムを使用します。
	"diffEditor.diffAlgorithm": "advanced",
	// 文字が挿入または削除された場所を確認するために、差分エディターに空の装飾を表示するかどうかを制御します。
	"diffEditor.experimental.showEmptyDecorations": true,
	// 差分エディターで検出されたコードの移動を表示するかどうかを制御します。
	"diffEditor.experimental.showMoves": false,
	// 有効化されており、エディターがインライン ビューを使用している場合、単語の変更はインラインでレンダリングされます。
	"diffEditor.experimental.useTrueInlineView": false,
	// 変更されていない領域を比較するときにコンテキストとして使用される行の数を制御します。
	"diffEditor.hideUnchangedRegions.contextLineCount": 3,
	// 差分エディターに変更されていない領域を表示するかどうかを制御します。
	"diffEditor.hideUnchangedRegions.enabled": false,
	// 変更されていない領域の最小値として使用される線の数を制御します。
	"diffEditor.hideUnchangedRegions.minimumLineCount": 3,
	// 未変更の領域に使用される線の数を制御します。
	"diffEditor.hideUnchangedRegions.revealLineCount": 20,
	// 有効にすると、差分エディターは先頭または末尾の空白文字の変更を無視します。
	"diffEditor.ignoreTrimWhitespace": true,
	// 差分計算が取り消された後のタイムアウト (ミリ秒単位)。タイムアウトなしには 0 を使用します。
	"diffEditor.maxComputationTime": 5000,
	// 差分を計算する場合の最大ファイル サイズ (MB)。制限なしの場合は 0 を使用します。
	"diffEditor.maxFileSize": 50,
	// 有効にすると、差分エディターには、元に戻す操作とステージ操作のための特別な余白が表示されます。
	"diffEditor.renderGutterMenu": true,
	// 差分エディターが追加/削除された変更に +/- インジケーターを示すかどうかを制御します。
	"diffEditor.renderIndicators": true,
	// 有効にすると、差分エディターでグリフ余白に、変更を元に戻すための矢印が表示されます。
	"diffEditor.renderMarginRevertIcon": true,
	// 差分エディターが差分を横に並べて表示するか、行内に表示するかを制御します。
	"diffEditor.renderSideBySide": true,
	// 差分エディターの幅がこの値より小さい場合は、インライン ビューが使用されます。
	"diffEditor.renderSideBySideInlineBreakpoint": 900,
	// 有効になっていると、エディターの幅が小さすぎる場合はインライン ビューが使用されます。
	"diffEditor.useInlineViewWhenSpaceIsLimited": true,
	// 
	//  - off: 行を折り返しません。
	//  - on: 行をビューポートの幅で折り返します。
	//  - inherit: 行は、`editor.wordWrap` の設定に従って折り返されます。
	"diffEditor.wordWrap": "inherit",
	// コミット文字で候補を受け入れるかどうかを制御します。たとえば、JavaScript ではセミコロン (`;`) をコミット文字にして、候補を受け入れてその文字を入力することができます。
	"editor.acceptSuggestionOnCommitCharacter": true,
	// `Tab` キーに加えて `Enter` キーで候補を受け入れるかどうかを制御します。改行の挿入や候補の反映の間であいまいさを解消するのに役立ちます。
	//  - on
	//  - smart: テキストの変更を行うとき、`Enter` を使用する場合にのみ候補を受け付けます。
	//  - off
	"editor.acceptSuggestionOnEnter": "on",
	// 一度にスクリーン リーダーによって読み上げることができるエディターの行数を制御します。スクリーン リーダーが検出されると、既定値が 500 に自動的に設定されます。警告: 既定値より大きい数値の場合は、パフォーマンスに影響があります。
	"editor.accessibilityPageSize": 10,
	// この UI をスクリーン リーダーに最適化されたモードで実行するかどうかを制御します。
	//  - auto: プラットフォーム API を使用して、スクリーン リーダーがいつ接続されたかを検出します。
	//  - on: スクリーン リーダーでの使用を最適化します。
	//  - off: スクリーン リーダーが接続されていないとします。
	"editor.accessibilitySupport": "auto",
	// エディターで左角かっこを追加した後に自動的に右角かっこを挿入するかどうかを制御します。
	//  - always
	//  - languageDefined: 言語設定を使用して、いつかっこを自動クローズするか決定します。
	//  - beforeWhitespace: カーソルが空白文字の左にあるときだけ、かっこを自動クローズします。
	//  - never
	"editor.autoClosingBrackets": "languageDefined",
	// エディターでコメントを開始した後に自動的にコメントを閉じるかどうかを制御します。
	//  - always
	//  - languageDefined: 言語設定を使用して、いつかっこを自動クローズするか決定します。
	//  - beforeWhitespace: カーソルが空白文字の左にあるときだけ、コメントを自動クローズします。
	//  - never
	"editor.autoClosingComments": "languageDefined",
	// 削除時にエディターで隣接する終わり引用符または括弧を削除するかどうかを制御します。
	//  - always
	//  - auto: 隣接する終わり引用符または括弧が自動的に挿入された場合にのみ、それらを削除します。
	//  - never
	"editor.autoClosingDelete": "auto",
	// エディターで終わり引用符または括弧を上書きするかどうかを制御します。
	//  - always
	//  - auto: 終わり引用符または括弧が自動的に挿入された場合にのみ、それらを上書きします。
	//  - never
	"editor.autoClosingOvertype": "auto",
	// ユーザーが開始引用符を追加した後、エディター自動的に引用符を閉じるかどうかを制御します。
	//  - always
	//  - languageDefined: 言語設定を使用して、いつ引用符を自動クローズするか決定します。
	//  - beforeWhitespace: カーソルが空白文字の左にあるときだけ、引用符を自動クローズします。
	//  - never
	"editor.autoClosingQuotes": "languageDefined",
	// ユーザーが行を入力、貼り付け、移動、またはインデントするときに、エディターでインデントを自動的に調整するかどうかを制御します。
	//  - none: エディターはインデントを自動的に挿入しません。
	//  - keep: エディターは、現在の行のインデントを保持します。
	//  - brackets: エディターは、現在の行のインデントを保持し、言語が定義されたかっこを優先します。
	//  - advanced: エディターは、現在の行のインデントを保持し、言語が定義されたかっこを優先し、言語で定義された特別な onEnterRules を呼び出します。
	//  - full: エディターは、現在の行のインデントを保持し、言語が定義されたかっこを優先し、言語で定義された特別な onEnterRules を呼び出し、言語で定義された indentationRules を優先します。
	"editor.autoIndent": "full",
	// 引用符または角かっこを入力するときに、エディターが選択範囲を自動的に囲むかどうかを制御します。
	//  - languageDefined: 言語構成を使用して、選択範囲をいつ自動的に囲むかを判断します。
	//  - quotes: 角かっこではなく、引用符で囲みます。
	//  - brackets: 引用符ではなく、角かっこで囲みます。
	//  - never
	"editor.autoSurround": "languageDefined",
	// ブラケットのペアの色付けが有効かどうかを制御します。 `workbench.colorCustomizations` を使用して、ブラケットの強調表示の色をオーバーライドします。
	"editor.bracketPairColorization.enabled": true,
	// 括弧の各種別が、個別のカラー プールを保持するかどうかを制御します。
	"editor.bracketPairColorization.independentColorPoolPerBracketType": false,
	// `files.autoSave#` が `afterDelay` に設定されている場合に、`#editor.codeActionsOnSave` のトリガーを有効にします。ウィンドウとフォーカスの変更に対してトリガーされるコード アクションを `always` に設定する必要があります。
	"editor.codeActions.triggerOnFocusChange": false,
	// 保存時にエディターのコード アクションを実行します。コード アクションを指定する必要があり、エディターをシャットダウンしないようにする必要があります。例: '"source.organizeImports": "explicit" '
	"editor.codeActionsOnSave": {},
	// 現在診断を行っていないときに、行内の最も近い クイック修正 を表示する機能を有効または無効にします。
	"editor.codeActionWidget.includeNearbyQuickFixes": true,
	// コード アクション メニューでのグループ ヘッダーの表示の有効/無効を切り替えます。
	"editor.codeActionWidget.showHeaders": true,
	// エディターで CodeLens を表示するかどうかを制御します。
	"editor.codeLens": true,
	// CodeLens のフォント ファミリを制御します。
	"editor.codeLensFontFamily": "",
	// CodeLens のフォント サイズをピクセル単位で制御します。0 に設定すると、`editor.fontSize` の 90% が使用されます。
	"editor.codeLensFontSize": 0,
	// エディターでインライン カラー デコレーターと色の選択を表示する必要があるかどうかを制御します。
	"editor.colorDecorators": true,
	// カラー デコレーターからカラー ピッカーを表示する条件を制御します
	//  - clickAndHover: カラー デコレーターのクリック時とポイント時の両方にカラー ピッカーを表示する
	//  - hover: カラー デコレーターのポイント時にカラー ピッカーを表示する
	//  - click: カラー デコレーターのクリック時にカラー ピッカーを表示する
	"editor.colorDecoratorsActivatedOn": "clickAndHover",
	// エディターで一度にレンダリングできるカラー デコレーターの最大数を制御します。
	"editor.colorDecoratorsLimit": 500,
	// マウスとキーでの選択により列の選択を実行できるようにします。
	"editor.columnSelection": false,
	// 行コメントの追加または削除アクションの切り替えで、空の行を無視するかどうかを制御します。
	"editor.comments.ignoreEmptyLines": true,
	// コメント時に空白文字を挿入するかどうかを制御します。
	"editor.comments.insertSpace": true,
	// 構文ハイライトをクリップボードにコピーするかどうかを制御します。
	"editor.copyWithSyntaxHighlighting": true,
	// カーソルのアニメーション方式を制御します。
	"editor.cursorBlinking": "blink",
	// 滑らかなキャレットアニメーションを有効にするかどうかを制御します。
	//  - off: スムーズ キャレット アニメーションが無効になっています。
	//  - explicit: スムーズ キャレット アニメーションは、ユーザーが明示的なジェスチャでカーソルを移動した場合にのみ有効になります。
	//  - on: スムーズ キャレット アニメーションは常に有効です。
	"editor.cursorSmoothCaretAnimation": "off",
	// カーソルのスタイルを制御します。
	"editor.cursorStyle": "line",
	// カーソル前後の表示可能な先頭の行 (最小 0) と末尾の行 (最小 1) の最小数を制御します。他の一部のエディターでは 'scrollOff' または 'scrollOffset' と呼ばれます。
	"editor.cursorSurroundingLines": 0,
	// `editor.cursorSurroundingLines` を適用するタイミングを制御します。
	//  - default: `cursorSurroundingLines` は、キーボードまたは API でトリガーされた場合にのみ強制されます。
	//  - all: `cursorSurroundingLines` は常に適用されます。
	"editor.cursorSurroundingLinesStyle": "default",
	// `editor.cursorStyle` が `line` に設定されている場合、カーソルの幅を制御します。
	"editor.cursorWidth": 0,
	// 既定のドキュメント カラー プロバイダーを使用してインラインの色の装飾を表示するかどうかを制御します
	"editor.defaultColorDecorators": false,
	// 他のすべての折りたたみ範囲プロバイダーよりも優先される既定の折りたたみ範囲プロバイダーを定義します。折りたたみ範囲プロバイダーに貢献する拡張機能の識別子である必要があります。
	//  - null: すべてのアクティブな折りたたみ範囲プロバイダー
	//  - ms-python.autopep8: Formatting support for Python files using the autopep8 formatter.
	//  - ms-python.black-formatter: Formatting support for Python files using the Black formatter.
	//  - vscode.css-language-features: CSS、LESS、SCSS ファイルに豊富な言語サポートを提供。
	//  - vscode.html-language-features: HTML と Handlebar ファイルに豊富な言語サポートを提供します
	//  - vscode.json-language-features: JSON ファイルに豊富な言語サポートを提供。
	//  - vscode.markdown-language-features: Markdown に豊富な言語サポートを提供。
	//  - vscode.markdown-math: ノートブックのマークダウンに数式サポートを追加します。
	//  - vscode.php-language-features: PHP ファイルに豊富な言語サポートを提供します。
	//  - ms-python.python: Python language support with extension access points for IntelliSense (Pylance), Debugging (Python Debugger), linting, formatting, refactoring, unit tests, and more.
	//  - vscode.typescript-language-features: JavaScript と TypeScript ファイルに豊富な言語サポートを提供。
	//  - pranaygp.vscode-css-peek: Allow peeking to css ID and class strings as definitions from html files to respective CSS. Allows peek and goto definition.
	//  - HTMLHint.vscode-htmlhint: VS Code integration for HTMLHint - A Static Code Analysis Tool for HTML
	//  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
	//  - vscode.configuration-editing: 設定、起動、拡張機能の推奨事項ファイルといった、構成ファイルの機能 (高度な IntelliSense、auto-fixing など) を提供します。
	//  - kevinglasson.cornflakes-linter: Wrapper for Python flake8 linter and associated plugins. It rectifies current issues with displaying ALL flake8 problems in the problems tab.
	//  - vscode.debug-auto-launch: node-debug 拡張がアクティブではないときに自動的にアタッチする機能を補助します。
	//  - vscode.debug-server-ready: デバッグ対象のサーバーが準備完了になったら、URI をブラウザーで開きます。
	//  - ms-python.debugpy: Python Debugger extension using debugpy.
	//  - vscode.emmet: VSCode の Emmet サポート
	//  - vscode.extension-editing: 拡張機能を作成するためのリンティング機能を提供します。
	//  - vscode.git: Git SCM統合
	//  - vscode.git-base: Git の静的コントリビューションとピッカー。
	//  - mhutchie.git-graph: View a Git Graph of your repository, and perform Git actions from the graph.
	//  - vscode.github: VS Code 用 GitHub 機能
	//  - vscode.github-authentication: GitHub 認証プロバイダー
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: VS Code に Gulp 機能を追加する拡張機能。
	//  - vscode.ipynb: Jupyter の .ipynb ノートブック ファイルを開いて読み取るための基本サポートを提供します
	//  - vscode.jake: VS Code に Jake 機能を追加する拡張機能。
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - ms-vscode.live-server: Hosts a local server in your workspace for you to preview your webpages on.
	//  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
	//  - vscode.media-preview: 画像、オーディオ、ビデオの VS Code の組み込みプレビューを提供します
	//  - vscode.merge-conflict: 行内マージ競合のハイライト、コマンドを提供します。
	//  - vscode.microsoft-authentication: Microsoft 認証プロバイダー
	//  - vscode.npm: npm スクリプトのタスクサポートを追加する拡張
	//  - vscode.references-view: サイドバーの独立した安定したビューとして検索結果を参照する
	//  - ms-vscode-remote.remote-wsl: Linux 用 Windows サブシステム (WSL) 内の任意のフォルダーを開き、Visual Studio Codeの完全な機能セットを利用します。
	//  - vscode.search-result: シンタックスハイライトとタブ付き検索結果向け言語機能を提供します。
	//  - vscode.simple-browser: Web コンテンツを表示するための非常に基本的な組み込みの Web ビューです。
	//  - SimonSiefke.svg-preview: Preview for Svg files
	//  - vscode.tunnel-forwarding: 転送ローカル ポートにインターネット経由でアクセスできるようにします。
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	"editor.defaultFoldingRangeProvider": null,
	// 他のすべてのフォーマッタ設定よりも優先される、既定のフォーマッタを定義します。フォーマッタを提供している拡張機能の識別子にする必要があります。
	//  - null: なし
	//  - ms-python.autopep8: Formatting support for Python files using the autopep8 formatter.
	//  - ms-python.black-formatter: Formatting support for Python files using the Black formatter.
	//  - vscode.css-language-features: CSS、LESS、SCSS ファイルに豊富な言語サポートを提供。
	//  - vscode.html-language-features: HTML と Handlebar ファイルに豊富な言語サポートを提供します
	//  - vscode.json-language-features: JSON ファイルに豊富な言語サポートを提供。
	//  - vscode.markdown-language-features: Markdown に豊富な言語サポートを提供。
	//  - vscode.markdown-math: ノートブックのマークダウンに数式サポートを追加します。
	//  - vscode.php-language-features: PHP ファイルに豊富な言語サポートを提供します。
	//  - ms-python.python: Python language support with extension access points for IntelliSense (Pylance), Debugging (Python Debugger), linting, formatting, refactoring, unit tests, and more.
	//  - vscode.typescript-language-features: JavaScript と TypeScript ファイルに豊富な言語サポートを提供。
	//  - pranaygp.vscode-css-peek: Allow peeking to css ID and class strings as definitions from html files to respective CSS. Allows peek and goto definition.
	//  - HTMLHint.vscode-htmlhint: VS Code integration for HTMLHint - A Static Code Analysis Tool for HTML
	//  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
	//  - vscode.configuration-editing: 設定、起動、拡張機能の推奨事項ファイルといった、構成ファイルの機能 (高度な IntelliSense、auto-fixing など) を提供します。
	//  - kevinglasson.cornflakes-linter: Wrapper for Python flake8 linter and associated plugins. It rectifies current issues with displaying ALL flake8 problems in the problems tab.
	//  - vscode.debug-auto-launch: node-debug 拡張がアクティブではないときに自動的にアタッチする機能を補助します。
	//  - vscode.debug-server-ready: デバッグ対象のサーバーが準備完了になったら、URI をブラウザーで開きます。
	//  - ms-python.debugpy: Python Debugger extension using debugpy.
	//  - vscode.emmet: VSCode の Emmet サポート
	//  - vscode.extension-editing: 拡張機能を作成するためのリンティング機能を提供します。
	//  - vscode.git: Git SCM統合
	//  - vscode.git-base: Git の静的コントリビューションとピッカー。
	//  - mhutchie.git-graph: View a Git Graph of your repository, and perform Git actions from the graph.
	//  - vscode.github: VS Code 用 GitHub 機能
	//  - vscode.github-authentication: GitHub 認証プロバイダー
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: VS Code に Gulp 機能を追加する拡張機能。
	//  - vscode.ipynb: Jupyter の .ipynb ノートブック ファイルを開いて読み取るための基本サポートを提供します
	//  - vscode.jake: VS Code に Jake 機能を追加する拡張機能。
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - ms-vscode.live-server: Hosts a local server in your workspace for you to preview your webpages on.
	//  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
	//  - vscode.media-preview: 画像、オーディオ、ビデオの VS Code の組み込みプレビューを提供します
	//  - vscode.merge-conflict: 行内マージ競合のハイライト、コマンドを提供します。
	//  - vscode.microsoft-authentication: Microsoft 認証プロバイダー
	//  - vscode.npm: npm スクリプトのタスクサポートを追加する拡張
	//  - vscode.references-view: サイドバーの独立した安定したビューとして検索結果を参照する
	//  - ms-vscode-remote.remote-wsl: Linux 用 Windows サブシステム (WSL) 内の任意のフォルダーを開き、Visual Studio Codeの完全な機能セットを利用します。
	//  - vscode.search-result: シンタックスハイライトとタブ付き検索結果向け言語機能を提供します。
	//  - vscode.simple-browser: Web コンテンツを表示するための非常に基本的な組み込みの Web ビューです。
	//  - SimonSiefke.svg-preview: Preview for Svg files
	//  - vscode.tunnel-forwarding: 転送ローカル ポートにインターネット経由でアクセスできるようにします。
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	"editor.defaultFormatter": null,
	// [定義へ移動] マウス ジェスチャーで、常にピーク ウィジェットを開くかどうかを制御します。
	"editor.definitionLinkOpensInPeek": false,
	// ファイルがファイルの内容に基づいて開かれる場合、`editor.tabSize#` と `#editor.insertSpaces` を自動的に検出するかどうかを制御します。
	"editor.detectIndentation": true,
	// ドラッグ アンド ドロップによる選択範囲の移動をエディターが許可するかどうかを制御します。
	"editor.dragAndDrop": true,
	// (エディターでファイルを開く代わりに) `Shift` キーを押しながらテキスト エディターにファイルをドラッグ アンド ドロップできるかどうかを制御します。
	"editor.dropIntoEditor.enabled": true,
	// エディターにファイルをドロップするときにウィジェットを表示するかどうかを制御します。このウィジェットでは、ファイルのドロップ方法を制御できます。
	//  - afterDrop: ファイルがエディターにドロップされた後に、ドロップ セレクター ウィジェットを表示します。
	//  - never: ドロップ セレクター ウィジェットを表示しません。代わりに、既定のドロップ プロバイダーが常に使用されます。
	"editor.dropIntoEditor.showDropSelector": "afterDrop",
	// 選択範囲を指定しないでコピーする場合に現在の行をコピーするかどうかを制御します。
	"editor.emptySelectionClipboard": true,
	// Web ワーカーでトークン化を非同期的に行うかどうかを制御します。
	"editor.experimental.asyncTokenization": true,
	// 非同期トークン化をログに記録するかどうかを制御します。デバッグ用のみ。
	"editor.experimental.asyncTokenizationLogging": false,
	// 従来のバックグラウンド トークン化に対して非同期トークン化を検証するかどうかを制御します。トークン化が遅くなる可能性があります。デバッグ専用です。
	"editor.experimental.asyncTokenizationVerification": false,
	// 特定の MIME タイプのコンテンツに使用する既定のドロップ プロバイダーを構成します。
	"editor.experimental.dropIntoEditor.defaultProvider": {},
	// 特定の言語に対してツリー シッター解析を有効にするかどうかを制御します。これは、指定された言語の 'editor.experimental.treeSitterTelemetry' よりも優先されます。
	"editor.experimental.preferTreeSitter": [],
	// ツリー シッターの解析を有効にし、テレメトリを収集するかどうかを制御します。特定の言語に対する 'editor.experimental.preferTreeSitter' の設定が優先されます。
	"editor.experimental.treeSitterTelemetry": false,
	// 新しい試験的な編集コンテキストをテキスト領域の代わりに使用するかどうかを設定します。
	"editor.experimentalEditContextEnabled": false,
	// 新しい試験的なメソッドを使用して空白をレンダリングするかどうかを制御します。
	//  - svg: SVGS で新しいレンダリング方法を使用します。
	//  - font: フォント文字に新しいレンダリング方法を使用します。
	//  - off: 安定したレンダリング方法を使用します。
	"editor.experimentalWhitespaceRendering": "svg",
	// `Alt` を押すと、スクロール速度が倍増します。
	"editor.fastScrollSensitivity": 5,
	// 検索ウィジェットがエディターの上に行をさらに追加するかどうかを制御します。true の場合、検索ウィジェットが表示されているときに最初の行を超えてスクロールできます。
	"editor.find.addExtraSpaceOnTop": true,
	// [選択範囲を検索] を自動的にオンにする条件を制御します。
	//  - never: [選択範囲を検索] を自動的にオンにしません (既定)。
	//  - always: [選択範囲を検索] を常に自動的にオンにします。
	//  - multiline: 複数行のコンテンツが選択されている場合は、[選択範囲を検索] を自動的にオンにします。
	"editor.find.autoFindInSelection": "never",
	// 入力中に一致を検索するためにカーソルをジャンプさせるかどうかを制御します。
	"editor.find.cursorMoveOnType": true,
	// 以降で一致が見つからない場合に、検索を先頭から (または末尾から) 自動的に再実行するかどうか制御します。
	"editor.find.loop": true,
	// エディターの選択範囲から検索ウィジェット内の検索文字列を与えるかどうかを制御します。
	//  - never: エディターの選択範囲から検索文字列をシードしません。
	//  - always: カーソル位置にある単語を含め、エディターの選択範囲から検索文字列を常にシードします。
	//  - selection: エディターの選択範囲から検索文字列のみをシードします。
	"editor.find.seedSearchStringFromSelection": "always",
	// エディターでコードの折りたたみを有効にするかどうかを制御します。
	"editor.folding": true,
	// エディターで折りたたまれた範囲を強調表示するかどうかをコントロールします。
	"editor.foldingHighlight": true,
	// エディターがインポート範囲を自動的に折りたたむかどうかを制御します。
	"editor.foldingImportsByDefault": false,
	// 折りたたみ可能な領域の最大数です。この値を大きくすると、現在のソースに多数の折りたたみ可能な領域がある場合にエディターの応答性が低下する可能性があります。
	"editor.foldingMaximumRegions": 5000,
	// 折りたたみ範囲の計算方法を制御します。
	//  - auto: 利用可能な場合は言語固有の折りたたみ方法を使用し、利用可能ではない場合はインデントベースの方法を使用します。
	//  - indentation: インデントベースの折りたたみ方法を使用します。
	"editor.foldingStrategy": "auto",
	// フォント ファミリを制御します。
	"editor.fontFamily": "Consolas, 'Courier New', monospace",
	// フォントの合字やフォントの機能を構成します。合字を有効または無効にするブール値または CSS 'font-feature-settings' プロパティの値の文字列を指定できます。
	"editor.fontLigatures": false,
	// フォント サイズ (ピクセル単位) を制御します。
	"editor.fontSize": 14,
	// フォントのバリエーションを構成します。font-weight から font-variation-settings への変換を有効/無効にするブール値、または CSS 'font-variation-settings' プロパティの値の文字列のいずれかです。
	"editor.fontVariations": false,
	// フォントの太さを制御します。"標準" および "太字" のキーワードまたは 1 ～ 1000 の数字を受け入れます。
	"editor.fontWeight": "normal",
	// 貼り付けた内容がエディターにより自動的にフォーマットされるかどうかを制御します。フォーマッタを使用可能にする必要があります。また、フォーマッタがドキュメント内の範囲をフォーマットできなければなりません。
	"editor.formatOnPaste": true,
	// ファイルを保存するときにフォーマットします。フォーマッタが有効でなければなりません。ファイルの遅延保存やエディターを閉じることは許可されていません。
	"editor.formatOnSave": true,
	// 保存の形式でファイル全体をフォーマット指定するか、変更のみをフォーマットするかを制御します。`editor.formatOnSave` が有効な場合にのみ適用されます。
	//  - file: ファイル全体をフォーマットします。
	//  - modifications: 変更をフォーマットします (ソース管理が必要)。
	//  - modificationsIfAvailable: 変更部分のみのフォーマットを試みます (ソース管理が必要)。ソース管理が使用できない場合は、ファイル全体がフォーマットされます。
	"editor.formatOnSaveMode": "file",
	// エディターで入力後に自動的に行のフォーマットを行うかどうかを制御します。
	"editor.formatOnType": true,
	// エディターで縦のグリフ余白が表示されるかどうかを制御します。ほとんどの場合、グリフ余白はデバッグに使用されます。
	"editor.glyphMargin": true,
	// '宣言へ移動' の結果が現在の場所である場合に実行される代替コマンド ID。
	"editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",
	// '定義へ移動' の結果が現在の場所である場合に実行される代替コマンド ID。
	"editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",
	// '実装へ移動' の結果が現在の場所である場合に実行される代替コマンド ID。
	"editor.gotoLocation.alternativeImplementationCommand": "",
	// '参照へ移動' の結果が現在の場所である場合に実行される代替コマンド ID。
	"editor.gotoLocation.alternativeReferenceCommand": "",
	// '型定義へ移動' の結果が現在の場所である場合に実行される代替コマンド ID。
	"editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",
	// この設定は非推奨です。代わりに、'editor.editor.gotoLocation.multipleDefinitions' や 'editor.editor.gotoLocation.multipleImplementations' などの個別の設定を使用してください。
	// 
	"editor.gotoLocation.multiple": null,
	// 複数のターゲットの場所があるときの '宣言へ移動' コマンドの動作を制御します。
	//  - peek: 結果のピーク ビューを表示 (既定)
	//  - gotoAndPeek: 主な結果に移動し、ピーク ビューを表示します
	//  - goto: プライマリ結果に移動し、他のユーザーへのピークレス ナビゲーションを有効にします
	"editor.gotoLocation.multipleDeclarations": "peek",
	// 複数のターゲットの場所があるときの '定義へ移動' コマンドの動作を制御します。
	//  - peek: 結果のピーク ビューを表示 (既定)
	//  - gotoAndPeek: 主な結果に移動し、ピーク ビューを表示します
	//  - goto: プライマリ結果に移動し、他のユーザーへのピークレス ナビゲーションを有効にします
	"editor.gotoLocation.multipleDefinitions": "peek",
	// 複数のターゲットの場所があるときの '実装に移動' コマンドの動作を制御します。
	//  - peek: 結果のピーク ビューを表示 (既定)
	//  - gotoAndPeek: 主な結果に移動し、ピーク ビューを表示します
	//  - goto: プライマリ結果に移動し、他のユーザーへのピークレス ナビゲーションを有効にします
	"editor.gotoLocation.multipleImplementations": "peek",
	// ターゲットの場所が複数存在する場合の '参照へ移動' コマンドの動作を制御します。
	//  - peek: 結果のピーク ビューを表示 (既定)
	//  - gotoAndPeek: 主な結果に移動し、ピーク ビューを表示します
	//  - goto: プライマリ結果に移動し、他のユーザーへのピークレス ナビゲーションを有効にします
	"editor.gotoLocation.multipleReferences": "peek",
	// 複数のターゲットの場所があるときの '型定義へ移動' コマンドの動作を制御します。
	//  - peek: 結果のピーク ビューを表示 (既定)
	//  - gotoAndPeek: 主な結果に移動し、ピーク ビューを表示します
	//  - goto: プライマリ結果に移動し、他のユーザーへのピークレス ナビゲーションを有効にします
	"editor.gotoLocation.multipleTypeDefinitions": "peek",
	// ブラケット ペアのガイドを有効にするかどうかを制御します。
	//  - true: ブラケット ペア ガイドを有効にする。
	//  - active: アクティブなブラケット ペアに対してのみブラケット ペア ガイドを有効にします。
	//  - false: ブラケット ペア ガイドを無効にします。
	"editor.guides.bracketPairs": false,
	// 水平方向のブラケット ペアのガイドを有効にするかどうかを制御します。
	//  - true: 縦のブラケット ペアのガイドに加えて、同じく水平のガイドを有効にします。
	//  - active: アクティブなブラケット ペアに対してのみ、水平のガイドを有効にします。
	//  - false: 水平ブラケット ペア ガイドを無効にします。
	"editor.guides.bracketPairsHorizontal": "active",
	// エディターでアクティブな角かっこのペアを強調表示するかどうかを制御します。
	"editor.guides.highlightActiveBracketPair": true,
	// エディターでアクティブなインデントのガイドを強調表示するかどうかを制御します。
	//  - true: アクティブなインデント ガイドを強調表示します。
	//  - always: 角かっこガイドが強調表示されている場合でも、アクティブなインデント ガイドを強調表示します。
	//  - false: アクティブなインデント ガイドを強調表示しないでください。
	"editor.guides.highlightActiveIndentation": true,
	// エディターでインデント ガイドを表示するかどうかを制御します。
	"editor.guides.indentation": true,
	// 概要ルーラーでカーソルを非表示にするかどうかを制御します。
	"editor.hideCursorInOverviewRuler": false,
	// スペースがある場合は、行の上にマウス カーソルを被せて表示する。
	"editor.hover.above": true,
	// ホバーを表示後の待ち時間 (ミリ秒) を制御します。
	"editor.hover.delay": 300,
	// ホバーを表示するかどうかを制御します。
	"editor.hover.enabled": true,
	// ホバーが非表示になるまでの遅延をミリ秒単位で制御します。`editor.hover.sticky` を有効にする必要があります。
	"editor.hover.hidingDelay": 300,
	// ホバーにマウスを移動したときに、ホバーを表示し続けるかどうかを制御します。
	"editor.hover.sticky": true,
	// インデントまたは `"tabSize"` で `editor.tabSize#` の値を使用するために使用されるスペースの数。この設定は、 `#editor.detectIndentation` がオンの場合、ファイルの内容に基づいてオーバーライドされます。
	"editor.indentSize": "tabSize",
	// エディターでインレー ヒントを有効にします。
	//  - on: インレイ ヒントが有効になっています
	//  - onUnlessPressed: インレイ ヒントは既定で表示され、Ctrl+Alt を押したままにすると非表示になります
	//  - offUnlessPressed: インレイ ヒントは既定では非表示になり、Ctrl+Alt を押したままにすると表示されます
	//  - off: インレイ ヒントが無効になっています
	"editor.inlayHints.enabled": "on",
	// エディターで解説ヒントのフォント ファミリを制御します。空に設定すると、 `editor.fontFamily` が使用されます。
	"editor.inlayHints.fontFamily": "",
	// エディターでの解説ヒントのフォント サイズを制御します。既定では、`editor.fontSize` は、構成された値が `5` より小さいか、エディターのフォント サイズより大きい場合に使用されます。
	"editor.inlayHints.fontSize": 0,
	// エディターによって切り捨てられる前の、1 行のインレイ ヒントの最大全体の長さ。切り捨てない場合は '0' に設定します
	"editor.inlayHints.maximumLength": 43,
	// エディターでのインレイ ヒントに関するパディングを有効にします。
	"editor.inlayHints.padding": false,
	// インライン入力候補が表示されたときに、スクリーン リーダー ユーザーにユーザー補助ヒントを提供するかどうかを制御します。
	"editor.inlineCompletionsAccessibilityVerbose": false,
	// Controls whether to enable experimental edits in inline suggestions.
	"editor.inlineSuggest.edits.experimental.enabled": true,
	// エディターにインライン候補を自動的に表示するかどうかを制御します。
	"editor.inlineSuggest.enabled": true,
	// インライン提案のフォント ファミリを制御します。
	"editor.inlineSuggest.fontFamily": "default",
	// インライン候補ツール バーを表示するタイミングを制御します。
	//  - always: インライン候補が表示されるたびに、インライン候補ツール バーを表示します。
	//  - onHover: インライン候補にカーソルを合わせるたびに、インライン候補ツール バーを表示します。
	//  - never: インライン候補ツール バーを今後は表示しないでください。
	"editor.inlineSuggest.showToolbar": "onHover",
	// インライン提案と提案ウィジェットの相互作用の方法を制御します。有効すると、インライン候補が使用可能な場合は、提案ウィジェットが自動的に表示されません。
	"editor.inlineSuggest.suppressSuggestions": false,
	// エディターでインライン候補の構文強調表示を表示するかどうかを制御します。
	"editor.inlineSuggest.syntaxHighlightingEnabled": false,
	// `Tab` キーを押すとスペースが挿入されます。`editor.detectIndentation` がオンの場合、この設定はファイル コンテンツに基づいて上書きされます。
	"editor.insertSpaces": true,
	// インデントを増減する角かっこを定義します。
	"editor.language.brackets": null,
	// 角かっこのペアの色付けが有効になっている場合、入れ子のレベルによって色付けされる角かっこのペアを定義します。
	"editor.language.colorizedBracketPairs": null,
	// 大きなファイルでメモリが集中する特定の機能を無効にするための特別な処理。
	"editor.largeFileOptimizations": true,
	// 文字間隔 (ピクセル単位) を制御します。
	"editor.letterSpacing": 0,
	// エディターでコード アクションの電球を有効にします。
	//  - off: コード アクション メニューを無効にします。
	//  - onCode: カーソルがコードが存在する行にあるときに、コード アクション メニューを表示します。
	//  - on: カーソルがコードのある行または空の行にあるときに、コード アクション メニューを表示します。
	"editor.lightbulb.enabled": "onCode",
	// 行の高さを制御します。
	//  - 0 を使用してフォント サイズから行の高さを自動的に計算します。
	//  - 0 から 8 までの値は、フォント サイズの乗数として使用されます。
	//  - 8 以上の値は有効値として使用されます。
	"editor.lineHeight": 0,
	// 行番号の表示を制御します。
	//  - off: 行番号は表示されません。
	//  - on: 行番号は、絶対値として表示されます。
	//  - relative: 行番号は、カーソル位置までの行数として表示されます。
	//  - interval: 行番号は 10 行ごとに表示されます。
	"editor.lineNumbers": "on",
	// リンクされた編集がエディターで有効にされるかどうかを制御します。言語によっては、編集中に HTML タグなどの関連する記号が更新されます。
	"editor.linkedEditing": false,
	// エディターがリンクを検出してクリック可能な状態にするかどうかを制御します。
	"editor.links": true,
	// 対応するかっこを強調表示します。
	"editor.matchBrackets": "always",
	// この長さを越える行は、パフォーマンス上の理由によりトークン化されません。
	"editor.maxTokenizationLineLength": 20000,
	// ミニマップを自動的に非表示するかどうかを制御します。
	"editor.minimap.autohide": false,
	// ミニマップを表示するかどうかを制御します。
	"editor.minimap.enabled": true,
	// 表示するミニマップの最大幅を特定の列数に制限します。
	"editor.minimap.maxColumn": 120,
	// 行にカラー ブロックではなく実際の文字を表示します。
	"editor.minimap.renderCharacters": true,
	// ミニマップに描画されるコンテンツのスケール: 1、2、または 3。
	"editor.minimap.scale": 1,
	// ミニマップのセクション ヘッダーのフォント サイズを制御します。
	"editor.minimap.sectionHeaderFontSize": 9,
	// セクション ヘッダーの文字間隔をピクセル単位で制御します。これにより、小さいフォント サイズのヘッダーを読み取りやすくなります。
	"editor.minimap.sectionHeaderLetterSpacing": 1,
	// MARK: コメントをミニマップのセクション ヘッダーとして表示するかどうかを制御します。
	"editor.minimap.showMarkSectionHeaders": true,
	// ミニマップの名前付き領域をセクション ヘッダーとして表示するかどうかを制御します。
	"editor.minimap.showRegionSectionHeaders": true,
	// ミニマップ スライダーを表示するタイミングを制御します。
	"editor.minimap.showSlider": "mouseover",
	// ミニマップを表示する場所を制御します。
	"editor.minimap.side": "right",
	// ミニマップのサイズを制御します。
	//  - proportional: ミニマップのサイズは、エディターのコンテンツと同じです (スクロールする場合があります)。
	//  - fill: ミニマップは、必要に応じて、エディターの高さを埋めるため、拡大または縮小します (スクロールしません)。
	//  - fit: ミニマップは必要に応じて縮小し、エディターより大きくなることはありません (スクロールしません)。
	"editor.minimap.size": "proportional",
	// マウス ホイール スクロール イベントの `deltaX` と `deltaY` で使用される乗数。
	"editor.mouseWheelScrollSensitivity": 1,
	// `Ctrl` キーを押しながらマウス ホイールを使用してエディターのフォントをズームします。
	"editor.mouseWheelZoom": false,
	// アクティブなエディターに一度に配置できるカーソルの最大数を制御します。
	"editor.multiCursorLimit": 10000,
	// 複数のカーソルが重なっているときは、マージします。
	"editor.multiCursorMergeOverlapping": true,
	// マウスを使用して複数のカーソルを追加するために使用する修飾子。[定義に移動] および [リンクを開く] マウス ジェスチャは、[multicursor 修飾子](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier) と競合しないように調整されます。
	//  - ctrlCmd: Windows および Linux 上の `Control` キーと macOS 上の `Command` キーに割り当てます。
	//  - alt: Windows および Linux 上の `Alt` キーと macOS 上の `Option` キーに割り当てます。
	"editor.multiCursorModifier": "alt",
	// 貼り付けたテキストの行数がカーソル数と一致する場合の貼り付けを制御します。
	//  - spread: カーソルごとにテキストを 1 行ずつ貼り付けます。
	//  - full: 各カーソルは全文を貼り付けます。
	"editor.multiCursorPaste": "spread",
	// 開いているファイル間で発生回数を強調表示するかどうかを制御します。
	//  - off: 発生回数を強調表示しません。
	//  - singleFile: 現在のファイル内の発生回数のみを強調表示します。
	//  - multiFile: 試験段階: すべての有効な開いているファイルの発生回数を強調表示します。
	"editor.occurrencesHighlight": "singleFile",
	// Controls the delay in milliseconds after which occurrences are highlighted.
	"editor.occurrencesHighlightDelay": 250,
	// 概要ルーラーの周囲に境界線が描画されるかどうかを制御します。
	"editor.overviewRulerBorder": true,
	// エディターの下端と最後の行の間の余白の大きさを制御します。
	"editor.padding.bottom": 0,
	// エディターの上端と最初の行の間の余白の大きさを制御します。
	"editor.padding.top": 0,
	// パラメーター ヒント メニューを周回するか、リストの最後で閉じるかどうかを制御します。
	"editor.parameterHints.cycle": true,
	// 入力時にパラメーター ドキュメントと型情報を表示するポップアップを有効にします。
	"editor.parameterHints.enabled": true,
	// さまざまな方法でコンテンツを貼り付けることができるかどうかを制御します。
	"editor.pasteAs.enabled": true,
	// エディターにコンテンツを貼り付けるときにウィジェットを表示するかどうかを制御します。このウィジェットを使用すると、ファイルの貼り付け方法を制御できます。
	//  - afterPaste: コンテンツをエディターに貼り付けた後、貼り付けセレクター ウィジェットを表示します。
	//  - never: 貼り付けセレクター ウィジェットを表示しないでください。代わりに、既定の貼り付け動作が常に使用されます。
	"editor.pasteAs.showPasteSelector": "afterPaste",
	// ピーク ウィジェットのインライン エディターまたはツリーをフォーカスするかどうかを制御します。
	//  - tree: ピークを開くときにツリーにフォーカスする
	//  - editor: ピークを開くときにエディターにフォーカスする
	"editor.peekWidgetDefaultFocus": "tree",
	// 入力中に候補を自動的に表示するかどうかを制御します。これは、コメント、文字列、およびその他のコードを入力するために制御できます。クイック提案は、ゴースト テキストとして表示するか、提案ウィジェットで表示するように構成できます。また、提案が特殊文字によってトリガーされるかどうかを制御する `editor.suggestOnTriggerCharacters`-設定にも注意してください。
	"editor.quickSuggestions": {
		"other": "on",
		"comments": "off",
		"strings": "off"
	},
	// クイック候補が表示されるまでのミリ秒を制御します。
	"editor.quickSuggestionsDelay": 10,
	// 名前を変更する前に変更をプレビューする機能を有効または無効にする
	"editor.rename.enablePreview": true,
	// 非推奨です。代わりに、`editor.linkedEditing` を使用してください。
	// エディターでの型の自動名前変更を制御します。
	"editor.renameOnType": false,
	// エディターで制御文字を表示するかどうかを制御します。
	"editor.renderControlCharacters": true,
	// ファイルの末尾が改行の場合は、最後の行番号を表示します。
	"editor.renderFinalNewline": "on",
	// エディターが現在の行をどのように強調表示するかを制御します。
	//  - none
	//  - gutter
	//  - line
	//  - all: 余白と現在の行を強調表示します。
	"editor.renderLineHighlight": "line",
	// エディターにフォーカスがある場合にのみ現在の行をエディターで強調表示する必要があるかどうかを制御します。
	"editor.renderLineHighlightOnlyWhenFocus": false,
	// エディターで空白文字を表示するかどうかを制御します。
	//  - none
	//  - boundary: 単語間の単一スペース以外の空白文字を表示します。
	//  - selection: 選択したテキストにのみ空白文字を表示します。
	//  - trailing: 末尾の空白文字のみを表示します。
	//  - all
	"editor.renderWhitespace": "selection",
	// 選択範囲の角を丸くするかどうかを制御します。
	"editor.roundedSelection": true,
	// 特定の等幅文字数の後に垂直ルーラーを表示します。複数のルーラーには複数の値を使用します。配列が空の場合はルーラーを表示しません。
	"editor.rulers": [],
	// スクリーン リーダーによってインライン候補が読み上げられるかどうかを制御します。
	"editor.screenReaderAnnounceInlineSuggestion": true,
	// 水平スクロールバーの表示を制御します。
	//  - auto: 水平スクロールバーは、必要な場合にのみ表示されます。
	//  - visible: 水平スクロールバーは常に表示されます。
	//  - hidden: 水平スクロールバーは常に非表示になります。
	"editor.scrollbar.horizontal": "auto",
	// 水平スクロールバーの高さ。
	"editor.scrollbar.horizontalScrollbarSize": 12,
	// 設定すると、水平スクロール バーはエディターのコンテンツのサイズを大きくしません。
	"editor.scrollbar.ignoreHorizontalScrollbarInContentHeight": false,
	// クリックするとページ単位でスクロールするか、クリック位置にジャンプするかを制御します。
	"editor.scrollbar.scrollByPage": false,
	// 垂直スクロールバーの表示を制御します。
	//  - auto: 垂直スクロールバーは、必要な場合にのみ表示されます。
	//  - visible: 垂直スクロールバーは常に表示されます。
	//  - hidden: 垂直スクロールバーは常に非表示になります。
	"editor.scrollbar.vertical": "auto",
	// 垂直スクロールバーの幅。
	"editor.scrollbar.verticalScrollbarSize": 14,
	// エディターが水平方向に余分にスクロールする文字数を制御します。
	"editor.scrollBeyondLastColumn": 4,
	// エディターが最後の行を越えてスクロールするかどうかを制御します。
	"editor.scrollBeyondLastLine": true,
	// 垂直および水平方向の両方に同時にスクロールする場合は、主要な軸に沿ってスクロールします。トラックパッド上で垂直方向にスクロールする場合は、水平ドリフトを防止します。
	"editor.scrollPredominantAxis": true,
	// エディターが選択項目と類似の一致項目を強調表示するかどうかを制御します。
	"editor.selectionHighlight": true,
	// semanticHighlighting をサポートされる言語で表示するかどうかを制御します。
	//  - true: セマンティックの強調表示がすべての配色テーマについて有効になりました。
	//  - false: セマンティックの強調表示がすべての配色テーマについて無効になりました。
	//  - configuredByTheme: セマンティックの強調表示は、現在の配色テーマの 'semanticHighlighting' 設定によって構成されています。
	"editor.semanticHighlighting.enabled": "configuredByTheme",
	// 現在選択されている配色テーマからの、エディターのセマンティック トークンの色とスタイルをオーバーライドします。
	"editor.semanticTokenColorCustomizations": {},
	// 非推奨の変数の取り消し線を制御します。
	"editor.showDeprecated": true,
	// とじしろの折りたたみコントロールを表示するタイミングを制御します。
	//  - always: 常に折りたたみコントロールを表示します。
	//  - never: 折りたたみコントロールを表示せず、余白のサイズを小さくします。
	//  - mouseover: マウスがとじしろの上にあるときにのみ、折りたたみコントロールを表示します。
	"editor.showFoldingControls": "mouseover",
	// 使用されていないコードのフェードアウトを制御します。
	"editor.showUnused": true,
	// 先頭と末尾の空白を常に選択するかどうか。
	"editor.smartSelect.selectLeadingAndTrailingWhitespace": true,
	// サブワード ('fooBar' の 'foo' または 'foo_bar' など) を選択する必要があるかどうか。
	"editor.smartSelect.selectSubwords": true,
	// アニメーションでエディターをスクロールするかどうかを制御します。
	"editor.smoothScrolling": false,
	// ブロック付きスニペットまたはファイル テンプレート スニペットがコード アクションとして表示されるかどうかを制御します。
	"editor.snippets.codeActions.enabled": true,
	// 他の修正候補と一緒にスニペットを表示するかどうか、およびその並び替えの方法を制御します。
	//  - top: 他の候補の上にスニペットの候補を表示します。
	//  - bottom: 他の候補の下にスニペットの候補を表示します。
	//  - inline: 他の候補と一緒にスニペットの候補を表示します。
	//  - none: スニペットの候補を表示しません。
	"editor.snippetSuggestions": "inline",
	// エディターのコンテンツをダブルクリックするか、`Escape` キーを押しても、ピーク エディターを開いたままにします。
	"editor.stablePeek": false,
	// 固定する行を決定するために使用するモデルを定義します。アウトライン モデルが存在しない場合、インデント モデルにフォールバックする折りたたみプロバイダー モデルにフォールバックします。この順序は、3 つのケースすべてで優先されます。
	"editor.stickyScroll.defaultModel": "outlineModel",
	// スクロール中にエディターの上部に入れ子になった現在のスコープを表示します。
	"editor.stickyScroll.enabled": true,
	// 表示する追従行の最大数を定義します。
	"editor.stickyScroll.maxLineCount": 5,
	// エディターの水平スクロール バーで固定スクロールのスクロールを有効にします。
	"editor.stickyScroll.scrollWithEditor": true,
	// インデントにスペースを使用するときは、タブ文字の選択動作をエミュレートします。選択範囲はタブ位置に留まります。
	"editor.stickyTabStops": false,
	// 候補のフィルター処理と並び替えでささいな入力ミスを考慮するかどうかを制御します。
	"editor.suggest.filterGraceful": true,
	// 入力候補を受け入れるときに単語を上書きするかどうかを制御します。これは、この機能の利用を選択する拡張機能に依存することにご注意ください。
	//  - insert: カーソルの右のテキストを上書きせずに候補を挿入します。
	//  - replace: 候補を挿入し、カーソルの右のテキストを上書きします。
	"editor.suggest.insertMode": "insert",
	// 並べ替えがカーソル付近に表示される単語を優先するかどうかを制御します。
	"editor.suggest.localityBonus": false,
	// 有効にすると、IntelliSense のフィルター処理では、単語の先頭で最初の文字が一致する必要があります。たとえば、`Console` や `WebContext` の場合は `c`、`description` の場合は _not_ です。無効にすると、IntelliSense はより多くの結果を表示しますが、一致品質で並べ替えられます。
	"editor.suggest.matchOnWordStartOnly": true,
	// この設定は非推奨です。候補ウィジェットのサイズ変更ができるようになりました。
	// 
	"editor.suggest.maxVisibleSuggestions": 0,
	// 提案の結果をエディターでプレビューするかどうかを制御します。
	"editor.suggest.preview": false,
	// ウィジェットを表示する際に候補を選択するかどうかを制御します。これは、自動的にトリガーされる提案 (`editor.quickSuggestions#` および `#editor.suggestOnTriggerCharacters`) にのみ適用され、明示的に呼び出された場合 (例: `Ctrl + Space`) で提案が常に選択されることに注意してください。
	//  - always: IntelliSense を自動でトリガーする場合に、常に候補を選択します。
	//  - never: IntelliSense を自動でトリガーする場合に、候補を選択しません。
	//  - whenTriggerCharacter: トリガー文字から IntelliSense をトリガーする場合にのみ、候補を選択します。
	//  - whenQuickSuggestion: 入力時に IntelliSense をトリガーする場合にのみ、候補を選択します。
	"editor.suggest.selectionMode": "always",
	// 保存された候補セクションを複数のワークプレースとウィンドウで共有するかどうかを制御します (`editor.suggestSelection` が必要)。
	"editor.suggest.shareSuggestSelections": false,
	// 有効にすると、IntelliSense に 'クラス' 候補が表示されます。
	"editor.suggest.showClasses": true,
	// 有効にすると、IntelliSense に `色` 候補が表示されます。
	"editor.suggest.showColors": true,
	// 有効にすると、IntelliSense に `定数` 候補が表示されます。
	"editor.suggest.showConstants": true,
	// 有効にすると、IntelliSense に `コンストラクター` 候補が表示されます。
	"editor.suggest.showConstructors": true,
	// 有効にすると、IntelliSense に `customcolor` 候補が表示されます。
	"editor.suggest.showCustomcolors": true,
	// 有効にすると、IntelliSense に `非推奨` 候補が表示されます。
	"editor.suggest.showDeprecated": true,
	// 有効にすると、IntelliSense に `enumMember` 候補が表示されます。
	"editor.suggest.showEnumMembers": true,
	// 有効にすると、IntelliSense に `列挙型` 候補が表示されます。
	"editor.suggest.showEnums": true,
	// 有効にすると、IntelliSense に `イベント` 候補が表示されます。
	"editor.suggest.showEvents": true,
	// 有効にすると、IntelliSense に `フィールド` 候補が表示されます。
	"editor.suggest.showFields": true,
	// 有効にすると、IntelliSense に 'ファイル' 候補が表示されます。
	"editor.suggest.showFiles": true,
	// 有効にすると、IntelliSense に `フォルダー` 候補が表示されます。
	"editor.suggest.showFolders": true,
	// 有効にすると、IntelliSense に `関数` 候補が表示されます。
	"editor.suggest.showFunctions": true,
	// 提案のアイコンを表示するか、非表示にするかを制御します。
	"editor.suggest.showIcons": true,
	// 候補の詳細をラベル付きのインラインで表示するか、詳細ウィジェットにのみ表示するかを制御します。
	"editor.suggest.showInlineDetails": true,
	// 有効にすると、IntelliSense に `インターフェイス` 候補が表示されます。
	"editor.suggest.showInterfaces": true,
	// 有効にすると、IntelliSense によって '問題' 候補が示されます。
	"editor.suggest.showIssues": true,
	// 有効にすると、IntelliSense に `キーワード` 候補が表示されます。
	"editor.suggest.showKeywords": true,
	// 有効にすると、IntelliSense に `メソッド` 候補が表示されます。
	"editor.suggest.showMethods": true,
	// 有効にすると、IntelliSense に `モジュール` 候補が表示されます。
	"editor.suggest.showModules": true,
	// 有効にすると、IntelliSense に `演算子` 候補が表示されます。
	"editor.suggest.showOperators": true,
	// 有効にすると、IntelliSense に `プロパティ` 候補が表示されます。
	"editor.suggest.showProperties": true,
	// 有効にすると、IntelliSense に `参照` 候補が表示されます。
	"editor.suggest.showReferences": true,
	// 有効にすると、IntelliSense に `スニペット` 候補が表示されます。
	"editor.suggest.showSnippets": true,
	// 候補ウィジェットの下部にあるステータス バーの表示を制御します。
	"editor.suggest.showStatusBar": false,
	// 有効にすると、IntelliSense に `構造体` 候補が表示されます。
	"editor.suggest.showStructs": true,
	// 有効にすると、IntelliSense に `typeParameter` 候補が表示されます。
	"editor.suggest.showTypeParameters": true,
	// 有効にすると、IntelliSense に `ユニット` 候補が表示されます。
	"editor.suggest.showUnits": true,
	// 有効な場合、IntelliSense によって 'ユーザー' 候補が示されます。
	"editor.suggest.showUsers": true,
	// 有効にすると、IntelliSense に `値` 候補が表示されます。
	"editor.suggest.showValues": true,
	// 有効にすると、IntelliSense に `変数` 候補が表示されます。
	"editor.suggest.showVariables": true,
	// 有効にすると、IntelliSense に 'テキスト' -候補が表示されます。
	"editor.suggest.showWords": true,
	// アクティブ スニペットがクイック候補を防止するかどうかを制御します。
	"editor.suggest.snippetsPreventQuickSuggestions": false,
	// 候補ウィジェットのフォント サイズ。`0` に設定すると、値 `editor.fontSize` が使用されます。
	"editor.suggestFontSize": 0,
	// 候補ウィジェットの行の高さ。`0` に設定すると、`editor.lineHeight` の値が使用されます。最小値は 8 です。
	"editor.suggestLineHeight": 0,
	// トリガー文字の入力時に候補が自動的に表示されるようにするかどうかを制御します。
	"editor.suggestOnTriggerCharacters": true,
	// 候補リストを表示するときに候補を事前に選択する方法を制御します。
	//  - first: 常に最初の候補を選択します。
	//  - recentlyUsed: `console.| -> console.log` などと選択対象に関して入力しない限りは、最近の候補を選択します。`log` は最近完了したためです。
	//  - recentlyUsedByPrefix: これらの候補を完了した以前のプレフィックスに基づいて候補を選択します。例: `co -> console` および `con -> const`。
	"editor.suggestSelection": "first",
	// タブ補完を有効にします。
	//  - on: タブ補完は、tab キーを押したときに最適な候補を挿入します。
	//  - off: タブ補完を無効にします。
	//  - onlySnippets: プレフィックスが一致する場合に、タブでスニペットを補完します。'quickSuggestions' が無効な場合に最適です。
	"editor.tabCompletion": "off",
	// エディターがタブを受け取るか、ワークベンチに委ねてナビゲーションするかを制御します。
	"editor.tabFocusMode": false,
	// 1 つのタブに相当するスペースの数。`editor.detectIndentation` がオンの場合、この設定はファイル コンテンツに基づいて上書きされます。
	"editor.tabSize": 4,
	// エディターの構文の色とフォント スタイルを、現在選択されている配色テーマからオーバーライドします。
	"editor.tokenColorCustomizations": {},
	// 自動挿入された末尾の空白を削除します。
	"editor.trimAutoWhitespace": true,
	// 折りたたまれた行の後の空のコンテンツをクリックすると行が展開されるかどうかを制御します。
	"editor.unfoldOnClickAfterEndOfLine": false,
	// 強調表示せず許可される文字を定義します。
	"editor.unicodeHighlight.allowedCharacters": {},
	// 許可されているロケールで一般的な Unicode 文字は強調表示されません。
	"editor.unicodeHighlight.allowedLocales": {
		"_os": true,
		"_vscode": true
	},
	// 現在のユーザー ロケールで一般的な文字を除き、基本的な ASCII 文字と混同される可能性のある文字を強調表示するかどうかを制御します。
	"editor.unicodeHighlight.ambiguousCharacters": true,
	// コメント内の文字を Unicode 強調表示の対象にするかどうかを制御します。
	"editor.unicodeHighlight.includeComments": "inUntrustedWorkspace",
	// 文字列内の文字を Unicode 強調表示の対象にするかどうかを制御します。
	"editor.unicodeHighlight.includeStrings": true,
	// 空白を占めるだけの文字や幅がまったくない文字を強調表示するかどうかを制御します。
	"editor.unicodeHighlight.invisibleCharacters": true,
	// 基本 ASCII 以外のすべての文字を強調表示するかどうかを制御します。U+0020 から U+007E の間の文字、タブ、改行 (LF)、行頭復帰のみが基本 ASCII と見なされます。
	"editor.unicodeHighlight.nonBasicASCII": "inUntrustedWorkspace",
	// 問題を起こす可能性がある、普通ではない行終端記号は削除してください。
	//  - auto: 通常とは異なる行の終端文字は自動的に削除される。
	//  - off: 通常とは異なる行の終端文字は無視される。
	//  - prompt: 通常とは異なる行の終端文字の削除プロンプトが表示される。
	"editor.unusualLineTerminators": "prompt",
	// タブ位置に合わせて、スペースとタブが挿入および削除されます。
	"editor.useTabStops": true,
	// ドキュメントの単語に基づいて入力候補を計算するかどうか、またどのドキュメントから入力候補を計算するかを制御します。
	//  - off: 単語ベースの候補をオフにします。
	//  - currentDocument: アクティブなドキュメントからのみ単語の候補を表示します。
	//  - matchingDocuments: 同じ言語の開いているすべてのドキュメントから単語の候補を表示します。
	//  - allDocuments: 開いているすべてのドキュメントから単語の候補を表示します。
	"editor.wordBasedSuggestions": "matchingDocuments",
	// 中国語/日本語/韓国語 (CJK) テキストに使用される単語区切り規則を制御します。
	//  - normal: 既定の改行ルールを使用します。
	//  - keepAll: 中国語/日本語/韓国語 (CJK) のテキストには単語区切りを使用しないでください。CJK 以外のテキストの動作は、通常の場合と同じです。
	"editor.wordBreak": "normal",
	// 
	"editor.wordSegmenterLocales": null,
	// 単語に関連したナビゲーションまたは操作を実行するときに、単語の区切り文字として使用される文字。
	"editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
	// 行の折り返し方法を制御します。
	//  - off: 行を折り返しません。
	//  - on: 行をビューポートの幅で折り返します。
	//  - wordWrapColumn: `editor.wordWrapColumn` で行を折り返します。
	//  - bounded: ビューポートと `editor.wordWrapColumn` の最小値で行を折り返します。
	"editor.wordWrap": "off",
	// `editor.wordWrap` が `wordWrapColumn` または `bounded` の場合に、エディターの折り返し桁を制御します。
	"editor.wordWrapColumn": 80,
	// 折り返し行のインデントを制御します。
	//  - none: インデントしません。 折り返し行は列 1 から始まります。
	//  - same: 折り返し行は、親と同じインデントになります。
	//  - indent: 折り返し行は、親 +1 のインデントになります。
	//  - deepIndent: 折り返し行は、親 +2 のインデントになります。
	"editor.wrappingIndent": "same",
	// 折り返しポイントを計算するアルゴリズムを制御します。アクセシビリティ モードでは、最高のエクスペリエンスを実現するために詳細設定が使用されることにご注意ください。
	//  - simple: すべての文字の幅が同じであると仮定します。これは、モノスペース フォントや、グリフの幅が等しい特定のスクリプト (ラテン文字など) で正しく動作する高速アルゴリズムです。
	//  - advanced: 折り返しポイントの計算をブラウザーにデリゲートします。これは、大きなファイルのフリーズを引き起こす可能性があるものの、すべてのケースで正しく動作する低速なアルゴリズムです。
	"editor.wrappingStrategy": "simple",
	// インライン チャットが変更に対してアクセシビリティの高い差分ビューアーもレンダリングするかどうか。
	//  - auto: アクセシビリティの高い差分ビューアーは、有効になっているスクリーン リーダー モードに基づいています。
	//  - on: アクセシビリティの高い差分ビューアーは常に有効です。
	//  - off: アクセシビリティの高い差分ビューアーは一度も有効になっていません。
	"inlineChat.accessibleDiffView": "auto",
	// 変更されたリージョン外で入力するときにインライン チャット セッションを終了するかどうか。
	"inlineChat.finishOnType": false,
	// インライン チャット キー バインドを保持すると、音声認識が自動的に有効になるかどうか。
	"inlineChat.holdToSpeech": true,
	// インライン チャットで作成された変更をドキュメントに直接適用するか、最初にプレビューするかを構成します。
	//  - live: 変更はドキュメントに直接適用されますが、インライン差分を介して強調表示し、チャンク単位で受け入れ/破棄できます。セッションを終了しても変更は保持されます。
	//  - preview: 変更はプレビューのみであり、適用ボタンを使用して承認する必要があります。セッションを終了すると、変更は破棄されます。
	"inlineChat.mode": "live",
	// 保存時にノートブックに対して一連のコード アクションを実行します。コード アクションを指定し、遅延後にファイルを保存せず、エディターをシャットダウンしないようにする必要があります。例: '"notebook.source.organizeImports": "explicit"'
	"notebook.codeActionsOnSave": {},
	// ソース管理ビューでインラインのアクションを常に表示するかどうかを制御します。
	"scm.alwaysShowActions": false,
	// リポジトリがソース管理ビューに常に表示される必要があるかどうかを制御します。
	"scm.alwaysShowRepositories": false,
	// ファイルを開くときに ソース管理ビューでそのファイルを自動的に表示および選択するかどうかを制御します。
	"scm.autoReveal": true,
	// ソース管理ビューでフォルダーをコンパクトな形式でレンダリングするかどうかを制御します。このような形式では、単一の子フォルダーは結合されたツリー要素に圧縮されます。
	"scm.compactFolders": true,
	// アクティビティ バーのソース管理アイコンのカウント バッジを制御します。
	//  - all: すべてのソース管理プロバイダー カウント バッジの合計を表示します。
	//  - focused: フォーカスのあるソース管理プロバイダーのカウント バッジを表示します。
	//  - off: ソース管理のカウント バッジを無効にします。
	"scm.countBadge": "all",
	// 既定のソース管理リポジトリ ビュー モードを制御します。
	//  - tree: リポジトリの変更をツリー形式で表示します。
	//  - list: リポジトリの変更を一覧で表示します。
	"scm.defaultViewMode": "list",
	// ソース管理リポジトリがリストとして表示されたときに既定の並べ替え順序を変更するかどうかを制御します。
	//  - name: リポジトリの変更をファイル名で並べ替えます。
	//  - path: リポジトリの変更をパスで並べ替えます。
	//  - status: ソース管理の状態でリポジトリの変更を並べ替えます。
	"scm.defaultViewSortKey": "path",
	// エディターの差分デコレーターを制御します。
	//  - all: 使用可能なすべての場所で差分の装飾を表示します。
	//  - gutter: 差分の装飾はエディターのとじしろでのみ表示します。
	//  - overview: 差分の装飾は、概要ルーラーでのみ表示します。
	//  - minimap: 差分の装飾はミニマップでのみ表示します。
	//  - none: 差分の装飾を表示しません。
	"scm.diffDecorations": "all",
	// ソース管理の差分の余白の装飾に関する動作を制御します。
	//  - diff: クリック時にインライン差分ピーク ビューを表示します。
	//  - none: 何もしない。
	"scm.diffDecorationsGutterAction": "diff",
	// 余白の差分装飾にパターンを使用するかどうかを制御します。
	"scm.diffDecorationsGutterPattern": {
		"added": false,
		"modified": true
	},
	// 余白におけるソース管理の差分デコレーターの表示を制御します。
	//  - always: 常に余白に差分デコレーターを表示します。
	//  - hover: カーソルを置いた時にのみ余白に差分デコレーターを表示します。
	"scm.diffDecorationsGutterVisibility": "always",
	// 余白の差分表示 (追加と変更) の幅 (ピクセル) を制御します。
	"scm.diffDecorationsGutterWidth": 3,
	// ソース管理の差分の余白装飾で先頭と末尾の空白を無視するかどうかを制御します。
	//  - true: 先頭と末尾の空白を無視します。
	//  - false: 先頭と末尾の空白を無視しないでください。
	//  - inherit: 'diffEditor.ignoreTrimWhitespace' から継承します。
	"scm.diffDecorationsIgnoreTrimWhitespace": "false",
	// ソース管理グラフ ビューにどのバッジを表示するかを制御します。バッジはグラフの右側に表示され、履歴項目グループの名前を示します。
	//  - all: すべての履歴項目グループのバッジをソース管理グラフ ビューに表示します。
	//  - filter: フィルターとして使用されている履歴項目グループのバッジのみをソース管理グラフ ビューに表示します。
	"scm.graph.badges": "filter",
	// リストの最後までスクロールしたときにソース管理グラフ ビューに次のページの項目を読み込むかどうかを制御します。
	"scm.graph.pageOnScroll": true,
	// ソース管理グラフ ビューに既定で、および追加の項目を読み込むときに表示する項目の数。
	"scm.graph.pageSize": 50,
	// 入力メッセージのフォントを制御します。ワークベンチ ユーザー インターフェイスのフォント ファミリーを使う場合は 'default'、'#editor.fontFamily#' の値を使う場合は 'editor' を使用します。カスタム フォント ファミリーを使うこともできます。
	"scm.inputFontFamily": "default",
	// 入力メッセージのフォント サイズをピクセル単位で制御します。
	"scm.inputFontSize": 13,
	// 入力が自動拡張される行の最大数を制御します。
	"scm.inputMaxLineCount": 10,
	// 入力の自動拡張元の行の最小数を制御します。
	"scm.inputMinLineCount": 1,
	// ソース管理プロバイダー ヘッダーのカウント バッジを制御します。これらのヘッダーは、複数のプロバイダーがある場合、または `scm.alwaysShowRepositories` 設定が有効になっている場合に、[ソース管理] ビューと、[ソース管理リポジトリ] ビューに表示されます。
	//  - hidden: ソース管理プロバイダーのカウント バッジを非表示にします。
	//  - auto: 0 以外の場合にのみ、ソース管理プロバイダーのカウント バッジを表示します。
	//  - visible: ソース管理プロバイダーのカウント バッジを表示します。
	"scm.providerCountBadge": "hidden",
	// ソース管理リポジトリ ビューのリポジトリの並べ替え順序を制御します。
	//  - discovery time: ソース管理リポジトリ ビューのリポジトリは、検出時刻順に並べ替えられます。ソース管理ビューのリポジトリは、選択された順序で並べ替えられます。
	//  - name: ソース管理リポジトリおよびソース管理ビューのリポジトリは、リポジトリ名で並べ替えられます。
	//  - path: ソース管理リポジトリおよびソース管理ビューのリポジトリは、リポジトリ パスで並べ替えられます。
	"scm.repositories.sortOrder": "discovery time",
	// ソース管理リポジトリのセクションに表示するリポジトリの数を制御します。0 に設定すると、ビューのサイズを手動で変更できるようになります。
	"scm.repositories.visible": 10,
	// ソース管理ビューにアクション ボタンを表示するかどうかを制御します。
	"scm.showActionButton": true,
	// [ソース管理] の入力にアクション ボタンを表示するかどうかを制御します。
	"scm.showInputActionButton": true,
	// 作業セットがないソース管理履歴項目グループに切り替えるときに使用する既定のワーキング セットを制御します。
	//  - empty: ワーキング セットがないソース コード管理履歴項目グループに切り替える場合は、空のワーキング セットを使用します。
	//  - current: 作業セットがないソース管理履歴項目グループに切り替える場合は、現在のワーキング セットを使用します。
	"scm.workingSets.default": "current",
	// ソース コード管理履歴項目グループを切り替えるときにエディターのワーキング セットを格納するかどうかを制御します。
	"scm.workingSets.enabled": false,
	// ユーザーの確認なしで許可する UNC ホスト名のセット (先頭または末尾にバックスラッシュ (例: `192.168.0.1` や `my-server`) が含まれます)。この設定で許可されていない UNC ホストにアクセスしている場合、またはユーザーの確認によって確認されていない場合は、エラーが発生し、操作が停止します。この設定を変更する場合は、再起動が必要です。この設定の詳細については、https://aka.ms/vscode-windows-unc を参照してください。
	"security.allowedUNCHosts": [],
	// 有効にした場合、ローカル ファイルまたはワークスペースがプロトコル ハンドラーを介して開くたびに確認を求めるダイアログが表示されます。
	"security.promptForLocalFileProtocolHandling": true,
	// 有効にした場合、リモート ファイルまたはワークスペースがプロトコル ハンドラーを介して開かれるたびに確認を求めるダイアログが表示されます。
	"security.promptForRemoteFileProtocolHandling": true,
	// 有効にすると、`security.allowedUNCHosts` 設定またはユーザーの確認後に許可された UNC ホスト名へのアクセスのみが許可されます。この設定の詳細については、https://aka.ms/vscode-windows-unc をご覧ください。
	"security.restrictUNCAccess": true,
	// 制限モードでバナーを表示するタイミングを制御します。
	//  - always: 信頼されていないワークスペースが開かれるたびにバナーを表示します。
	//  - untilDismissed: 信頼されていないワークスペースが初めて開かれる場合、閉じられるまでバナーを表示します。
	//  - never: 信頼されていないワークスペースが開かれる場合はバナーを表示しません。
	"security.workspace.trust.banner": "untilDismissed",
	// 空のウィンドウを VS Code 内で既定で信頼するかどうかを制御します。'#security.workspace.trust.untrustedFiles#' と共に使用すると、空のウィンドウでプロンプトを表示せずに、VS Code のすべての機能を有効にすることができます。
	"security.workspace.trust.emptyWindow": true,
	// VS Code 内でワークスペースの信頼を有効にするかどうかを制御します。
	"security.workspace.trust.enabled": true,
	// ワークスペースを信頼するための起動メッセージが表示されるタイミングを制御します。
	//  - always: 信頼されていないワークスペースが開かれるたびに信頼を確認します。
	//  - once: 信頼されていないワークスペースが初めて開かれるときに信頼を確認します。
	//  - never: 信頼されていないワークスペースが開かれる場合に信頼を確認しない。
	"security.workspace.trust.startupPrompt": "once",
	// 信頼されたワークスペースで信頼されていないファイルを開くときの取り扱いを制御します。この設定は、'#security.workspace.trust.emptyWindow#' 経由で信頼される空のウィンドウでファイルを開く場合にも適用されます。
	//  - prompt: ワークスペースごとに信頼されていないファイルをどのように処理するかを確認します。信頼されているワークスペースに信頼できないファイルが一度追加されると、再度プロンプトが表示されることはありません。
	//  - open: 確認せずに、信頼されていないファイルを信頼されているワークスペースに追加することを常に許可します。
	//  - newWindow: 確認せずに、制限モードで、信頼されていないファイルを常に別のウィンドウで開く。
	"security.workspace.trust.untrustedFiles": "prompt",
	// フォーカスされていないエディターとターミナルを暗くするかどうかを指定するもので、これにより、入力された入力情報の入力先がより明確になります。これは、ノートブックや拡張機能 Web ビュー エディターなどの iframe を利用するエディターの注目すべき例外を除き、ほとんどのエディターで動作します。
	"accessibility.dimUnfocused.enabled": false,
	// フォーカスされていないエディターとターミナルに使用する不透明度の分数 (0.2 ~ 1.0)。これは、`accessibility.dimUnfocused.enabled` が有効になっている場合にのみ効力を発します。
	"accessibility.dimUnfocused.opacity": 0.75,
	// ユーザー補助対応のビューを非表示にするかどうかを制御します。
	"accessibility.hideAccessibleView": false,
	// エディター タブの高さを制御します。`workbench.editor.showTabs` が `multiple` に設定されていない場合は、タイトル コントロール バーにも適用されます。
	"window.density.editorTabHeight": "default",
	// ワークベンチのアクティビティ バー アイコンをクリックする動作を制御します。`workbench.activityBar.location` が `default` に設定されていない場合、この値は無視されます。
	//  - toggle: クリックした項目が既に表示されている場合は、プライマリ サイド バーを非表示にします。
	//  - focus: クリックした項目が既に表示されている場合は、プライマリ サイド バーにフォーカスします。
	"workbench.activityBar.iconClickBehavior": "toggle",
	// プライマリとセカンダリのサイド バーに対するアクティビティ バーの相対的な場所を制御します。
	//  - default: プライマリ サイド バーの横とセカンダリ サイド バーの上にアクティビティ バーを表示します。
	//  - top: プライマリとセカンダリのサイド バーの上部にアクティビティ バーを表示します。
	//  - bottom: プライマリとセカンダリのサイド バーの下部にアクティビティ バーを表示します。
	//  - hidden: プライマリとセカンダリのサイド バーのアクティビティ バーを非表示にします。
	"workbench.activityBar.location": "default",
	// 現在のワークスペースのクラウドに保存されている使用可能な作業変更を自動的に再開するかどうかを制御します。
	//  - onReload: ウィンドウの再読み込み時に、クラウドから使用可能な作業変更を自動的に再開します。
	//  - off: クラウドから作業変更を再開しないでください。
	"workbench.cloudChanges.autoResume": "onReload",
	// [作業の続行] を使用するときに、クラウドに作業変更を保存するようユーザーに確認するかどうかを制御します。
	//  - prompt: [作業を続行] を使用して作業変更をクラウドに保存するためにサインインするようユーザーに確認します。
	//  - off: ユーザーがクラウドの変更を既に有効にしていない限り、[作業を続行] を使用してクラウドに作業変更を保存しないでください。
	"workbench.cloudChanges.continueOn": "prompt",
	// 現在選択している配色テーマで配色を上書きします。
	"workbench.colorCustomizations": {},
	// `window.autoDetectColorScheme` が有効になっていない場合に、ワークベンチで使用される配色テーマを指定します。
	"workbench.colorTheme": "Default Dark Modern",
	// コマンド パレットがチャットの質問をする場所を制御します。
	//  - chatView: チャット ビューでチャットの質問をします。
	//  - quickChat: クイック チャットでチャットの質問をします。
	"workbench.commandPalette.experimental.askChatLocation": "chatView",
	// コマンド パレットに同様のコマンドを含めるかどうかを制御します。自然言語サポートを提供する拡張機能がインストールされている必要があります。
	"workbench.commandPalette.experimental.enableNaturalLanguageSearch": true,
	// コマンド パレットに一般的に使用されるコマンドのリストを含めるかどうかを制御します。
	"workbench.commandPalette.experimental.suggestCommands": false,
	// コマンド パレットで最近使用したコマンド履歴を保持する数を制御します。0 に設定するとコマンド履歴を無効にします。
	"workbench.commandPalette.history": 50,
	// コマンド パレットを次回開いたとき、コマンド パレットの最後の入力を復元するかどうかを制御します。
	"workbench.commandPalette.preserveInput": false,
	// エディター グループがアクティブでない場合でも、常にエディターアクションを表示するかどうかを制御します。
	"workbench.editor.alwaysShowEditorActions": false,
	// リストのいずれかの種類と一致するエディターがエディター グループの最初のものとして開いており、複数のグループが開いている場合、グループは自動的にロックされます。ロックされたグループは、ユーザーのジェスチャ (例: ドラッグ アンド ドロップ) で明示的に選択された場合に、エディターを開くときにのみ使用されますが、既定では使用されません。その結果、ロックされたグループ内のアクティブなエディターが、誤って別のエディターで置き換えられる可能性は低くなります。
	"workbench.editor.autoLockGroups": {
		"default": false,
		"workbench.editor.chatSession": false,
		"workbench.editorinputs.searchEditorInput": false,
		"repl": false,
		"workbench.editors.gettingStartedInput": false,
		"terminalEditor": true,
		"jupyter-notebook": false,
		"imagePreview.previewEditor": false,
		"vscode.audioPreview": false,
		"vscode.videoPreview": false,
		"jsProfileVisualizer.cpuprofile.table": false,
		"jsProfileVisualizer.heapprofile.table": false,
		"jsProfileVisualizer.heapsnapshot.table": false,
		"workbench.input.interactive": false,
		"mainThreadWebview-markdown.preview": false,
		"mainThreadWebview-simpleBrowser.view": true,
		"mainThreadWebview-browserPreview": true
	},
	// 複数のグループが開かれているとき、中央揃えのレイアウトを自動的に横幅最大にするかどうかを制御します。1 つのグループのみが開かれている場合は、元の中央揃えの横幅に戻ります。
	"workbench.editor.centeredLayoutAutoResize": true,
	// ウィンドウのサイズを変更するときに、中央のレイアウトで一定の幅を維持するかどうかを制御します。
	"workbench.editor.centeredLayoutFixedWidth": false,
	// 空のエディターのグループにある最後のタブを閉じたときの動作を制御します。有効であるとき、空のグループは自動的に閉じられます。無効であるとき、空のグループはグリッドの一部として残ります。
	"workbench.editor.closeEmptyGroups": true,
	// セッション中のファイルを表示しているエディターが、その他のプロセスによって削除されるか名前を変更された場合に、エディターを自動的に閉じるかどうかを制御します。これを無効にすると、このような場合にエディターを開き続けます。アプリケーション内で削除すると、エディターは常に閉じられ、変更が保存されていないエディターのデータを保存して閉じることはありません。
	"workbench.editor.closeOnFileDelete": false,
	// カスタム ワークベンチ エディターのラベルを適用する必要があるかどうかを制御します。
	"workbench.editor.customLabels.enabled": true,
	// エディター ラベルのレンダリングを制御します。各 __Item__ は、ファイル パスに一致するパターンです。相対ファイル パスと絶対ファイル パスの両方がサポートされています。相対パスには WORKSPACE_FOLDER を含める必要があります (例: 'WORKSPACE_FOLDER/src/**.tsx' または '*/src/**.tsx')。絶対パターンの先頭は `/` にする必要があります。複数のパターンが一致する場合は、最長一致のあるパスが選択されます。各 __Value__ は、__Item__ が一致する場合にレンダリングされるエディターのテンプレートです。変数は、コンテキストに基づいて置き換えられます。
	// - '${dirname}': ファイルが配置されているフォルダーの名前 (例: `WORKSPACE_FOLDER/folder/file.txt -> folder`)。
	// - `${dirname(N)}`: ファイルが配置されている n 番目の親フォルダーの名前 (例: `N=2: WORKSPACE_FOLDER/static/folder/file.txt -> WORKSPACE_FOLDER`)。負の数を使用すると、パスの先頭からフォルダーを選択できます (例: `N=-1: WORKSPACE_FOLDER/folder/file.txt -> WORKSPACE_FOLDER`)。__Item__ が絶対パターン パスの場合、最初のフォルダー (`N=-1`) は絶対パスの最初のフォルダーを参照し、それ以外の場合はワークスペース フォルダーに対応します。
	// - '${filename}': ファイル拡張子のないファイル名 (例: `WORKSPACE_FOLDER/folder/file.txt -> file`)。
	// - '${extname}': ファイル拡張子 (例: `WORKSPACE_FOLDER/folder/file.txt -> txt`)。
	// - '${extname(N)}': '.' で区切られたファイルの n 番目の拡張子。(例: 'N=2: WORKSPACE_FOLDER/folder/file.ext1.ext2.ext3 -> ext1')。拡張子は、負の数を使用すると、拡張子の先頭から選択できます (例: `N=-1: `N=-1: WORKSPACE_FOLDER/folder/file.ext1.ext2.ext3 -> ext2`)。
	// 
	// 例: '"**/static/**/*.html": "${filename} - ${dirname} (${extname})"' は、ファイル `WORKSPACE_FOLDER/static/folder/file.html` を 'file - folder (html)' としてレンダリングします。
	"workbench.editor.customLabels.patterns": {},
	// エディター ファイルの装飾にバッジを使用するかどうかを制御します。
	"workbench.editor.decorations.badges": true,
	// エディター ファイルの装飾に配色を使用するかどうかを制御します。
	"workbench.editor.decorations.colors": true,
	// バイナリとして検出されたファイルの既定のエディター。未定義の場合、ユーザーにはピッカーが掲示されます。
	"workbench.editor.defaultBinaryEditor": "",
	// タブをダブルクリックしたときにエディター グループのサイズを変更する方法を制御します。`workbench.editor.showTabs` が `multiple` に設定されていない場合、この値は無視されます。
	//  - maximize: 他のすべてのエディター グループは非表示になり、現在のエディター グループが最大化されてエディター領域全体が占有されます。
	//  - expand: エディター グループは、他のすべてのエディター グループをできるだけ小さくすることで、可能な限り多くの領域を占有します。
	//  - off: タブをダブルクリックしても、エディター グループのサイズは変更されません。
	"workbench.editor.doubleClickTabToToggleEditorGroupSizes": "expand",
	// エディターをウィンドウからドラッグして新しいウィンドウで開くことができるかどうかを制御します。これを動的に切り替えるには、ドラッグ中に `Alt` キーを長押しします。
	"workbench.editor.dragToOpenWindow": true,
	// エディター アクションを表示する場所を制御します。
	//  - default: `workbench.editor.showTabs` が `none` に設定されているときにウィンドウのタイトル バーにエディター アクションを表示します。それ以外の場合は、エディターのタブ バーにエディター アクションが表示されます。
	//  - titleBar: ウィンドウのタイトル バーにエディター アクションを表示します。`window.customTitleBarVisibility` が `never` に設定されている場合、エディター アクションは表示されません。
	//  - hidden: エディター アクションは表示されません。
	"workbench.editor.editorActionsLocation": "default",
	// 空白のエディターのテキスト ヒントをエディターに表示するかどうかを制御します。
	"workbench.editor.empty.hint": "text",
	// エディターを開くときにプレビュー モードを使用するかどうかを制御します。エディター グループごとに最大 1 つのプレビュー モード エディターがあります。このエディターのファイル名は、タブまたはタイトル ラベルと [エディターを開く] ビューに斜体で表示されます。その内容は、プレビュー モードで開かれた次のエディターに置き換えられます。プレビュー モード エディターで変更を加えると、その変更は保持されます。ラベルをダブルクリックした場合や、ラベルのコンテキスト メニューの [開いたままにする] オプションを選択した場合も、変更は保持されます。エクスプローラーからファイルをダブルクリックで開くと、そのエディターがすぐに保持されます。
	"workbench.editor.enablePreview": true,
	// エディターからコード ナビゲーションを開始するときに、エディターをプレビュー状態のままにするかどうかを制御します。プレビュー エディターは開いたままではなく、明示的に (ダブルクリックや編集により) 開いたままに設定されるまで再利用されます。`workbench.editor.showTabs` が `multiple` に設定されていない場合、この値は無視されます。
	"workbench.editor.enablePreviewFromCodeNavigation": false,
	// Quick Open から開いたエディターをプレビュー エディターとして表示するかどうかを制御します。プレビュー エディターは開いたままではなく、明示的に (ダブルクリックや編集により) 開いたままに設定されるまで再利用されます。有効になっている場合、選択する前に Ctrl キーを押しながらエディターをプレビューでない状態として開きます。`workbench.editor.showTabs` が `multiple` に設定されていない場合、この値は無視されます。
	"workbench.editor.enablePreviewFromQuickOpen": false,
	// 最近使用した順序でタブを閉じるか、左から右の順にタブを閉じるかを制御します。
	"workbench.editor.focusRecentEditorAfterClose": true,
	// 変更が保存されていないエディターのタブで上罫線を描画するかどうかを制御します。`workbench.editor.showTabs` が multiple に設定されていない場合、この値は無視されます。
	"workbench.editor.highlightModifiedTabs": false,
	// 言語検出でエディター履歴を使用できるようにします。これにより、自動言語検出は最近開かれた言語を優先し、より少ない入力で自動言語検出を動作させることができます。
	"workbench.editor.historyBasedLanguageDetection": true,
	// エディターに表示するラベルの書式を制御します。
	//  - default: ファイルの名前を表示します。タブが有効かつ 1 つのグループ内の 2 つの同名ファイルに各ファイルのパスの区切り記号が追加されます。タブを無効にすると、エディターがアクティブな時にワークスペース フォルダーの相対パスが表示されます。
	//  - short: ディレクトリ名に続けてファイル名を表示します。
	//  - medium: ワークスペース フォルダーからの相対パスに続けてファイル名を表示します。
	//  - long: 絶対パスに続けてファイル名を表示します。
	"workbench.editor.labelFormat": "default",
	// 言語の選択で言語が明示的に設定されている場合を除き、テキスト エディターの言語を自動的に検出するかどうかを制御します。これは、オフにしたくない言語を指定できるように、言語でスコープを設定することもできます。これは、Markdown のような言語 (多くの場合、言語検出で Markdown ではなく埋め込み言語であると認識させる可能性のある他の言語が含まれている) で便利です。
	"workbench.editor.languageDetection": true,
	// 有効にすると、エディターの言語が検出されたコンテンツ言語と一致しない場合のステータス バーのクイック修正が表示されます。
	"workbench.editor.languageDetectionHints": {
		"untitledEditors": true,
		"notebookEditors": true
	},
	// 開いているエディターの数を制限するかどうかを制御します。有効にすると、最近使用されていないエディターが閉じられ、新しく開くエディター用にスペースが確保されます。
	"workbench.editor.limit.enabled": false,
	// 開いているエディターの最大数が、構成された制限にカウントするためにダーティ エディターを除外するかどうかを制御します。
	"workbench.editor.limit.excludeDirty": false,
	// 開いているエディターの最大数をエディター グループごとに適用するか、すべてのエディター グループに適用するかを制御します。
	"workbench.editor.limit.perEditorGroup": false,
	// 開いているエディターの最大数を制御します。`workbench.editor.limit.perEditorGroup` 設定を使用して、エディター グループごと、またはすべてのグループでこの制限を制御します。
	"workbench.editor.limit.value": 10,
	// マウス ボタン 4 と 5 を、それぞれコマンド '前に戻る' と '次に進む' に使用できるようにします。
	"workbench.editor.mouseBackForwardToNavigate": true,
	// '前に戻る' や '次に進む' などのコマンドの履歴ナビゲーションの範囲をエディターで制御します。
	//  - default: 開いているすべてのエディターやエディター グループの間を移動します。
	//  - editorGroup: アクティブ エディター グループのエディター内でのみ移動します。
	//  - editor: アクティブ エディター内でのみ移動します。
	"workbench.editor.navigationScope": "default",
	// エディターを開く場所を制御します。`left` または `right` を選択すると、現在アクティブになっているエディターの左または右にエディターが開きます。`first` または `last` を選択すると、現在アクティブになっているエディターとは別個にエディターが開きます。
	"workbench.editor.openPositioning": "right",
	// (たとえば、エクスプローラーから) 並べて開く複数のエディターの既定の向きを制御します。既定では、エディターを現在アクティブなものの右側に開きます。`down` に変更すると、エディターを現在アクティブなものの下側に開きます。
	"workbench.editor.openSideBySideDirection": "right",
	// ピン留めされたエディター タブのサイズを制御します。ピン留めされたタブは、開いているすべてのタブの先頭に並べ替えられ、通常はピン留めを外すまで閉じません。`workbench.editor.showTabs` が `multiple` に設定されていない場合、この値は無視されます。
	//  - normal: 固定されたタブは、固定されていないタブの外観を継承します。
	//  - compact: 固定されたタブは、コンパクト形式でアイコンまたはエディター名の最初の文字のみが表示されます。
	//  - shrink: 固定されたタブは、エディター名の一部を示すコンパクトな固定サイズに縮小されます。
	"workbench.editor.pinnedTabSizing": "normal",
	// 有効にすると、ピン留めされたタブが他のすべてのタブの上に、個別の行で表示されます。`workbench.editor.showTabs` が `multiple` に設定されていない場合、この値は無視されます。
	"workbench.editor.pinnedTabsOnSeparateRow": false,
	// 有効にすると、エディター履歴を考慮した言語検出モデルの方が優先順位が高くなります。
	"workbench.editor.preferHistoryBasedLanguageDetection": false,
	// キーボードまたはマウスの中クリックを使用して閉じるときに、ピン留めされたエディターを閉じるかどうかを制御します。
	//  - keyboardAndMouse: マウスの中クリックまたはキーボードを使用する場合は、ピン留めされたエディターを閉じないようにしてください。
	//  - keyboard: キーボードを使用する場合は、ピン留めされたエディターを閉じないようにします。
	//  - mouse: マウスの中央クリックを使用する場合は、ピン留めされたエディターを閉じないようにします。
	//  - never: ピン留めされたエディターを閉じないようにします。
	"workbench.editor.preventPinnedEditorClose": "keyboardAndMouse",
	// エディターを閉じた後に再び開いたときに、最後のエディター ビューの状態 (スクロール位置など) を回復します。エディター ビューの状態は、エディター グループごとに保存され、グループが閉じられると破棄されます。エディター グループに以前のビュー状態が見つからなかった場合に、すべてのエディター グループにわたって最後に確認されたビュー状態を使用するには、`workbench.editor.sharedViewState` 設定を使用します。
	"workbench.editor.restoreViewState": true,
	// エディターを開くときに、どこの表示グループにエディターを表示するかどうかを制御します。無効にした場合、エディターは現在のアクティブなエディター グループに優先して開かれます。有効にした場合は、現在のアクティブなエディター グループで開くのではなく、既に開かれた状態のエディターを表示します。特定のグループ内や現在アクティブなグループの横に強制的にエディターを開いた場合などに、この設定が無視される場合もあることにご注意ください。
	"workbench.editor.revealIfOpen": false,
	// タブをスクロールして開くかどうかを制御します。既定では、スクロール時にはタブは表示されるだけで、開かれることはありません。スクロール時に Shift キーを長押しすると、その間にこの動作を変更できます。`workbench.editor.showTabs` が `multiple` に設定されていない場合、この値は無視されます。
	"workbench.editor.scrollToSwitchTabs": false,
	// すべてのエディター グループで最新のエディター ビューの状態 (スクロール位置など) を保持し、エディター グループに対する特定のエディター ビュー状態が検出された場合は復元します。
	"workbench.editor.sharedViewState": false,
	// 開いているエディターをアイコン付きで表示するかどうかを制御します。これにはファイル アイコン テーマも有効にする必要があります。
	"workbench.editor.showIcons": true,
	// 開いているエディターを個々のタブとして表示するか、1 つの大きなタブとして表示するか、タイトル領域を表示しないかを制御します。
	//  - multiple: 各エディターは、エディターのタイトル領域にタブとして表示されます。
	//  - single: アクティブなエディターは、エディターのタイトル領域に 1 つの大きなタブとして表示されます。
	//  - none: エディターのタイトル領域は表示されていません。
	"workbench.editor.showTabs": "multiple",
	// エディター グループ内でエディターが分割された場合のレイアウトを、垂直方向または水平方向に制御します。
	//  - vertical: エディターは上から下に配置されます。
	//  - horizontal: エディターは左から右に配置されます。
	"workbench.editor.splitInGroupLayout": "horizontal",
	// エディターまたはファイルをエディター領域の端にドロップして、エディター グループをドラッグ アンド ドロップ操作から分割できるかどうかを制御します。
	"workbench.editor.splitOnDragAndDrop": true,
	// エディター グループを分割するときのサイズを制御します。
	//  - auto: すべてのエディター グループが既に等分に分割されていない限り、アクティブなエディター グループを等分に分割します。その場合、すべてのエディター グループを等分に分割します。
	//  - distribute: すべてのエディター グループを等分に分割します。
	//  - split: アクティブなエディター グループを等分に分割します。
	"workbench.editor.splitSizing": "auto",
	// タブの [閉じる] 動作設定ボタンの表示を制御します。
	"workbench.editor.tabActionCloseVisibility": true,
	// エディターのタブ動作設定ボタンの位置を制御します (閉じる、ピン留めを外す)。`workbench.editor.showTabs` が `multiple` に設定されていない場合、この値は無視されます。
	"workbench.editor.tabActionLocation": "right",
	// タブの [ピン留めを外す] 動作設定ボタンの表示を制御します。
	"workbench.editor.tabActionUnpinVisibility": true,
	// エディター タブのサイズを制御します。`workbench.editor.showTabs` が `multiple` に設定されていない場合、この値は無視されます。
	//  - fit: 常に完全なエディター ラベルを表示するのに足りるタブの大きさを維持します。
	//  - shrink: すべてのタブを一度に表示するには利用可能なスペースが足りない場合に、タブを縮小するようにします。
	//  - fixed: すべてのタブを同じサイズにし、使用可能な領域が一度にすべてのタブを表示するのに十分でない場合に小さくできるようにします。
	"workbench.editor.tabSizing": "fit",
	// `workbench.editor.tabSizing` サイズが `fixed` に設定されている場合のタブの最大幅を制御します。
	"workbench.editor.tabSizingFixedMaxWidth": 160,
	// `workbench.editor.tabSizing` サイズが `fixed` に設定されている場合のタブの最小幅を制御します。
	"workbench.editor.tabSizingFixedMinWidth": 50,
	// エディター タイトル領域のタブおよび階層リンクに使用するスクロール バーの高さを制御します。
	//  - default: 既定のサイズ。
	//  - large: マウスでつかみやすいサイズに拡大する。
	"workbench.editor.titleScrollbarSizing": "default",
	// 無題のエディターのラベルの形式を制御します。
	//  - content: 無題ファイルの名前は、ファイル パスが関連付けられていない限り、最初の行の内容から導き出されます。行が空であるか、単語文字が含まれていない場合に、名前にフォールバックします。
	//  - name: 無題のファイルの名前は、ファイルの内容から派生していません。
	"workbench.editor.untitled.labelFormat": "content",
	// 使用可能な領域を超えたときに複数の行にタブを折り返すか、またはスクロール バーを表示するかどうかを制御します。`workbench.editor.showTabs` が '`multiple`' に設定されていない場合、この値は無視されます。
	"workbench.editor.wrapTabs": false,
	// [glob パターン](https://aka.ms/vscode-glob-patterns) をエディターに構成します (`"*.hex": "hexEditor.hexedit"` など)。これらは既定の動作よりも優先されます。
	"workbench.editorAssociations": {},
	// エディターで開く際に確認を求める前に、ファイルの最小サイズを MB 単位で制御します。この設定はすべてのエディターの種類と環境に適用されるとは限らない場合があることに、ご注意ください。
	"workbench.editorLargeFileConfirmation": 1024,
	// Microsoft のオンライン サービスから実行する実験を取得します。
	"workbench.enableExperiments": true,
	// 現在のワークスペースの利用可能な作業変更をクラウドに自動的に格納するかどうかを制御します。この設定は Web では無効です。
	//  - onShutdown: ウィンドウを閉じるときに、現在の作業変更をクラウドに自動的に保存します。
	//  - off: 作業変更をクラウドに自動的に保存しないでください。
	"workbench.experimental.cloudChanges.autoStore": "off",
	// 現在のセッションと部分的に一致するクラウドの変更を表示するかどうかを制御します。
	"workbench.experimental.cloudChanges.partialMatches.enabled": false,
	// `window.commandCenter` が `true` の場合に、コマンド センターの横に [共有] アクションを表示するかどうかを制御します。
	"workbench.experimental.share.enabled": false,
	// 外部で http または https リンクを開くために使用するブラウザーを構成します。ブラウザーの名前 (`edge`、`chrome`、`firefox`) またはブラウザーの実行可能ファイルへの絶対パスを指定できます。設定されていない場合、システムの既定値が使用されます。
	"workbench.externalBrowser": "",
	// 外部 URI (http、https) に使用する opener を構成します。
	"workbench.externalUriOpeners": {},
	// ワークベンチ項目にホバーが表示されるまでの待ち時間 (ミリ秒) を制御します (例: 拡張機能が用意されている一部のツリー ビュー項目)。既に表示されている項目では、この設定の変更を反映するために更新が必要な場合があります。
	"workbench.hover.delay": 500,
	// ワークベンチで使用されるファイル アイコン テーマを指定するか、ファイル アイコンを表示しないように 'null' を指定します。
	//  - null: ファイル アイコンがありません
	//  - vs-minimal
	//  - vs-seti
	"workbench.iconTheme": "vs-seti",
	// レイアウト コントロールをカスタム タイトル バーに表示するかどうかを制御します。この設定は、`window.customTitleBarVisibility` が `never` に設定されていない場合にのみ有効です。
	"workbench.layoutControl.enabled": true,
	// カスタム タイトル バーのレイアウト コントロールを 1 つのメニュー ボタンとして表示するか、複数の UI の切り替えで表示するかを制御します。
	//  - menu: レイアウト オプションのドロップダウンを含む 1 つのボタンを表示します。
	//  - toggles: パネルとサイド バーの表示を切り替えるボタンをいくつか示します。
	//  - both: ドロップダウン ボタンとトグル ボタンの両方を表示します。
	"workbench.layoutControl.type": "both",
	// ワークベンチでリストとツリーを検索するときに使用される一致の種類を制御します。
	//  - fuzzy: 検索時にあいまい一致を使用します。
	//  - contiguous: 検索時に連続一致を使用します。
	"workbench.list.defaultFindMatchType": "fuzzy",
	// ワークベンチのリストとツリーの既定の検索モードを制御します。
	//  - highlight: 検索時に要素を強調表示します。さらに上下のナビゲーションでは、強調表示された要素のみがスキャンされます。
	//  - filter: 検索時に要素をフィルター処理します。
	"workbench.list.defaultFindMode": "highlight",
	// `Alt` を押すと、スクロール速度が倍増します。
	"workbench.list.fastScrollSensitivity": 5,
	// リストとツリーがワークベンチで水平スクロールをサポートするかどうかを制御します。警告: この設定をオンにすると、パフォーマンスに影響があります。
	"workbench.list.horizontalScrolling": false,
	// 代わりに 'workbench.list.defaultFindMode' と 'workbench.list.typeNavigationMode' を使用してください。
	// ワークベンチのリストおよびツリーのキーボード ナビゲーション スタイルを制御します。単純、強調表示、フィルターを指定できます。
	//  - simple: 簡単なキーボード ナビゲーションは、キーボード入力に一致する要素に焦点を当てます。一致処理はプレフィックスでのみ実行されます。
	//  - highlight: キーボード ナビゲーションの強調表示を使用すると、キーボード入力に一致する要素が強調表示されます。上および下への移動は、強調表示されている要素のみを移動します。
	//  - filter: キーボード ナビゲーションのフィルターでは、キーボード入力に一致しないすべての要素がフィルター処理され、非表示になります。
	"workbench.list.keyboardNavigation": "highlight",
	// マウス ホイール スクロール イベントの `deltaX` と `deltaY` で使用される乗数。
	"workbench.list.mouseWheelScrollSensitivity": 1,
	// マウスを使用して項目を複数選択するときに使用する修飾キーです (たとえば、エクスプローラーでエディターと scm ビューを開くなど)。'横に並べて開く' マウス ジェスチャー (がサポートされている場合) は、複数選択の修飾キーと競合しないように調整されます。
	//  - ctrlCmd: Windows および Linux 上の `Control` キーと macOS 上の `Command` キーに割り当てます。
	//  - alt: Windows および Linux 上の `Alt` キーと macOS 上の `Option` キーに割り当てます。
	"workbench.list.multiSelectModifier": "ctrlCmd",
	// マウスを使用して、ツリーとリスト内の項目を開く方法を制御します (サポートされている場合)。適用できない場合、一部のツリーやリストではこの設定が無視されることがあります。
	"workbench.list.openMode": "singleClick",
	// スクロールバーのクリックでページごとにスクロールするかどうかを制御します。
	"workbench.list.scrollByPage": false,
	// リストとツリーでスムーズ スクロールを使用するかどうかを制御します。
	"workbench.list.smoothScrolling": false,
	// ワークベンチのリストとツリーで型ナビゲーションがどのように機能するかを制御します。`trigger` に設定すると、`list.triggerTypeNavigation` コマンドの実行後に型ナビゲーションが開始されます。
	"workbench.list.typeNavigationMode": "automatic",
	// ローカル ファイル履歴を有効にするかどうかを制御します。有効にすると、保存されたエディターのファイル コンテンツはバックアップの場所に保存され、後で復元または確認できます。この設定の変更は、既存のファイル履歴エントリには影響しません。
	"workbench.localHistory.enabled": true,
	// ローカル ファイル履歴からファイルを除外するためのパスまたは [glob パターン](https://aka.ms/vscode-glob-patterns) を構成します。Glob パターンは、絶対パスでない限り、ワークスペース フォルダーのパスを基準にして常に評価されます。この設定を変更しても、既存のローカル ファイル履歴エントリには影響しません。
	"workbench.localHistory.exclude": {},
	// ファイルごとのローカル ファイル履歴エントリの最大数を制御します。ローカル ファイル履歴エントリ数がファイルのこの値を超えると、最古のエントリが破棄されます。
	"workbench.localHistory.maxFileEntries": 50,
	// ローカル ファイル履歴向けのファイルの最大サイズ (KB 単位) を制御します。より大きなファイルは、ローカル ファイル履歴に追加されません。この設定の変更は、既存のファイル ファイル履歴エントリに影響しません。
	"workbench.localHistory.maxFileSize": 256,
	// ローカル ファイル履歴の最後のエントリが追加されるエントリに置き換えられる間隔を秒単位で構成します。これにより、自動保存が有効になっている場合など、追加されるエントリの総数を減らすことができます。この設定は、元のソースが同じエントリにのみ適用されます。この設定を変更しても、既存のローカル ファイル履歴エントリには影響しません。
	"workbench.localHistory.mergeWindow": 10,
	// 新しいワークスペース内のパネル (ターミナル、デバッグ コンソール、出力、問題) の既定の場所を制御します。エディター領域の下、上、右、または左に表示できます。
	"workbench.panel.defaultLocation": "bottom",
	// パネルを開くときに最大化するかどうかを制御します。開くときに必ず最大化するか、決して最大化しないか、最後に閉じたときの状態で開くかを選択できます。
	//  - always: 開くときにパネルを常に最大化します。
	//  - never: 開くときにパネルを決して最大化しません。パネルは最大化されずに開きます。
	//  - preserve: 閉じる前の状態でパネルを開きます。
	"workbench.panel.opensMaximized": "preserve",
	// Controls whether activity items in the panel title are shown as label or icon.
	"workbench.panel.showLabels": true,
	// システム カラー モードがダークで、`window.autoDetectColorScheme` が有効になっている場合の配色テーマを指定します。
	"workbench.preferredDarkColorTheme": "Default Dark Modern",
	// ハイ コントラスト ダーク モードで、`window.autoDetectHighContrast` が有効になっている場合の配色テーマを指定します。
	"workbench.preferredHighContrastColorTheme": "Default High Contrast",
	// ハイ コントラスト ライト モードで、`window.autoDetectHighContrast` が有効になっている場合の配色テーマを指定します。
	"workbench.preferredHighContrastLightColorTheme": "Default High Contrast Light",
	// システム カラー モードがライトで、`window.autoDetectColorScheme` が有効になっている場合の配色テーマを指定します。
	"workbench.preferredLightColorTheme": "Default Light Modern",
	// 使用する製品アイコンのテーマを指定します。
	//  - Default: 既定
	"workbench.productIconTheme": "Default",
	// フォーカスを失ったときに Quick Open を自動的に閉じるかどうかを制御します。
	"workbench.quickOpen.closeOnFocusLost": true,
	// Quick Open を次回開いたとき、Quick Open の最後の入力を復元するかどうかを制御します。
	"workbench.quickOpen.preserveInput": false,
	// ワークベンチがレンダリングするアニメーション数を減少させるかどうかを制御します。
	//  - on: 常にモーションを削減してレンダリングする。
	//  - off: モーションを削減してレンダリングしない
	//  - auto: OS 構成に基づいて、モーションを削減してレンダリングします。
	"workbench.reduceMotion": "auto",
	// 有効にすると、[リモート インジケーター] メニューにリモート拡張機能のおすすめ候補が表示されます。
	"workbench.remoteIndicator.showExtensionRecommendations": true,
	// ビューまたはエディター間のドラッグ領域のホバー フィードバックの遅延をミリ秒単位で制御します。
	"workbench.sash.hoverDelay": 300,
	// ビューまたはエディター間にあるドラッグ領域のフィードバック領域のサイズをピクセル単位で制御します。マウスを使用してビューのサイズを変更するのが困難な場合は、これを大きな値に設定してください。
	"workbench.sash.size": 4,
	// すべてのプロファイルに適用する設定を構成します。
	"workbench.settings.applyToAllProfiles": [],
	// 既定で使用する設定エディターを指定します。
	//  - ui: UI の設定エディターを使用します。
	//  - json: JSON ファイル エディターを使用します。
	"workbench.settings.editor": "ui",
	// 設定で自然文検索モードを有効にするかどうかを制御します。自然文検索はMicrosoft オンライン サービスによって提供されます。
	"workbench.settings.enableNaturalLanguageSearch": true,
	// キーバインド設定を開いたときに、すべての既定のキーバインド設定を表示するエディターも開くかどうかを制御します。
	"workbench.settings.openDefaultKeybindings": false,
	// 設定を開いたときに、すべての既定の設定を表示するエディターも開くかどうかを制御します。
	"workbench.settings.openDefaultSettings": false,
	// 検索中の設定エディターの目次の動作を制御します。設定エディターでこの設定を変更すると、検索クエリが変更された後に設定が有効になります。
	//  - hide: 検索中の目次を非表示にします。
	//  - filter: 目次をフィルターして、一致している設定を持つカテゴリだけを表示します。カテゴリをクリックするとそのカテゴリに結果が絞り込まれます。
	"workbench.settings.settingsSearchTocBehavior": "filter",
	// JSON として設定を編集するときに、split JSON エディターを使用するかどうかを制御します。
	"workbench.settings.useSplitJSON": false,
	// プライマリ サイド バーとアクティビティ バーの場所を制御します。ワークベンチの左側または右側に表示できます。2 番目のサイド バーはワークベンチの反対側に表示されます。
	"workbench.sideBar.location": "left",
	// 起動時にどのエディターを表示するかを制御します。無い場合、前のセッションを復元します。
	//  - none: エディターなしで開始
	//  - welcomePage: ウェルカム ページを開き、VS Codeと拡張機能を使って作業を開始するのに役立つコンテンツを表示します。
	//  - readme: README を含むフォルダーを開くときに README を開き、それ以外の場合は 'welcomePage' にフォールバックします。注意: これはグローバル構成として確認されました。これは、ワークスペースまたはフォルダー構成で設定されている場合は無視されます。
	//  - newUntitledFile: 無題の新規テキスト ファイルを開きます (空のウィンドウが開かれているときのみ)。
	//  - welcomePageInEmptyWorkbench: 空のワークベンチを開くとき、ウェルカム ページを開きます。
	//  - terminal: エディター領域で新しいターミナルを開きます。
	"workbench.startupEditor": "welcomePage",
	// ワークベンチの下部にステータス バーを表示するかどうかを制御します。
	"workbench.statusBar.visible": true,
	// 有効にすると、エディターを 1 つも開いていないときに透かしのヒントが表示されます。
	"workbench.tips.enabled": true,
	// ツリーで固定スクロールを有効にするかどうかを制御します。
	"workbench.tree.enableStickyScroll": true,
	// フォルダー名をクリックしたときにツリー フォルダーが展開される方法を制御します。適用できない場合、一部のツリーやリストではこの設定が無視されることがあります。
	"workbench.tree.expandMode": "singleClick",
	// ツリーのインデントをピクセル単位で制御します。
	"workbench.tree.indent": 8,
	// ツリーでインデントのガイドを表示するかどうかを制御します。
	"workbench.tree.renderIndentGuides": "onHover",
	// `workbench.tree.enableStickyScroll` が有効な場合に、ツリーに表示される固定要素の数を制御します。
	"workbench.tree.stickyScrollMaxItemCount": 7,
	// 有効にすると、信頼されたワークスペースでリンクを開いたときに信頼されたドメインのプロンプトが表示されます。
	"workbench.trustedDomains.promptInTrustedWorkspace": false,
	// ビュー ヘッダー アクションを表示するかどうかを制御します。ビュー ヘッダー アクションは常に表示されるか、パネルをフォーカスやホバーしたときのみ表示のいずれかです。
	"workbench.view.alwaysShowHeaderActions": false,
	// 非推奨です。グローバル `workbench.reduceMotion` を使用してください。
	// 有効にした場合、ウェルカム ページでの動作を減らします。
	"workbench.welcomePage.preferReducedMotion": false,
	// 有効にすると、拡張機能のインストール時に拡張機能のチュートリアルが開きます。
	"workbench.welcomePage.walkthroughs.openOnInstall": true,
	// 有効にすると、システム カラー モードに基づいて自動的に配色テーマが選択されます。システム カラー モードが濃い場合は、`workbench.preferredDarkColorTheme#` が使用されます。それ以外の場合は `#workbench.preferredLightColorTheme` が使用されます。
	"window.autoDetectColorScheme": false,
	// 有効にすると、OS がハイ コントラスト テーマを使用している場合、自動的にハイ コントラスト テーマに変更されます。使用するハイ コントラスト テーマは、`workbench.preferredHighContrastColorTheme#` と `#workbench.preferredHighContrastLightColorTheme` によって指定されます。
	"window.autoDetectHighContrast": true,
	// 最後のエディターを閉じたときに、ウィンドウも閉じるかどうかを制御します。この設定はフォルダーを表示していないウィンドウにのみ適用されます。
	"window.closeWhenEmpty": false,
	// コマンド ランチャーをウィンドウ タイトルと共に表示します。この設定は、`window.customTitleBarVisibility` が `never` に設定されていない場合にのみ有効です。
	"window.commandCenter": true,
	// ウィンドウを閉じる前またはアプリケーションを終了する前に確認ダイアログを表示するかどうかを制御します。
	//  - always: 常に確認メッセージを表示します。
	//  - keyboardOnly: キー バインドが使用された場合にのみ確認を求めます。
	//  - never: 明示的に確認を求めることはありません。
	"window.confirmBeforeClose": "never",
	// 別のワークスペースに切り替えるときに、開かれている無題のワークスペースを保存するか破棄するかの質問を、確認ダイアログに表示するかどうかを制御します。確認ダイアログを無効にすると、無題のワークスペースは常に破棄されるようになります。
	"window.confirmSaveUntitledWorkspace": true,
	// Alt キーを押してメニュー バーにフォーカスするかどうかを制御します。この設定は、Alt キーを使用してメニュー バーを切り替える操作には影響しません。
	"window.customMenuBarAltFocus": true,
	// Adjust when the custom title bar should be shown. The custom title bar can be hidden when in full screen mode with `windowed`. The custom title bar can only be hidden in non full screen mode with `never` when `window.titleBarStyle` is set to `native`.
	//  - auto: カスタム タイトル バーの可視性を自動的に変更します。
	//  - windowed: 全画面表示で、カスタム タイトル バーを非表示にします。全画面表示でない場合は、カスタム タイトル バーの可視性を自動的に変更します。
	//  - never: `window.titleBarStyle` が `native` に設定されている場合は、カスタム タイトル バーを非表示にします。
	"window.customTitleBarVisibility": "auto",
	// ダイアログ ウィンドウの外観を調整します。
	"window.dialogStyle": "native",
	// この設定を有効にすると、タイトル バーのアプリケーション アイコンがダブルクリックされたときにウィンドウが閉じられます。ウィンドウをアイコンでドラッグすることはできません。この設定は、`window.titleBarStyle` が `custom` に設定されている場合にのみ有効です。
	"window.doubleClickIconToClose": false,
	// Alt キー ショートカットを使用してメイン メニューを開くことができるかどうかを制御します。ニーモニックを無効にすると、これらの Alt キー ショートカットを代わりにエディター コマンドにバインドできます。
	"window.enableMenuBarMnemonics": true,
	// メニュー バーの表示と非表示を制御します。'切り替え' 設定は Alt キーを 1 回押すとメニュー バーの表示と非表示が切り替わることを意味します。'コンパクト' 設定では、メニューがサイド バーに移動します。
	//  - classic: メニューはウィンドウの上部に表示され、全画面表示モードでのみ非表示になります。
	//  - visible: メニューは、全画面表示モードの場合でも、常にウィンドウの上部に表示されます。
	//  - toggle: メニューは非表示になっていますが、Alt キーを使用してウィンドウの上部に表示できます。
	//  - hidden: メニューは常に非表示です。
	//  - compact: メニューは、サイド バーにコンパクト ボタンとして表示されます。`window.titleBarStyle` が `native` の場合、この値は無視されます。
	"window.menuBarVisibility": "classic",
	// 既に 1 つ以上のウィンドウを開いているとき、新しく開くウィンドウのサイズを制御します。この設定は、最初に開いたウィンドウに適用されないことに注意してください。最初のウィンドウは常に、前回閉じたサイズと位置で復元します。
	//  - default: 新しいウィンドウを画面の中央に開きます。
	//  - inherit: 新しいウィンドウを、最後にアクティブだったウィンドウと同じサイズで開きます。
	//  - offset: 最後のアクティブなウィンドウと同じ寸法の新しいウィンドウをオフセット位置で開きます。
	//  - maximized: 新しいウィンドウを最大化した状態で開きます。
	//  - fullscreen: 新しいウィンドウを全画面表示モードで開きます。
	"window.newWindowDimensions": "default",
	// 新しいウィンドウを開くときに使用するプロファイルを指定します。プロファイル名を指定すると、新しいウィンドウでそのプロファイルが使用されます。プロファイル名が指定されていない場合、新しいウィンドウはアクティブ ウィンドウのプロファイルを使用するか、アクティブなウィンドウが存在しない場合は既定のプロファイルを使用します。
	"window.newWindowProfile": null,
	// コマンド ラインまたはファイル ダイアログを使用しているときに、ファイルを新規ウィンドウで開くかどうかを制御します。
	// 注、この設定は無視される場合もあります (例: `--new-window` または `--reuse-window` コマンド ライン オプションを使用した場合など)。
	//  - on: 新しいウィンドウでファイルを開きます。
	//  - off: ファイルのフォルダーを開いているウィンドウまたは最後のアクティブ ウィンドウでファイルを開きます。
	//  - default: アプリケーション内から選択したとき (例: ファイル メニュー介したとき) を除き、新しいウィンドウでファイルを開きます。
	"window.openFilesInNewWindow": "off",
	// フォルダーを新しいウィンドウで開くか、最後のアクティブ ウィンドウで開くかどうかを制御します。
	// この設定は無視される場合もあります (例: `--new-window` または `--reuse-window` コマンド ライン オプションを使用する場合など)。
	//  - on: フォルダーを新しいウィンドウで開きます。
	//  - off: フォルダーを最後のアクティブ ウィンドウで開きます。
	//  - default: フォルダーがアプリケーション内から (たとえば、[ファイル] メニューから) 選択された場合を除いて、新しいウィンドウでフォルダーを開きます。
	"window.openFoldersInNewWindow": "default",
	// 引数なしで 2 つ目のインスタンスを起動するとき、新しい空のウィンドウを開くか、最後に実行されていたウィンドウにフォーカスするかどうかを制御します。
	// この設定は無視される場合もあります (例: `--new-window` または `--reuse-window` コマンド ライン オプションを使用する場合など)。
	//  - on: 新しい空のウィンドウを開きます。
	//  - off: 最後にアクティブだった実行中のインスタンスにフォーカスします。
	"window.openWithoutArgumentsInNewWindow": "on",
	// 全画面表示モードで終了した場合に、ウィンドウを全画面表示モードに復元するかどうかを制御します。
	"window.restoreFullscreen": false,
	// 開くときにウィンドウとエディターを復元する方法を制御します。
	//  - preserve: 常にすべてのウィンドウが再度開かれます。フォルダーまたはワークスペースが開かれている場合は (例: コマンド ラインから)、新しいウィンドウとして開かれます (ただし、前に開かれている場合)。ファイルを開くと、復元されたウィンドウの 1 つで、以前に開いていたエディターと共に開きます。
	//  - all: フォルダー、ワークスペース、またはファイルが開かれていない限り (コマンド ラインからなど)、すべてのウィンドウを再度開きます。ファイルが開くと、以前にウィンドウで開いていたエディターのいずれかが置き換えられます。
	//  - folders: フォルダー、ワークスペース、ファイルが (コマンド ラインなどから) 開かれている場合を除き、フォルダーまたはワークスペースが開かれていたすべてのウィンドウを再度開きます。ファイルが開くと、以前にウィンドウで開いていたエディターのいずれかが置き換えられます。
	//  - one: フォルダー、ワークスペース、またはファイルが開かれていない限り、最後にアクティブなウィンドウを再度開きます (コマンド ラインなど)。ファイルが開くと、以前にウィンドウで開いていたエディターのいずれかが置き換えられます。
	//  - none: ウィンドウを再度開きません。フォルダーまたはワークスペースが (コマンド ラインなどから) 開かれている場合を除き、空のウィンドウが表示されます。
	"window.restoreWindows": "all",
	// 開いているワークスペースやアクティブなエディターなどの現在のコンテキストに基づいて、ウィンドウのタイトルを制御します。変数は、コンテキストに基づいて置き換えられます。
	// - `${activeEditorShort}`: ファイル名 (例: myFile.txt)。
	// - `${activeEditorMedium}`: ワークスペース フォルダーに対して相対的なファイルのパス (例: myFolder/myFileFolder/myFile.txt)。
	// - `${activeEditorLong}`: ファイルの完全なパス (例: /Users/Development/myFolder/myFileFolder/myFile.txt)。
	// - `${activeFolderShort}`: ファイルが含まれているフォルダーの名前 (例: myFileFolder)。
	// - `${activeFolderMedium}`: ファイルを含むフォルダーの、ワークスペースフォルダーからの相対パス(例: myFolder/myFileFolder)。
	// - `${activeFolderLong}`: ファイルが格納されているフォルダーのフルパス (例: /Users/Development/myFolder/myFileFolder)。
	// - `${folderName}`: ファイルが含まれているワークスペース フォルダーの名前 (例: myFolder)。
	// - `${folderPath}`: ファイルが含まれているワークスペースの絶対パスです (例: /Users/Development/myFolder)。
	// - `${rootName}`: 利用可能なオプションのリモート名とワークスペース インジケーターのあるワークスペースの名前 (例: myFolder、myRemoteFolder [SSH]、myWorkspace (Workspace))。
	// - `${rootNameShort}`: サフィックスのないワークスペースの短縮名 (例: myFolder、myRemoteFolder、myWorkspace)。
	// - `${rootPath}`: 開かれたワークスペースまたはフォルダーのファイル パス (例: /Users/Development/myWorkspace)。
	// - `${profileName}`: ワークスペースが開かれているプロファイルの名前 (例: データ サイエンス (プロファイル))。既定のプロファイルが使用されている場合は無視されます。
	// - `${appName}`: 例: VS Code。
	// - `${remoteName}`: 例: SSH
	// - `${dirty}`: アクティブなエディターの変更が保存されていない場合を示すインジケーター。
	// - '${focusedView}': 現在フォーカスされているビューの名前。
	// - '${activeRepositoryName}': アクティブなリポジトリの名前 (例: vscode)。
	// - '${activeRepositoryBranchName}': アクティブなリポジトリ内のアクティブなブランチの名前 (例: main)。
	// - `${separator}`: 値か固定のテキストで囲われたとき、条件付きの区切り記号 (" - ") を表示します。
	"window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${profileName}${separator}${appName}",
	// ウィンドウ タイトル バーの外観を、OS またはカスタムでネイティブに調整します。Linux と Windows では、この設定はアプリケーションとコンテキスト メニューの外観にも影響します。変更を適用するには、完全な再起動が必要です。
	"window.titleBarStyle": "custom",
	// `window.title` で使用される区切り記号。
	"window.titleSeparator": " - ",
	// すべてのウィンドウの既定のズーム レベルを調整します。`0` から 1 つ上げるごとに (`1` など) 20% ずつ拡大し、1 つ下げるごとに (`-1` など) 20% ずつ縮小することを表します。小数点以下の桁数を入力して、さらに細かくズーム レベルを調整することもできます。[拡大] および [縮小] コマンドでズーム レベルをすべてのウィンドウに適用するか、アクティブなウィンドウのみに適用するかを構成する方法については、`window.zoomPerWindow` を参照してください。
	"window.zoomLevel": 0,
	// '拡大' コマンドと '縮小' コマンドのズーム レベルが、すべてのウィンドウに適用されるのか、アクティブなウィンドウのみに適用されのるかを制御します。すべてのウィンドウに対する、ズーム レベルの既定値の構成については、「`window.zoomLevel`」を参照してください。
	"window.zoomPerWindow": true,
	// Zen Mode をオンにしたときに、レイアウトを中央寄せにするかどうかを制御します。
	"zenMode.centerLayout": true,
	// Zen Mode をオンにしたときに、ワークベンチを自動的に全画面モードに切り替えるかどうかを制御します。
	"zenMode.fullScreen": true,
	// Zen Mode をオンにしたときに、ワークベンチの左側または右側のいずれかにあるアクティビティ バーを非表示にするかどうかを制御します。
	"zenMode.hideActivityBar": true,
	// Zen Mode をオンにしたときにエディターの行番号も非表示にするかどうかを制御します。
	"zenMode.hideLineNumbers": true,
	// Zen Mode をオンにするとワークベンチの下部にあるステータス バーを非表示にするかどうかを制御します。
	"zenMode.hideStatusBar": true,
	// Zen Mode で終了したウィンドウを Zen Mode に復元するかどうかを制御します。
	"zenMode.restore": true,
	// Zen Mode をオンにしたときに、複数のエディター タブ、1 つのエディター タブを表示するか、またはエディターのタイトル領域を完全に非表示にするかを制御します。
	//  - multiple: 各エディターは、エディターのタイトル領域にタブとして表示されます。
	//  - single: アクティブなエディターは、エディターのタイトル領域に 1 つの大きなタブとして表示されます。
	//  - none: エディターのタイトル領域は表示されていません。
	"zenMode.showTabs": "multiple",
	// Zen Mode の間に通知の応答不可モードを有効にするかどうかを制御します。true の場合は、エラー通知のみが表示されます。
	"zenMode.silentNotifications": true,
	// スクリーンキャスト モードのキーボードのフォント サイズ (ピクセル) を制御します。
	"screencastMode.fontSize": 56,
	// スクリーンキャスト モードでキーボード オーバーレイをカスタマイズするためのオプション。
	"screencastMode.keyboardOptions": {
		"showKeys": true,
		"showKeybindings": true,
		"showCommands": true,
		"showCommandGroups": false,
		"showSingleEditorCursorMoves": true
	},
	// キーボード オーバーレイをスクリーンキャスト モードで表示する時間 (ミリ秒単位) を制御します。
	"screencastMode.keyboardOverlayTimeout": 800,
	// スクリーンキャスト モードでマウス インジケーターの色を 16 進数 (#RGB、#RGBA、#RRGGBB、#RRGGBBAA) で制御します。
	"screencastMode.mouseIndicatorColor": "#FF0000",
	// スクリーンキャスト モードのマウス インジケーターのサイズ (ピクセル単位) を制御します。
	"screencastMode.mouseIndicatorSize": 20,
	// スクリーンキャスト モードの縦方向のオフセットをワークベンチの高さのパーセンテージとして下部からオーバーレイするかどうかを制御します。
	"screencastMode.verticalOffset": 20,
	// 言語へのファイルの関連付けの [glob パターン](https://aka.ms/vscode-glob-patterns) を構成します (例: `"*.extension": "html"`)。パス区切り記号が含まれている場合、パターンはファイルの絶対パスで一致し、それ以外の場合はファイルの名前と一致します。これらは、インストールされている言語の既定の関連付けよりも優先されます。
	"files.associations": {},
	// 有効にすると、エディターはファイルを開くときに文字セットのエンコードを推測しようとします。この設定は、言語ごとに構成することもできます。この設定はテキスト検索では考慮されません。`files.encoding` のみが考慮されます。
	"files.autoGuessEncoding": false,
	// 変更が保存されていないエディターの [自動保存](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) を制御します。
	//  - off: 変更のあったエディターは自動的に保存されません。
	//  - afterDelay: 変更のあったエディターは、構成された '#files.autoSaveDelay#' の後に自動的に保存されます。
	//  - onFocusChange: エディターがフォーカスを失うと、変更のあったエディターが自動的に保存されます。
	//  - onWindowChange: エディターがフォーカスを失うと、変更のあったウィンドウが自動的に保存されます。
	"files.autoSave": "off",
	// 変更が保存されていないエディターが自動で保存されるまでの遅延をミリ秒単位で制御します。`files.autoSave` が `afterDelay` に設定されている場合のみ適用されます。
	"files.autoSaveDelay": 1000,
	// 有効にすると、エディターの [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) が、自動保存がトリガーされた時点でエラーが報告されていないファイルに制限されます。`files.autoSave` が有効な場合にのみ適用されます。
	"files.autoSaveWhenNoErrors": false,
	// 有効にすると、エディターの [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) が、開いているワークスペース内のファイルに制限されます。`files.autoSave` が有効な場合にのみ適用されます。
	"files.autoSaveWorkspaceFilesOnly": false,
	// エディターが一覧表示されている順序で推測を試みる必要がある文字セット エンコードのリスト。特定できない場合は、`files.encoding` が考慮されます
	//  - utf8: UTF-8
	//  - utf16le: UTF-16 LE
	//  - utf16be: UTF-16 BE
	//  - windows1252: Western (Windows 1252)
	//  - windows1250: Central European (Windows 1250)
	//  - iso88592: Central European (ISO 8859-2)
	//  - windows1251: Cyrillic (Windows 1251)
	//  - cp866: Cyrillic (CP 866)
	//  - iso88595: Cyrillic (ISO 8859-5)
	//  - koi8r: Cyrillic (KOI8-R)
	//  - windows1253: Greek (Windows 1253)
	//  - iso88597: Greek (ISO 8859-7)
	//  - windows1255: Hebrew (Windows 1255)
	//  - iso88598: Hebrew (ISO 8859-8)
	//  - cp950: Traditional Chinese (Big5)
	//  - shiftjis: Japanese (Shift JIS)
	//  - eucjp: Japanese (EUC-JP)
	//  - euckr: Korean (EUC-KR)
	//  - gb2312: Simplified Chinese (GB 2312)
	"files.candidateGuessEncodings": [],
	// 新しいファイルに割り当てられる既定の言語識別子。`${activeEditorLanguage}` に構成されている場合は、現在アクティブなテキスト エディターの言語識別子 (存在する場合) が使用されます。
	"files.defaultLanguage": "",
	// ファイル ダイアログの既定のパス。ユーザーのホーム パスをオーバーライドします。 最近開いたファイルやフォルダーなど、コンテキスト固有のパスがない場合にのみ使用されます。
	"files.dialog.defaultPath": "",
	// ファイル/フォルダーを削除時するときに、 OS のごみ箱に移動します。無効にするとファイル/フォルダーは完全に削除されます。
	"files.enableTrash": true,
	// ファイルの読み取り/書き込みで使用する既定の文字セット エンコーディング。言語ごとに構成することも可能です。
	//  - utf8: UTF-8
	//  - utf8bom: UTF-8 with BOM
	//  - utf16le: UTF-16 LE
	//  - utf16be: UTF-16 BE
	//  - windows1252: Western (Windows 1252)
	//  - iso88591: Western (ISO 8859-1)
	//  - iso88593: Western (ISO 8859-3)
	//  - iso885915: Western (ISO 8859-15)
	//  - macroman: Western (Mac Roman)
	//  - cp437: DOS (CP 437)
	//  - windows1256: Arabic (Windows 1256)
	//  - iso88596: Arabic (ISO 8859-6)
	//  - windows1257: Baltic (Windows 1257)
	//  - iso88594: Baltic (ISO 8859-4)
	//  - iso885914: Celtic (ISO 8859-14)
	//  - windows1250: Central European (Windows 1250)
	//  - iso88592: Central European (ISO 8859-2)
	//  - cp852: Central European (CP 852)
	//  - windows1251: Cyrillic (Windows 1251)
	//  - cp866: Cyrillic (CP 866)
	//  - iso88595: Cyrillic (ISO 8859-5)
	//  - koi8r: Cyrillic (KOI8-R)
	//  - koi8u: Cyrillic (KOI8-U)
	//  - iso885913: Estonian (ISO 8859-13)
	//  - windows1253: Greek (Windows 1253)
	//  - iso88597: Greek (ISO 8859-7)
	//  - windows1255: Hebrew (Windows 1255)
	//  - iso88598: Hebrew (ISO 8859-8)
	//  - iso885910: Nordic (ISO 8859-10)
	//  - iso885916: Romanian (ISO 8859-16)
	//  - windows1254: Turkish (Windows 1254)
	//  - iso88599: Turkish (ISO 8859-9)
	//  - windows1258: Vietnamese (Windows 1258)
	//  - gbk: Simplified Chinese (GBK)
	//  - gb18030: Simplified Chinese (GB18030)
	//  - cp950: Traditional Chinese (Big5)
	//  - big5hkscs: Traditional Chinese (Big5-HKSCS)
	//  - shiftjis: Japanese (Shift JIS)
	//  - eucjp: Japanese (EUC-JP)
	//  - euckr: Korean (EUC-KR)
	//  - windows874: Thai (Windows 874)
	//  - iso885911: Latin/Thai (ISO 8859-11)
	//  - koi8ru: Cyrillic (KOI8-RU)
	//  - koi8t: Tajik (KOI8-T)
	//  - gb2312: Simplified Chinese (GB 2312)
	//  - cp865: Nordic DOS (CP 865)
	//  - cp850: Western European DOS (CP 850)
	"files.encoding": "utf8",
	// 既定の改行文字。
	//  - \n: LF
	//  - \r\n: CRLF
	//  - auto: OS 固有の改行文字を使用します。
	"files.eol": "auto",
	// ファイルとフォルダーを除外するための [glob パターン](https://aka.ms/vscode-glob-patterns) を構成します。たとえば、エクスプローラーでは、この設定に基づいて表示または非表示にするファイルとフォルダーが決定されます。検索固有の除外を定義するには、`search.exclude#` 設定を参照してください。`.gitignore` に基づいてファイルを無視するには、`#explorer.excludeGitIgnore` 設定を参照してください。
	"files.exclude": {
		"**/.git": true,
		"**/.svn": true,
		"**/.hg": true,
		"**/CVS": true,
		"**/.DS_Store": true,
		"**/Thumbs.db": true
	},
	// [Hot Exit](https://aka.ms/vscode-hot-exit) は、エディターを終了するときに保存を確認するダイアログを省略し、保存されていないファイルをセッション後も保持するかどうかを制御します。
	//  - off: Hot Exit を無効にします。変更が保存されていないエディターを含むウィンドウを閉じようとすると、プロンプトが表示されます。
	//  - onExit: Windows または Linux で最後のウィンドウが閉じられるとき、または `workbench.action.quit` コマンドがトリガーされるとき (コマンド パレット、キー バインド、メニュー)、Hot Exit がトリガーされます。フォルダーが開かれていないウィンドウはすべて、次回の起動時に復元されます。未保存のファイルが含まれる、以前に開かれたウィンドウのリストは、[ファイル] > [最近使用したファイル] > [詳細...] と移動すると表示できます。
	//  - onExitAndWindowClose: Windows または Linux で最後のウィンドウが閉じられるとき、または `workbench.action.quit` コマンドがトリガーされるとき (コマンド パレット、キー バインド、メニュー)、またフォルダーが開かれているウィンドウについても、それが最後のウィンドウかどうかに関係なく、Hot Exit がトリガーされます。フォルダーが開かれていないウィンドウはすべて、次回の起動時に復元されます。未保存のファイルが含まれる、以前に開かれたウィンドウのリストは、[ファイル] > [最近使用したファイル] > [詳細...] と移動すると表示できます。
	"files.hotExit": "onExit",
	// 有効にすると、ファイルの保存時に改行を末尾に挿入します。
	"files.insertFinalNewline": false,
	// 作成、名前変更、削除のファイル参加者が取り消されるまでのタイムアウト (ミリ秒)。参加者を無効にするには、'0' を使用します。
	"files.participants.timeout": 60000,
	// パスまたは [glob パターン](https://aka.ms/vscode-glob-patterns) が `files.readonlyInclude` 設定の結果として一致する場合に読み取り専用としてマークされないように構成します。Glob パターンは、絶対パスでない限り、ワークスペース フォルダーのパスを基準にして常に評価されます。読み取り専用ファイル システム プロバイダーのファイルは、この設定とは関係なく常に読み取り専用になります。
	"files.readonlyExclude": {},
	// ファイルのアクセス許可がそのように示されると、ファイルが読み取り専用としてマークされます。これは、`files.readonlyInclude#` および `#files.readonlyExclude` 設定を使用してオーバーライドできます。
	"files.readonlyFromPermissions": false,
	// パスまたは [glob パターン](https://aka.ms/vscode-glob-patterns) を読み取り専用としてマークするように構成します。Glob パターンは、絶対パスでない限り、ワークスペース フォルダーのパスを基準にして常に評価されます。`files.readonlyExclude` 設定を使用して、一致するパスを除外できます。読み取り専用ファイル システム プロバイダーのファイルは、この設定とは関係なく常に読み取り専用になります。
	"files.readonlyInclude": {},
	// リファクタリングの一部であったファイルを自動的に保存するかどうかを制御します
	"files.refactoring.autoSave": true,
	// ファイルを再度開いたときに、元に戻す機能のスタックを復元します。
	"files.restoreUndoStack": true,
	// 保存の競合は、ファイルを保存している間に別のプログラムによって変更されたときに発生する可能性があります。データ損失を防ぐために、ユーザーは、エディターの変更とディスク上のバージョンを比較するように求められます。この設定は、保存の競合エラーが頻繁に発生する場合にのみ変更し、データが失われる可能性があるため注意してください。
	//  - askUser: 保存を拒否し、保存の競合を手動で解決するように要求します。
	//  - overwriteFileOnDisk: エディターでの変更を使用してディスク上のファイルを上書きすることで、保存の競合を解決します。
	"files.saveConflictResolution": "askUser",
	// ファイルとフォルダーを開いたり保存したりするための単純なファイル ダイアログを有効にします。簡易ファイル ダイアログを有効にするとシステム ファイル ダイアログが置き換えられます。
	"files.simpleDialog.enable": false,
	// 有効にすると、ファイルの保存時に最終行以降の新しい行をトリミングします。
	"files.trimFinalNewlines": false,
	// 有効にすると、ファイルの保存時に末尾の空白をトリミングします。
	"files.trimTrailingWhitespace": false,
	// 有効にすると、末尾の空白が複数行の文字列から削除され、保存時または 'editor.action.trimTrailingWhitespace' の実行時に正規表現が削除されます。これにより、最新のトークン情報がない場合、空白が行からトリミングされない可能性があります。
	"files.trimTrailingWhitespaceInRegexAndStrings": true,
	// ファイルの監視から除外するパスまたは [glob パターン](https://aka.ms/vscode-glob-patterns) を構成します。パスは、監視フォルダーに対する相対パスまたは絶対パスのいずれかです。glob パターンは、監視フォルダーから相対的に一致します。ファイル ウォッチャー プロセスが大量の CPU を消費する場合は、あまり重要でない大きなフォルダー (ビルド出力フォルダーなど) を除外してください。
	"files.watcherExclude": {
		"**/.git/objects/**": true,
		"**/.git/subtree-cache/**": true,
		"**/.hg/store/**": true
	},
	// 追加のパスを構成して、ワークスペース内の変更を監視します。既定では、シンボリック リンクのフォルダーを除き、すべてのワークスペースのフォルダーを再帰的に監視します。絶対パスまたは相対パスを明示的に追加して、シンボリック リンクのフォルダーの監視をサポートすることができます。相対パスは、現在開いているワークスペースを使用して絶対パスに解決されます。
	"files.watcherInclude": [],
	// エクスプローラーにファイルがドロップされたときにエクスプローラーで自動的に開くかどうかを制御します
	"explorer.autoOpenDroppedFile": true,
	// エクスプローラーでファイルを開くとき、自動的にファイルの内容を表示して選択するかどうかを制御します。
	//  - true: ファイルは、表示や選択が行われるようになります。
	//  - false: ファイルは、表示や選択が行われません。
	//  - focusNoScroll: ファイルは、スクロールしてビューに表示されることはありませんが、引き続きフォーカスされます。
	"explorer.autoReveal": true,
	// エクスプローラーでファイルとフォルダーが開いたときに表示および選択されないように、パスまたは [glob パターン](https://aka.ms/vscode-glob-patterns) を構成します。Glob パターンは、絶対パスでない限り、常にワークスペース フォルダーのパスを基準にして評価されます。
	"explorer.autoRevealExclude": {
		"**/node_modules": true,
		"**/bower_components": true
	},
	// エクスプローラーでフォルダーをコンパクト形式でレンダリングするかどうかを制御します。このような形式では、単一の子フォルダーは結合されたツリー要素に圧縮されます。たとえば、Java パッケージ構造に役立ちます。
	"explorer.compactFolders": true,
	// ごみ箱を経由したファイル削除時にエクスプローラーが確認を求めるかどうかを制御します。
	"explorer.confirmDelete": true,
	// ドラッグ アンド ドロップを使用したファイルやフォルダーの移動時にエクスプローラーが確認を求めるかどうかを制御します。
	"explorer.confirmDragAndDrop": true,
	// ネイティブなファイルやフォルダーの貼り付け時にエクスプローラーが確認を求めるかどうかを制御します。
	"explorer.confirmPasteNative": true,
	// 元に戻すときにエクスプローラーで確認を求めるかどうかを制御します。
	//  - verbose: 元に戻す操作の前には必ず、エクスプローラーでプロンプトが表示されます。
	//  - default: エクスプローラーでは、破壊的な元に戻す操作の前にプロンプトが表示されます。
	//  - light: エクスプローラーでは、フォーカスがあるときに元に戻す操作の前にプロンプトは表示されません。
	"explorer.confirmUndo": "default",
	// 相対ファイル パスをコピーする場合に使用するパス区切り文字です。
	//  - /: スラッシュをパス区切り文字として使用します。
	//  - \: 円記号をパス区切り文字として使用します。
	//  - auto: オペレーティング システムの特定のパス区切り文字を使用します。
	"explorer.copyRelativePathSeparator": "auto",
	// ファイルの装飾にバッジを使用するかどうかを制御します。
	"explorer.decorations.badges": true,
	// ファイルの装飾に配色を使用するかどうかを制御します。
	"explorer.decorations.colors": true,
	// ドラッグ アンド ドロップによるファイルとフォルダーの移動をエクスプローラーで許可するかどうかを制御します。この設定は、エクスプローラー内からのドラッグ アンド ドロップのみに影響します。
	"explorer.enableDragAndDrop": true,
	// エクスプローラーでファイルとフォルダーの元に戻す操作をサポートするかどうかを制御します。
	"explorer.enableUndo": true,
	// .gitignore 内のエントリを解析し、エクスプローラーから除外するかどうかを制御します。`files.exclude` に似ています。
	"explorer.excludeGitIgnore": false,
	// 初期化中に 1 つのフォルダーのみを含むマルチルート ワークスペースをエクスプローラーで展開するかどうかを制御します
	"explorer.expandSingleFolderWorkspaces": true,
	// エクスプローラーでファイルの入れ子を有効にするかどうかを制御します。ファイルの入れ子を使用すると、ディレクトリ内の関連ファイルを 1 つの親ファイルの下に視覚的にグループ化できます。
	"explorer.fileNesting.enabled": false,
	// ファイルの入れ子を自動的に展開するかどうかを制御します。これを有効にするためには、`explorer.fileNesting.enabled` を設定する必要があります。
	"explorer.fileNesting.expand": true,
	// エクスプローラー内のファイルの入れ子を制御します。この機能を有効にするには、`explorer.fileNesting.enabled` を設定する必要があります。各__Item__は親パターンを表し、任意の文字列に一致する 1 つの `*` 文字を含む場合があります。各__Value__は、指定された親の下に入れ子になっている子パターンのコンマ区切りの一覧を表します。子パターンには、いくつかの特別なトークンが含まれている可能性があります:
	// - `$(capture)`: 親パターンの `*` の解決された値と一致します
	// - `${basename}`: 親ファイルのベース名 、`file.ts` の `file` と一致します
	// - `${extname}`: 親ファイルの拡張子 、`file.ts` の `ts` と一致します
	// - `${dirname}`: 親ファイルのディレクトリ名 、`src/file.ts` の `src` と一致します
	// - `*`: 任意の文字列に一致します。子パターンごとに 1 回のみ使用できます
	"explorer.fileNesting.patterns": {
		"*.ts": "${capture}.js",
		"*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
		"*.jsx": "${capture}.js",
		"*.tsx": "${capture}.ts",
		"tsconfig.json": "tsconfig.*.json",
		"package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml, bun.lockb"
	},
	// 貼り付け時に重複するエクスプローラー項目に新しい名前を付けるときに使用する名前付け方法を制御します。
	//  - simple: 後ろに数字が付いている可能性のある、重複している名前の末尾に「copy」という語を追加します。
	//  - smart: 重複した名前の末端に数字を追加します。名前の一部に既に数字が含まれている場合、その数字を増やしてみます。
	//  - disabled: 名前の増分作成を無効にします。同じ名前のファイルが 2 つ存在する場合は、既存のファイルを上書きするよう要求されます。
	"explorer.incrementalNaming": "simple",
	// [エディターを開く] ウィンドウにあらかじめ割り当てられるエディター スロットの最小数です。0 に設定すると、[エディターを開く] ウィンドウは、エディターの数に基づいて動的にサイズ変更されます。
	"explorer.openEditors.minVisible": 0,
	// [開いているエディター] ペイン内のエディターの並べ替え順序を制御します。
	//  - editorOrder: エディターは、エディターのタブが表示されているのと同じ順序で並べ替えられています。
	//  - alphabetical: エディターは、各エディター グループ内のタブ名でアルファベット順に並べ替えられます。
	//  - fullPath: エディターは、各エディター グループ内の完全なパスでアルファベット順に並べ替えられます。
	"explorer.openEditors.sortOrder": "editorOrder",
	// [エディターを開く] ウィンドウに表示されるエディターの初期最大数です。この制限を超えるとスクロール バーが表示され、ウィンドウのサイズを変更してより多くの項目を表示できます。
	"explorer.openEditors.visible": 9,
	// エクスプローラーでのファイルとフォルダーのプロパティベースの並べ替えを制御します。`explorer.fileNesting.enabled` が有効になっている場合は、入れ子になったファイルの並べ替えも制御します。
	//  - default: ファイルとフォルダーを名前で並び替えます。フォルダーはファイルの前に表示されます。
	//  - mixed: ファイルとフォルダーをアルファベット順に名前で並び替えます。ファイルはフォルダーと混交して表示されます。
	//  - filesFirst: ファイルとフォルダーを名前で並び替えます。ファイルはフォルダーの前に表示されます。
	//  - type: ファイルとフォルダーを拡張子の種類でグループ化して名前で並び替えます。フォルダーはファイルの前に表示されます。
	//  - modified: ファイルとフォルダーを降順に最終更新日で並び替えます。フォルダーはファイルの前に表示されます。
	//  - foldersNestsFiles: ファイルとフォルダーは名前で並べ替えられます。フォルダーはファイルの前に表示されます。子が入れ子になったファイルは、他のファイルの前に表示されます。
	"explorer.sortOrder": "default",
	// エクスプローラーでのファイル名とフォルダー名の辞書順並べ替えを制御します。
	//  - default: 大文字の名前と小文字の名前が混在しています。
	//  - upper: 大文字の名前は、小文字の名前の前にまとめてグループ化されます。
	//  - lower: 小文字の名前は、大文字の名前の前にまとめてグループ化されます。
	//  - unicode: 名前は、Unicode 順に並べ替えられます。
	"explorer.sortOrderLexicographicOptions": "default",
	// ファイルとフォルダーの並べ替え順序を逆順にするかどうかを制御します。
	"explorer.sortOrderReverse": false,
	// 検索ビューの行内のアクションバーの位置を制御します。
	//  - auto: 検索ビューが狭い場合はアクションバーを右に、検索ビューが広い場合はコンテンツの直後にアクションバーを配置します。
	//  - right: アクションバーを常に右側に表示します。
	"search.actionsPosition": "right",
	// 検索結果を折りたたむか展開するかどうかを制御します。
	//  - auto: 結果が 10 件未満のファイルが展開されます。他のファイルは折りたたまれます。
	//  - alwaysCollapse
	//  - alwaysExpand
	"search.collapseResults": "alwaysExpand",
	// 検索ファイルの装飾にバッジを使用するかどうかを制御します。
	"search.decorations.badges": true,
	// 検索ファイルの装飾に色を使用するかどうかを制御します。
	"search.decorations.colors": true,
	// 既定の検索結果ビュー モードを制御します。
	//  - tree: 検索結果をツリーとして表示します。
	//  - list: 検索結果をリストとして表示します。
	"search.defaultViewMode": "list",
	// フルテキスト検索と Quick Open のファイル検索でファイルとフォルダーを除外するための [glob パターン](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) を構成します。クイック オープンで最近開いたリストからファイルを除外するには、パターンを絶対 (例: '**/node_modules/**') にする必要があります。'#files.exclude#' 設定からすべての glob パターンを継承します。
	"search.exclude": {
		"**/node_modules": true,
		"**/bower_components": true,
		"**/*.code-search": true
	},
	// 閉じているノートブックのノートブック エディターのリッチ コンテンツの結果を表示します。この設定を変更した後、検索結果を更新してください。
	"search.experimental.closedNotebookRichContentResults": false,
	// 検索中にシンボリック リンクをたどるかどうかを制御します。
	"search.followSymlinks": true,
	// この設定は非推奨です。代わりに、検索アイコンを新しい場所にドラッグできます。
	// 検索をサイドバーのビューとして表示するか、より水平方向の空間をとるためにパネル領域のパネルとして表示するかを制御します。
	"search.location": "sidebar",
	// 検索キャッシュは、シャットダウンしない拡張機能ホストに保持されるため、この設定は不要になります。
	// 有効にすると、searchService プロセスは 1 時間操作がない場合でもシャットダウンされず、アクティブな状態に保たれます。これにより、ファイル検索キャッシュがメモリに保持されます。
	"search.maintainFileSearchCache": false,
	// 検索結果の最大数を制御します。これを ' null ' (空) に設定して、無制限の結果を返すことができます。
	"search.maxResults": 20000,
	// [検索: フォルダーを指定して検索] と [フォルダー内を検索] の新しい操作が実行される場所を制御します。検索ビューまたは検索エディターのいずれかになります。
	//  - view: パネルまたはサイド バーのいずれかで検索ビュー内を検索します。
	//  - reuseEditor: 存在する場合は既存の検索エディターで、それ以外の場合は新しい検索エディターで検索します。
	//  - newEditor: 新しい検索エディターで検索します。
	"search.mode": "view",
	// 次回開いたとき、クイック検索の最後の入力を復元するかどうかを制御します。
	"search.quickAccess.preserveInput": false,
	// フィルター処理時に、 Quick Open におけるエディター履歴の並べ替え順序を制御します。
	//  - default: 履歴エントリは、使用されるフィルター値に基づいて関連性によって並び替えられます。関連性の高いエントリが最初に表示されます。
	//  - recency: 履歴エントリは、新しい順に並べ替えられます。最近開いたエントリが最初に表示されます。
	"search.quickOpen.history.filterSortOrder": "default",
	// 最近開いたファイルの結果を、Quick Open の結果ファイルに含めるかどうか。
	"search.quickOpen.includeHistory": true,
	// グローバル シンボル検索の結果を、Quick Open の結果ファイルに含めるかどうか。
	"search.quickOpen.includeSymbols": false,
	// 検索に使用するスレッドの数。0 に設定すると、エンジンによってこの値が自動的に決定されます。
	"search.ripgrep.maxThreads": 0,
	// 新しい検索エディターを作成するときに使用する、前後のコンテキスト行の既定数です。'#search.searchEditor.reusePriorSearchConfiguration#' を使用している場合、検索エディターの以前の構成を使用するには、これを 'null ' (空) に設定することができます。
	"search.searchEditor.defaultNumberOfContextLines": 1,
	// 検索エディターで結果をダブルクリックした場合の効果を構成します。
	//  - selectWord: ダブルクリックすると、カーソルの下にある単語が選択されます。
	//  - goToLocation: ダブルクリックすると、アクティブなエディター グループに結果が開きます。
	//  - openLocationToSide: ダブルクリックすると、結果はエディター グループの横に開かれ、まだ存在しない場合は作成されます。
	"search.searchEditor.doubleClickBehaviour": "goToLocation",
	// 検索がトリガーされたら、検索エディターの入力ではなく、検索エディターの結果にフォーカスを置きます。
	"search.searchEditor.focusResultsOnSearch": false,
	// 有効にすると、新しい検索エディターで、以前に開かれていた検索エディターの包含、除外、フラグが再利用されます。
	"search.searchEditor.reusePriorSearchConfiguration": false,
	// 検索エディターで結果をダブルクリックした場合の効果を構成します。
	//  - default: シングルクリックでは何も行われません。
	//  - peekDefinition: シングルクリックすると、[定義をここに表示] ウィンドウが開きます。
	"search.searchEditor.singleClickBehaviour": "default",
	// 入力中の文字列を全てのファイルから検索する。
	"search.searchOnType": true,
	// `search.searchOnType#` が有効になっている場合、文字入力と検索開始の間の入力待ちをミリ秒単位で制御します。`#search.searchOnType` が無効になっている場合、効果はありません。
	"search.searchOnTypeDebouncePeriod": 300,
	// 検索ビューにフォーカスを置いたときに、検索クエリが、エディターで選択されているテキストに更新されます。これは、クリックされたときか、`workbench.views.search.focus` コマンドがトリガーされたときに発生します。
	"search.seedOnFocus": false,
	// アクティブなエディターで何も選択されていないときに、カーソルに最も近い語からのシード検索を有効にします。
	"search.seedWithNearestWord": false,
	// 検索結果に行番号を表示するかどうかを制御します。
	"search.showLineNumbers": false,
	// すべて小文字のパターンの場合、大文字と小文字を区別しないで検索し、そうでない場合は大文字と小文字を区別して検索します。
	"search.smartCase": false,
	// 検索結果の並べ替え順序を制御します。
	//  - default: 結果はフォルダー名とファイル名でアルファベット順に並べ替えられます。
	//  - fileNames: 結果はフォルダーの順序を無視したファイル名でアルファベット順に並べ替えられます。
	//  - type: 結果は、ファイル拡張子でアルファベット順に並べ替えられます。
	//  - modified: 結果は、ファイルの最終更新日で降順に並べ替えられます。
	//  - countDescending: 結果は、ファイルあたりの数で降順に並べ替えられます。
	//  - countAscending: 結果は、ファイルごとのカウントで昇順に並べ替えられます。
	"search.sortOrder": "default",
	// ファイルを検索するときに、グローバル gitignore ファイル (たとえば、'$HOME/.config/git/ignore' から) を使用するかどうかを制御します。`search.useIgnoreFiles` を有効にする必要があります。
	"search.useGlobalIgnoreFiles": false,
	// ファイルを検索するときに、`.gitignore` ファイルと `.ignore` ファイルを使用するかどうかを制御します。
	"search.useIgnoreFiles": true,
	// ファイルを検索するときに、親ディレクトリで `.gitignore` ファイルと `.ignore` ファイルを使用するかどうかを制御します。`search.useIgnoreFiles` を有効にする必要があります。
	"search.useParentIgnoreFiles": false,
	// 廃止されました。PCRE2 でのみサポートされている正規表現機能を使用すると、PCRE2 が自動的に使用されます。
	// テキスト検索に PCRE2 正規表現エンジンを使用するかどうか。これにより、先読みや後方参照といった高度な正規表現機能を使用できるようになります。ただし、すべての PCRE2 機能がサポートされているわけではありません。JavaScript によってサポートされる機能のみが使用できます。
	"search.usePCRE2": false,
	// 一致項目を選択するか置換するときに、置換のプレビューを開くかどうかを制御します。
	"search.useReplacePreview": true,
	// 推奨されません。高度な正規表現機能サポートのために "search.usePCRE2" の利用を検討してください。
	// この設定は推奨されず、現在 "search.usePCRE2" にフォール バックします。
	"search.useRipgrep": true,
	// Node.js' ではなく、Electron のフェッチ実装の使用を有効にするかどうかを制御します。すべてのローカル拡張機能は、グローバル フェッチ API に対する Electron のフェッチ実装を取得します。
	"http.electronFetch": false,
	// OS からの CA 証明書の試験的な読み込みを有効にするかどうかを制御します。これは、既定の補完よりも一般的なアプローチを使用します。
	"http.experimental.systemCertificatesV2": false,
	// HTTP/HTTPS 要求でプロキシ設定を無視する必要があるドメイン名を指定します。
	"http.noProxy": [],
	// 使用するプロキシ設定。設定されていない場合は、'http_proxy' および 'https_proxy' の環境変数から継承されます。
	"http.proxy": "",
	// すべてのネットワーク要求に対して 'Proxy-Authorization' ヘッダーとして送信する値。
	"http.proxyAuthorization": null,
	// HTTP プロキシを使用して Kerberos 認証のプリンシパル サービス名をオーバーライドします。プロキシ ホスト名に基づく既定値は、設定されていない場合に使用されます。
	"http.proxyKerberosServicePrincipal": "",
	// 提供された CA の一覧と照らしてプロキシ サーバーの証明書を確認するかどうか制御します。
	"http.proxyStrictSSL": true,
	// 拡張機能プロキシ サポートを使用します。
	//  - off: 拡張機能のプロキシ サポートを無効にします。
	//  - on: 拡張機能のプロキシ サポートを有効にします。
	//  - fallback: プロキシが見つからないときに、拡張機能のプロキシ サポートを有効にし、要求オプションにフォールバックします。
	//  - override: 拡張機能のプロキシ サポートを有効にします。リクエスト オプションを上書きします。
	"http.proxySupport": "override",
	// CA 証明書を OS から読み込む必要があるかどうかを制御します (Windows および macOS では、オフにした場合にウィンドウの再読み込みが必要です)。
	"http.systemCertificates": true,
	// AltGraph+ 修飾子を Ctrl+Alt+ として扱うかどうかを制御します。
	"keyboard.mapAltGrToCtrlAlt": false,
	// この設定は非推奨になりました。代わりに 'update.mode' を使用してください。
	// 自動更新を受け取るかどうかを構成します。変更後に再起動が必要です。更新プログラムは Microsoft のオンライン サービスから取得されます。
	"update.channel": "default",
	// Windows で新しい VS Code バージョンをバックグラウンドでダウンロードしてインストールできるようにします。
	"update.enableWindowsBackgroundUpdates": true,
	// 自動更新を受け取るかどうかを構成します。変更後に再起動が必要です。更新プログラムは Microsoft のオンライン サービスから取得されます。
	//  - none: 更新を無効にします。
	//  - manual: バックグラウンドでの自動更新の確認を無効にします。更新を手動で確認すると、更新を利用できます。
	//  - start: 起動時にのみ更新プログラムを確認します。バックグラウンドの自動更新チェックを無効にします。
	//  - default: 自動更新の確認を有効にします。Code は自動的かつ定期的に更新を確認します。
	"update.mode": "default",
	// 更新後にリリース ノートを表示します。リリース ノートは Micorosft のオンライン サービスから取得されます。
	"update.showReleaseNotes": true,
	// HTML タグの自動クローズを有効/無効にします。
	"html.autoClosingTags": true,
	// HTML 属性割り当ての引用符の自動作成を有効または無効にします。引用符の型は、'#html.completion.attributeDefaultValue#' で構成できます。
	"html.autoCreateQuotes": true,
	// 完了が承認された場合の属性の既定値を制御します。
	//  - doublequotes: 属性値が "" に設定されています。
	//  - singlequotes: 属性値が '' に設定されています。
	//  - empty: 属性値が設定されていません。
	"html.completion.attributeDefaultValue": "doublequotes",
	// [カスタム データ形式](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md) に従って JSON ファイルを指す相対ファイル パスの一覧。
	// 
	// VS Code では、起動時にカスタム データを読み込んで、ユーザーが JSON ファイルに指定するカスタム HTML タグ、属性、属性値の HTML サポートを強化します。
	// 
	// ファイル パスはワークスペースを基準とした相対パスであり、ワークスペース フォルダーの設定のみが考慮されます。
	"html.customData": [],
	// コンテンツを再フォーマットしてはならないタグの、コンマ区切りの一覧。`null` は、既定値の `pre` タグを表します。
	"html.format.contentUnformatted": "pre,code,textarea",
	// 既定の HTML フォーマッタを有効/無効にします。
	"html.format.enable": true,
	// 直前に改行を 1 つ入れるタグの、コンマで区切られたリストです。`null` は、既定値の `head, body, /html` を表します。
	"html.format.extraLiners": "head, body, /html",
	// {{#foo}}` から `{{/foo}}` をフォーマットしてインデントします。
	"html.format.indentHandlebars": false,
	// '<head>' および '<body>' セクションをインデントします。
	"html.format.indentInnerHtml": false,
	// 1 つのチャンク内に保持できる改行の最大数。無制限にするには、`null` を使います。
	"html.format.maxPreserveNewLines": null,
	// 要素の前にある既存の改行を保持するかどうかを制御します。要素の前でのみ機能し、タグの内側やテキストに対しては機能しません。
	"html.format.preserveNewLines": true,
	// Django、ERB、Handlebars、PHP テンプレート言語のタグを優先します。
	"html.format.templating": false,
	// 再フォーマットしてはならないタグの、コンマ区切りの一覧。`null` の場合、既定で https://www.w3.org/TR/html5/dom.html#phrasing-content にリストされているすべてのタグになります。
	"html.format.unformatted": "wbr",
	// テキスト コンテンツをこの文字列の間にまとめます。
	"html.format.unformattedContentDelimiter": "",
	// 属性を折り返します。
	//  - auto: 行の長さが超過した場合のみ属性を折り返します。
	//  - force: 先頭以外の各属性を折り返します。
	//  - force-aligned: 先頭以外の各属性を折り返して位置を合わせます。
	//  - force-expand-multiline: 各属性を折り返します。
	//  - aligned-multiple: 行の長さが超過したときに、属性を垂直方向に整列させます。
	//  - preserve: 属性の折り返しを保持します。
	//  - preserve-aligned: 属性の折り返しを保持しますが、整列させます。
	"html.format.wrapAttributes": "auto",
	// ラップされた属性を N 文字後にインデントします。既定のインデント サイズを使用するには、`null` を使用します。`html.format.wrapAttributes` が `aligned` に設定されている場合は無視されます。
	"html.format.wrapAttributesIndentSize": null,
	// 1 行あたりの最大文字数 (0 = 無効にする)。
	"html.format.wrapLineLength": 120,
	// ホバー時にタグと属性のドキュメントを表示します。
	"html.hover.documentation": true,
	// ホバー時に MDN への参照を表示します。
	"html.hover.references": true,
	// `editor.linkedEditing` のために非推奨
	// 対応する HTML タグでカーソルのミラーリングを有効または無効にします。
	"html.mirrorCursorOnMatchingTag": false,
	// ビルトイン HTML 言語サポートが HTML5 のタグ、プロパティ、および値を候補表示するかどうかを制御します。
	"html.suggest.html5": true,
	// VS Code と HTML 言語サーバー間の通信をトレースします。
	"html.trace.server": "off",
	// ビルトイン HTML 言語サポートが埋め込みスクリプトを検証するかどうかを制御します。
	"html.validate.scripts": true,
	// ビルトイン HTML 言語サポートが埋め込みスタイルを検証するかどうかを制御します。
	"html.validate.styles": true,
	// 設定 `json.colorDecorators.enable` は使用されなくなりました。`editor.colorDecorators` を使用してください。
	// カラー デコレーターを有効または無効にします
	"json.colorDecorators.enable": true,
	// 既定の JSON フォーマッタを有効/無効にします
	"json.format.enable": true,
	// 書式設定時に既存の改行をすべて保持します。
	"json.format.keepLines": false,
	// 計算されたアウトライン記号と折りたたまれた領域の最大数 (パフォーマンス上の理由から制限されています)。
	"json.maxItemsComputed": 5000,
	// 有効にすると、JSON スキーマを http および https の場所からフェッチできるようになります。
	"json.schemaDownload.enable": true,
	// スキーマを現在のプロジェクトの JSON ファイルに関連付けます。
	"json.schemas": [],
	// VS Code と JSON 言語サーバー間の通信をトレースします。
	"json.trace.server": "off",
	// JSON 検証を有効または無効にします。
	"json.validate.enable": true,
	// コピー/貼り付けまたはドラッグ アンド ドロップによって作成されたファイルのパスとファイル名を構成します。これは、新しいファイルを作成するターゲット パスへの Markdown ドキュメント パスと一致する glob のマップです。
	// 
	// コピー先のパスでは次の変数を使用できます:
	// 
	// - `${documentDirName}` — Markdown ドキュメントの親ディレクトリの絶対パス。例: `/Users/me/myProject/docs`。
	// - `${documentRelativeDirName}` — Markdown ドキュメントの親ディレクトリの相対パス。例: `docs`。ファイルがワークスペースに含まれていない場合、これは `${documentDirName}` と同じです。
	// - `${documentFileName}` — Markdown ドキュメントの完全なファイル名 (例: `README.md`)。
	// - `${documentBaseName}` — Markdown ドキュメントのベース名 (例: `README`)。
	// - `${documentExtName}` — Markdown ドキュメントの拡張子 (例: `md`)。
	// - `${documentFilePath}` — Markdown ドキュメントの絶対パス。例: `/Users/me/myProject/docs/README.md`。
	// - `${documentRelativeFilePath}` — Markdown ドキュメントの相対パス。例: `docs/README.md`。ファイルがワークスペースに含まれていない場合、これは `${documentFilePath}` と同じです。
	// - `${documentWorkspaceFolder}` — Markdown ドキュメントのワークスペース フォルダー。例: `/Users/me/myProject`。ファイルがワークスペースに含まれていない場合、これは `${documentDirName}` と同じです。
	// - `${fileName}` — ドロップされたファイルのファイル名 (例: `image.png`)。
	// - `${fileExtName}` — ドロップされたファイルの拡張子 (例: `png`)。
	"markdown.copyFiles.destination": {},
	// ドロップまたは貼り付けによって作成されたファイルが既存のファイルを上書きするかどうかを制御します。
	//  - nameIncrementally: 同じ名前のファイルが既に存在する場合は、ファイル名に番号を追加します。たとえば、`image.png` は `image-1.png` になります。
	//  - overwrite: 同じ名前のファイルが既に存在する場合は、上書きします。
	"markdown.copyFiles.overwriteBehavior": "nameIncrementally",
	// Markdown エディターにドロップされたワークスペースの外部のファイルをワークスペースにコピーするかどうかを制御します。
	// 
	// `markdown.copyFiles.destination` を使用して、コピーしたドロップされたファイルを作成する場所を構成します
	//  - mediaFiles: 外部の画像ファイルとビデオ ファイルをワークスペースにコピーしてみてください。
	//  - never: 外部ファイルをワークスペースにコピーしないでください。
	"markdown.editor.drop.copyIntoWorkspace": "mediaFiles",
	// Shift キーを押しながら Markdown editor へのドロップを有効にします。`editor.dropIntoEditor.enabled` を有効にする必要があります。
	//  - always: Markdown リンクを常に挿入します。
	//  - smart: コード ブロックやその他の特殊な要素にドロップしなかった場合に、既定で Markdown リンクをスマートに作成します。プレーン テキストとしての貼り付けと、Markdown リンクとしての貼り付けを切り替えるには、ドロップ ウィジェットを使用します。
	//  - never: Markdown リンクを作成しません。
	"markdown.editor.drop.enabled": "smart",
	// Markdown にオーディオを追加する際に使用されるスニペット。このスニペットでは、次の変数を使用できます。
	// - `${src}` — オーディオ ファイルの解決されたパス。
	// - `${title}` — オーディオで使用されるタイトル。スニペット プレースホルダーは、この変数用に自動的に作成されます。
	"markdown.editor.filePaste.audioSnippet": "<audio controls src=\"${src}\" title=\"${title}\"></audio>",
	// Markdown エディターに貼り付けられたワークスペースの外部のファイルをワークスペースにコピーするかどうかを制御します。
	// 
	// `markdown.copyFiles.destination` を使用して、コピーされたファイルを作成する場所を構成します。
	//  - mediaFiles: 外部の画像ファイルとビデオ ファイルをワークスペースにコピーしてみてください。
	//  - never: 外部ファイルをワークスペースにコピーしないでください。
	"markdown.editor.filePaste.copyIntoWorkspace": "mediaFiles",
	// Markdown エディターへのファイルの貼り付け機能を有効にして、Markdown リンクを作成します。`editor.pasteAs.enabled` を有効にする必要があります。
	//  - always: Markdown リンクを常に挿入します。
	//  - smart: コード ブロックやその他の特殊な要素に貼り付けなかった場合に、既定で Markdown リンクをスマートに作成します。貼り付けウィジェットを使用して、プレーン テキストとして貼り付けるか、Markdown リンクとして貼り付けるかを切り替えます。
	//  - never: Markdown リンクを作成しません。
	"markdown.editor.filePaste.enabled": "smart",
	// Markdown にビデオを追加する際に使用されるスニペット。このスニペットでは、次の変数を使用できます。
	// - `${src}` — ビデオ ファイルの解決されたパス。
	// - `${title}` — ビデオで使用されるタイトル。スニペット プレースホルダーは、この変数用に自動的に作成されます。
	"markdown.editor.filePaste.videoSnippet": "<video controls src=\"${src}\" title=\"${title}\"></video>",
	// URL を Markdown エディターに貼り付けるときに Markdown リンクを作成するかどうかを制御します。`editor.pasteAs.enabled` を有効にする必要があります。
	//  - always: Markdown リンクを常に挿入します。
	//  - smart: コード ブロックやその他の特殊な要素に貼り付けなかった場合に、既定で Markdown リンクをスマートに作成します。貼り付けウィジェットを使用して、プレーン テキストとして貼り付けるか、Markdown リンクとして貼り付けるかを切り替えます。
	//  - smartWithSelection: テキストが選択された状態で、コード ブロックやその他の特別な要素への貼り付けを行なっていない場合は、デフォルトで Markdown リンクをスマートに作成します。プレーン テキストとしての貼り付けと、Markdown リンクとしての貼り付けを切り替えるには、貼り付けウィジェットを使用します。
	//  - never: Markdown リンクを作成しません。
	"markdown.editor.pasteUrlAsFormattedLink.enabled": "smartWithSelection",
	// Markdown エディター間でコピーして貼り付けたテキスト内のリンクと参照を更新する貼り付けオプションを有効または無効にします。
	// 
	// この機能を使用するには、更新可能なリンクを含むテキストを貼り付けた後、貼り付けウィジェットをクリックし、[貼り付けと貼り付けたリンクを更新] を選択します。
	"markdown.editor.updateLinksOnPaste.enabled": true,
	// マークダウン ファイル内のリンクを開く場所を制御します。
	//  - currentGroup: アクティブなエディター グループ内にリンクを開きます。
	//  - beside: アクティブなエディターの横にあるリンクを開きます。
	"markdown.links.openLocation": "currentGroup",
	// 現在のドキュメント内のリンクの出現箇所を強調表示する機能を有効にします。
	"markdown.occurrencesHighlight.enabled": false,
	// Markdown ファイルへのリンクに対してファイル拡張子 (例えば '.md') を追加するかどうかを制御します。この設定は、パス補完やファイル名の変更などのツールによってファイル パスが追加されるときに使用されます。
	//  - auto: 既存のパスの場合は、ファイル拡張子のスタイルを維持してみてください。新しいパスの場合は、ファイル拡張子を追加します。
	//  - includeExtension: ファイル拡張子を含めます。たとえば、'file.md' という名前のファイルへのパス補完では、'file.md' が挿入されます。
	//  - removeExtension: ファイル拡張子の削除を優先します。たとえば、'file.md' という名前のファイルへのパス補完では、'.md' なしで 'file' が挿入されます。
	"markdown.preferredMdPathExtensionStyle": "auto",
	// Markdown プレビューでの改行のレンダリング方法を設定します。これを 'true' に設定すると、段落内の改行の '<br>' が作成されます。
	"markdown.preview.breaks": false,
	// Markdown プレビューでダブルクリックすると、エディターに切り替わります。
	"markdown.preview.doubleClickToSwitchToEditor": true,
	// Markdown プレビューで使用されるフォント ファミリを制御します。
	"markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",
	// Markdown プレビューで使用されるフォント サイズ (ピクセル単位) を制御します。
	"markdown.preview.fontSize": 14,
	// Markdown プレビューで使用される行の高さを制御します。この数値はフォント サイズを基準とします。
	"markdown.preview.lineHeight": 1.6,
	// Markdown プレビューで、URL 形式のテキストをリンクに変換します。
	"markdown.preview.linkify": true,
	// Markdown プレビューに、エディターの現在の選択範囲を示すマークが付きます。
	"markdown.preview.markEditorSelection": true,
	// Markdown プレビューで他のマークダウン ファイルへのリンクを開く方法を制御します。
	//  - inPreview: Markdown プレビューでリンクを開こうとします。
	//  - inEditor: エディターでリンクを開こうとします。
	"markdown.preview.openMarkdownLinks": "inPreview",
	// Markdown プレビューをスクロールすると、エディターのビューが更新されます。
	"markdown.preview.scrollEditorWithPreview": true,
	// Markdown エディターをスクロールすると、プレビューのビューが更新されます。
	"markdown.preview.scrollPreviewWithEditor": true,
	// Markdown プレビューで、特定の言語に依存しない置換と引用符の美化を有効にします。
	"markdown.preview.typographer": false,
	// Markdown 言語サーバーのログ レベルを制御します。
	"markdown.server.log": "off",
	// Markdown プレビューから使用する CSS スタイル シートへの URL またはローカル パスの一覧。相対パスは、エクスプローラーで開いているフォルダーを基準に解釈されます。開いているフォルダーがない場合は、Markdown ファイルの場所を基準にして解釈されます。すべての '\' は '\\' として記述する必要があります。
	"markdown.styles": [],
	// Markdown ファイルへのリンクの書き込み中にパス候補を有効にします。
	"markdown.suggest.paths.enabled": true,
	// 現在のワークスペース内の他のマークダウン ファイルのヘッダーの候補を有効にします。これらの候補のいずれかを受け入れることで、そのファイルのヘッダーへの完全なパスが挿入されます。例: `[link text](/path/to/file.md#header)`。
	//  - never: ワークスペース ヘッダーの候補を無効にします。
	//  - onDoubleHash: パスに 「##」と入力した後にワークスペース ヘッダーの候補を有効にします。例: `[link text](##`。
	//  - onSingleOrDoubleHash: パスに 「##」 または 「#」 と入力した後、ワークスペース ヘッダー候補を有効にします。例: `[link text](#` または `[link text](##`。
	"markdown.suggest.paths.includeWorkspaceHeaderCompletions": "onDoubleHash",
	// Markdown 拡張機能のデバッグ ログを有効にします。
	"markdown.trace.extension": "off",
	// VS Code と Markdown 言語サーバー間の通信をトレースします。
	"markdown.trace.server": "off",
	// ワークスペースでファイルの名前が変更または移動されたときに、Markdown ファイルのリンクを更新してみてください。`markdown.updateLinksOnFileMove.include` を使用して、リンクの更新をトリガーするファイルを構成します。
	//  - prompt: ファイルを移動するときに確認メッセージを表示します。
	//  - always: 常にリンクを自動的に更新します。
	//  - never: リンクを更新しようとせず、メッセージを表示しません。
	"markdown.updateLinksOnFileMove.enabled": "never",
	// ワークスペースでディレクトリが移動または名前変更されたときにリンクの更新を有効にします。
	"markdown.updateLinksOnFileMove.enableForDirectories": true,
	// リンクの自動更新をトリガーするファイルを指定する glob パターン。この機能の詳細については、`markdown.updateLinksOnFileMove.enabled` を参照してください。
	"markdown.updateLinksOnFileMove.include": [
		"**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
		"**/*.{jpg,jpe,jpeg,png,bmp,gif,ico,webp,avif,tiff,svg,mp4}"
	],
	// 現在のファイル内の重複した定義を検証します。
	"markdown.validate.duplicateLinkDefinitions.enabled": "warning",
	// Markdown ファイル内のすべてのエラー報告を有効にします。
	"markdown.validate.enabled": false,
	// Markdown ファイルに含まれる、他のファイルへのリンクを検証します (例: `[link](/path/to/file.md)`)。これを指定すると、ターゲット ファイルが存在するかどうかが確認されます。`markdown.validate.enabled` を有効にする必要があります。
	"markdown.validate.fileLinks.enabled": "warning",
	// Markdown ファイルに含まれる、他のファイルのヘッダーへのリンクのフラグメント部分を検証します (例: `[link](/path/to/file.md#header)`)。既定では、`markdown.validate.fragmentLinks.enabled` から設定値を継承します。
	"markdown.validate.fileLinks.markdownFragmentLinks": "inherit",
	// 現在の Markdown ファイルに含まれるヘッダーへのフラグメント リンクを検証します (例: `[link](#header)`)。`markdown.validate.enabled` を有効にする必要があります。
	"markdown.validate.fragmentLinks.enabled": "warning",
	// 検証しないリンクを構成します。たとえば、'/about' を追加すると、リンク '[about](/about)' は検証されなくなります。glob '/assets/**/*.svg' を指定すると、'assets' ディレクトリの下にある '.svg' ファイルへのリンクの検証をスキップできます。
	"markdown.validate.ignoredLinks": [],
	// Markdown ファイル内の参照リンクを検証します (例: `[link][ref]`)。`markdown.validate.enabled` を有効にする必要があります。
	"markdown.validate.referenceLinks.enabled": "warning",
	// 現在のファイルで使用されていないリンク定義を検証します。
	"markdown.validate.unusedLinkDefinitions.enabled": "hint",
	// 組み込みの PHP 言語候補機能を有効にするかどうかを制御します。このサポートによって、PHP グローバルと変数の候補が示されます。
	"php.suggest.basic": true,
	// 組み込みの PHP 検証を有効/無効にします。
	"php.validate.enable": true,
	// PHP 実行可能ファイルを指定します。
	"php.validate.executablePath": null,
	// リンターを保存時に実行するか、入力時に実行するか。
	"php.validate.run": "onSave",
	// JSX タグの自動終了を有効または無効にします。
	"javascript.autoClosingTags": true,
	// Automatically update imports when pasting code. Requires TypeScript 5.7+.
	"javascript.experimental.updateImportsOnPaste": false,
	// 既定の JavaScript フォーマッタを有効/無効にします。
	"javascript.format.enable": true,
	// コンマ区切り記号の後のスペース処理を定義します。
	"javascript.format.insertSpaceAfterCommaDelimiter": true,
	// コンストラクター キーワードの後のスペース処理を定義します。
	"javascript.format.insertSpaceAfterConstructor": false,
	// 匿名関数の関数キーワードの後のスペース処理を定義します。
	"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,
	// 制御フロー ステートメント内のキーワードの後のスペース処理を定義します。
	"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,
	// 左右の空のかっこの間のスペース処理を定義します。
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,
	// JSX 式の始め波かっこの後と終わり波かっこの前のスペース処理を定義します。
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,
	// 左右の空でないかっこの間のスペース処理を定義します。
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,
	// 左右の空でない角かっこの間のスペース処理を定義します。
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,
	// 左右の空でないかっこの間のスペース処理を定義します。
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,
	// テンプレート文字列の始め波かっこの後と終わり波かっこの前のスペース処理を定義します。
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
	// for ステートメント内のセミコロンの後のスペース処理を定義します。
	"javascript.format.insertSpaceAfterSemicolonInForStatements": true,
	// 2 項演算子の後のスペース処理を定義します。
	"javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,
	// 関数の引数のかっこの前にあるスペース処理を定義します。
	"javascript.format.insertSpaceBeforeFunctionParenthesis": false,
	// 新しい行にコントロール ブロックの始め波かっこを配置するかどうかを定義します。
	"javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,
	// 新しい行に関数の始め波かっこを配置するかどうかを定義します。
	"javascript.format.placeOpenBraceOnNewLineForFunctions": false,
	// オプションのセミコロンの処理を定義します。
	//  - ignore: セミコロンを挿入または削除しないでください。
	//  - insert: ステートメントの最後にセミコロンを挿入します。
	//  - remove: 不要なセミコロンを削除します。
	"javascript.format.semicolons": "ignore",
	// この設定は、`js/ts.implicitProjectConfig.checkJs` を優先して非推奨になりました。
	// JavaScript ファイルのセマンティック チェックを有効または無効にします。既存の 'jsconfig.json' または 'tsconfig.json' ファイルによってこの設定がオーバーライドされます。
	"javascript.implicitProjectConfig.checkJs": false,
	// この設定は、`js/ts.implicitProjectConfig.experimentalDecorators` を優先して非推奨になりました。
	// プロジェクト外の JavaScript ファイルの 'experimentalDecorators' を有効または無効にします。既存の 'jsconfig.json' または 'tsconfig.json' ファイルによってこの設定がオーバーライドされます。
	"javascript.implicitProjectConfig.experimentalDecorators": false,
	// 列挙型宣言内のメンバー値のインレイ ヒントを有効/無効にします:
	// ```typescript
	// 
	// enum MyValue {
	// 	A /* = 0 */;
	// 	B /* = 1 */;
	// }
	//  
	// ```
	"javascript.inlayHints.enumMemberValues.enabled": false,
	// 関数シグネチャの暗黙的な戻り値の型について、インレイ ヒントを有効/無効にします:
	// ```typescript
	// 
	// function foo() /* :number */ {
	// 	return Date.now();
	// } 
	//  
	// ```
	"javascript.inlayHints.functionLikeReturnTypes.enabled": false,
	// パラメーター名へのインレイ ヒントを有効/無効にします:
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	//  - none: パラメーター名のヒントを無効にします。
	//  - literals: リテラル引数に対してのみ、パラメーター名のヒントを有効にします。
	//  - all: リテラル引数およびリテラル引数以外の引数に対してパラメーター名のヒントを有効にします。
	"javascript.inlayHints.parameterNames.enabled": "none",
	// パラメーター名と同一のテキストを持つ引数に対するパラメーター名のヒントを抑制します。
	"javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
	// 暗黙的なパラメーター型へのインレイ ヒントを有効/無効にします:
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	// ```
	"javascript.inlayHints.parameterTypes.enabled": false,
	// プロパティ宣言の暗黙的な型へのインレイ ヒントを有効/無効にします:
	// ```typescript
	// 
	// class Foo {
	// 	prop /* :number */ = Date.now();
	// }
	//  
	// ```
	"javascript.inlayHints.propertyDeclarationTypes.enabled": false,
	// 暗黙的な変数型のインレイ ヒントを有効/無効にします:
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	"javascript.inlayHints.variableTypes.enabled": false,
	// 名前が型名と同じ変数の型ヒントを非表示にします。
	"javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,
	// 自動インポートから除外するファイルの glob パターンを指定します。相対パスは、ワークスペース ルートを基準に解決されます。パターンは、tsconfig.json ['exclude'](https://www.typescriptlang.org/tsconfig#exclude) セマンティクスを使用して評価されます。
	"javascript.preferences.autoImportFileExcludePatterns": [],
	// 一致するインポート指定子を使用して、自動インポートを除外する正規表現を指定します。例:
	// 
	// - `^node:`
	// - `lib/internal' (スラッシュはエスケープする必要ありません...)
	// - `/lib\/internal/i` (...`i` フラグまたは `u` フラグに周囲のスラッシュを含めない限り)
	// - `^lodash$` (lodash からのサブパス インポートのみを許可)
	"javascript.preferences.autoImportSpecifierExcludeRegexes": [],
	// 自動 import の優先パス スタイル。
	//  - shortest: 相対インポートよりもパス セグメント数が少なくなる場合にのみ、非相対インポートを優先します。
	//  - relative: インポートされたファイルの場所への相対パスを優先します。
	//  - non-relative: `jsconfig.json` または `tsconfig.json` に構成されている `baseUrl` または `paths` に基づいて非相対インポートを優先します。
	//  - project-relative: 相対インポート パスでパッケージまたはプロジェクト ディレクトリが提供される場合にのみ、非相対インポートを優先します。
	"javascript.preferences.importModuleSpecifier": "shortest",
	// 自動インポートの優先パスの末尾。
	//  - auto: プロジェクト設定を使用してデフォルトを選択します。
	//  - minimal: './component/index.js' を './component' に短縮します。
	//  - index: ./component/index.js' を './component/index' に短縮します。
	//  - js: パスの末尾を短くしないでください。拡張子 `.js` または `.ts` を含めます。
	"javascript.preferences.importModuleSpecifierEnding": "auto",
	// JSX 属性補完向けに優先されるスタイル。
	//  - auto: プロパティの種類に基づいて属性名の後に '={}' または '=""' を挿入します。文字列属性に使用される引用符の種類を制御するには、`javascript.preferences.quoteStyle` を参照してください。
	//  - braces: 属性名の後に `={}` を挿入します。
	//  - none: 属性名の挿入のみ。
	"javascript.preferences.jsxAttributeCompletionStyle": "auto",
	// インポートの順序を制御する詳細な設定です。
	"javascript.preferences.organizeImports": {},
	// 迅速な修正の使用で優先される引用符のスタイル。
	//  - auto: 既存のコードから引用符の種類を推測する
	//  - single: 常に単一引用符 `'` を使用します。
	//  - double: 常に二重引用符 `"` を使用します。
	"javascript.preferences.quoteStyle": "auto",
	// JSX タグの場合は、シンボルの名前を変更するのではなく、一致するタグの名前を変更します。ワークスペースで TypeScript 5.1 以降を使用する必要があります。
	"javascript.preferences.renameMatchingJsxTags": true,
	// 設定 'typescript.preferences.renameShorthandProperties' は非推奨になりました。'typescript.preferences.useAliasesForRenames' をお勧めします
	// 名前の変更時にオブジェクトの省略形のプロパティのエイリアスの導入を有効または無効にします。
	"javascript.preferences.renameShorthandProperties": true,
	// 名前の変更時にオブジェクトの省略形のプロパティのエイリアスの導入を有効または無効にします。
	"javascript.preferences.useAliasesForRenames": true,
	// 代わりに [ソース定義に移動] をトリガーすることで、可能な場合は [ソース定義に移動] で型宣言ファイルを回避します。これにより、[ソース定義に移動] をマウス ジェスチャでトリガーできます。
	"javascript.preferGoToSourceDefinition": false,
	// JavaScript ファイル内で CodeLens の参照を有効/無効にします。
	"javascript.referencesCodeLens.enabled": false,
	// JavaScript ファイル内のすべての関数で CodeLens への参照を有効または無効にします。
	"javascript.referencesCodeLens.showOnAllFunctions": false,
	// 自動インポートの提案を有効または無効にします。
	"javascript.suggest.autoImports": true,
	// クラス メンバーのスニペットの入力候補を有効または無効にします。
	"javascript.suggest.classMemberSnippets.enabled": true,
	// パラメーター シグネチャを含む完全な関数。
	"javascript.suggest.completeFunctionCalls": false,
	// JSDoc のコメントを完成させるための提案を有効/無効にします。
	"javascript.suggest.completeJSDocs": true,
	// オートコンプリートの提案を有効/無効にします。
	"javascript.suggest.enabled": true,
	// オプションのチェーン呼び出しを挿入する定義されていない可能性のある値で入力候補を表示することを有効または無効にします。厳密な null チェックを有効にする必要があります。
	"javascript.suggest.includeAutomaticOptionalChainCompletions": true,
	// 部分的に入力されたインポート ステートメントで、自動インポート形式の入力候補を有効または無効にします。
	"javascript.suggest.includeCompletionsForImportStatements": true,
	// JSDoc テンプレートの `@returns` 注釈の生成を有効または無効にします。
	"javascript.suggest.jsdoc.generateReturns": true,
	// JavaScript の候補のファイルから一意の名前を含めることを有効または無効にします。名前の候補は、`@ts-check` または `checkJs` を使用して意味的にチェックされる JavaScript コードでは常に無効であることに注意してください。
	"javascript.suggest.names": true,
	// import ステートメントや require 呼び出しでパスの提案を有効/無効にします。
	"javascript.suggest.paths": true,
	// エディター内で JavaScript ファイルの診断の提案を有効または無効にします。
	"javascript.suggestionActions.enabled": true,
	// VS Code で名前変更や移動を行ったファイルのインポート パスの自動更新を有効または無効にします。
	//  - prompt: 名前を変更するときに確認をします。
	//  - always: 常に自動的にパスを更新します。
	//  - never: パスの名前を変更せず確認も行いません。
	"javascript.updateImportsOnFileMove.enabled": "prompt",
	// JavaScript の検証を有効/無効にします。
	"javascript.validate.enable": true,
	// JavaScript ファイルのセマンティック チェックを有効または無効にします。既存の 'jsconfig.json' または 'tsconfig.json' ファイルによってこの設定がオーバーライドされます。
	"js/ts.implicitProjectConfig.checkJs": false,
	// プロジェクト外の JavaScript ファイルの 'experimentalDecorators' を有効または無効にします。既存の 'jsconfig.json' または 'tsconfig.json' ファイルによってこの設定がオーバーライドされます。
	"js/ts.implicitProjectConfig.experimentalDecorators": false,
	// プログラムのモジュール システムを設定します。詳細は次をご覧ください: https://www.typescriptlang.org/tsconfig#module。
	"js/ts.implicitProjectConfig.module": "ESNext",
	// プロジェクト外の JavaScript および TypeScript ファイルの [厳密な関数の型](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) を有効または無効にします。既存の 'jsconfig.json' または 'tsconfig.json' ファイルによってこの設定がオーバーライドされます。
	"js/ts.implicitProjectConfig.strictFunctionTypes": true,
	// プロジェクト外の JavaScript および TypeScript ファイルの [厳密な null チェック](https://www.typescriptlang.org/tsconfig#strictNullChecks) を有効または無効にします。既存の 'jsconfig.json' または 'tsconfig.json' ファイルによってこの設定がオーバーライドされます。
	"js/ts.implicitProjectConfig.strictNullChecks": true,
	// 発行された JavaScript のターゲット JavaScript 言語バージョンを設定し、ライブラリ宣言を含めます。詳細は次をご覧ください: https://www.typescriptlang.org/tsconfig#target。
	"js/ts.implicitProjectConfig.target": "ES2022",
	// JSX タグの自動終了を有効または無効にします。
	"typescript.autoClosingTags": true,
	// npm が [自動タイプ取得](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition) 用にインストールされているかどうかを確認します。
	"typescript.check.npmIsInstalled": true,
	// [自動タイプ取得](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition) を無効にします。自動タイプ取得では、外部ライブラリの IntelliSense を向上させるために、npm から '@types' パッケージが取得されます。
	"typescript.disableAutomaticTypeAcquisition": false,
	// ワークスペースで Intellisense 用に構成されている TypeScript バージョンを使用することについてユーザーへの確認を有効にします。
	"typescript.enablePromptUseWorkspaceTsdk": false,
	// (試験段階) ホバー時の展開を有効または無効にします。
	"typescript.experimental.expandableHover": false,
	// Automatically update imports when pasting code. Requires TypeScript 5.7+.
	"typescript.experimental.updateImportsOnPaste": false,
	// 既定の TypeScript フォーマッタを有効/無効にします。
	"typescript.format.enable": true,
	// switch ステートメントの case 句をインデントします。ワークスペースで TypeScript 5.1+ を使用する必要があります。
	"typescript.format.indentSwitchCase": true,
	// コンマ区切り記号の後のスペース処理を定義します。
	"typescript.format.insertSpaceAfterCommaDelimiter": true,
	// コンストラクター キーワードの後のスペース処理を定義します。
	"typescript.format.insertSpaceAfterConstructor": false,
	// 匿名関数の関数キーワードの後のスペース処理を定義します。
	"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,
	// 制御フロー ステートメント内のキーワードの後のスペース処理を定義します。
	"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,
	// 左右の空のかっこの間のスペース処理を定義します。
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,
	// JSX 式の始め波かっこの後と終わり波かっこの前のスペース処理を定義します。
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,
	// 左右の空でないかっこの間のスペース処理を定義します。
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,
	// 左右の空でない角かっこの間のスペース処理を定義します。
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,
	// 左右の空でないかっこの間のスペース処理を定義します。
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,
	// テンプレート文字列の始め波かっこの後と終わり波かっこの前のスペース処理を定義します。
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
	// for ステートメント内のセミコロンの後のスペース処理を定義します。
	"typescript.format.insertSpaceAfterSemicolonInForStatements": true,
	// TypeScript の型アサーションの後のスペース処理を定義します。
	"typescript.format.insertSpaceAfterTypeAssertion": false,
	// 2 項演算子の後のスペース処理を定義します。
	"typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,
	// 関数の引数のかっこの前にあるスペース処理を定義します。
	"typescript.format.insertSpaceBeforeFunctionParenthesis": false,
	// 新しい行にコントロール ブロックの始め波かっこを配置するかどうかを定義します。
	"typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,
	// 新しい行に関数の始め波かっこを配置するかどうかを定義します。
	"typescript.format.placeOpenBraceOnNewLineForFunctions": false,
	// オプションのセミコロンの処理を定義します。
	//  - ignore: セミコロンを挿入または削除しないでください。
	//  - insert: ステートメントの最後にセミコロンを挿入します。
	//  - remove: 不要なセミコロンを削除します。
	"typescript.format.semicolons": "ignore",
	// CodeLens の実装を有効/無効にします。この CodeLens は interface の実装を表示します。
	"typescript.implementationsCodeLens.enabled": false,
	// インターフェイス メソッドで CodeLens の実装を有効または無効にします。
	"typescript.implementationsCodeLens.showOnInterfaceMethods": false,
	// 列挙型宣言内のメンバー値のインレイ ヒントを有効/無効にします:
	// ```typescript
	// 
	// enum MyValue {
	// 	A /* = 0 */;
	// 	B /* = 1 */;
	// }
	//  
	// ```
	"typescript.inlayHints.enumMemberValues.enabled": false,
	// 関数シグネチャの暗黙的な戻り値の型について、インレイ ヒントを有効/無効にします:
	// ```typescript
	// 
	// function foo() /* :number */ {
	// 	return Date.now();
	// } 
	//  
	// ```
	"typescript.inlayHints.functionLikeReturnTypes.enabled": false,
	// パラメーター名へのインレイ ヒントを有効/無効にします:
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	//  - none: パラメーター名のヒントを無効にします。
	//  - literals: リテラル引数に対してのみ、パラメーター名のヒントを有効にします。
	//  - all: リテラル引数およびリテラル引数以外の引数に対してパラメーター名のヒントを有効にします。
	"typescript.inlayHints.parameterNames.enabled": "none",
	// パラメーター名と同一のテキストを持つ引数に対するパラメーター名のヒントを抑制します。
	"typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
	// 暗黙的なパラメーター型へのインレイ ヒントを有効/無効にします:
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	// ```
	"typescript.inlayHints.parameterTypes.enabled": false,
	// プロパティ宣言の暗黙的な型へのインレイ ヒントを有効/無効にします:
	// ```typescript
	// 
	// class Foo {
	// 	prop /* :number */ = Date.now();
	// }
	//  
	// ```
	"typescript.inlayHints.propertyDeclarationTypes.enabled": false,
	// 暗黙的な変数型のインレイ ヒントを有効/無効にします:
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	"typescript.inlayHints.variableTypes.enabled": false,
	// 名前が型名と同じ変数の型ヒントを非表示にします。
	"typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,
	// JavaScript と TypeScript のエラーを報告するために使用するロケールを設定します。既定では VS Code のロケールを使用します。
	//  - auto: VS Code の構成済みの表示言語を使用する
	//  - de: Deutsch
	//  - es: español
	//  - en: English
	//  - fr: français
	//  - it: italiano
	//  - ja: 日本語
	//  - ko: 한국어
	//  - ru: русский
	//  - zh-CN: 中文(简体)
	//  - zh-TW: 中文(繁體)
	"typescript.locale": "auto",
	// [自動タイプ取得](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition) に使われる npm 実行可能ファイルへのパスを指定します。
	"typescript.npm": "",
	// 自動インポートから除外するファイルの glob パターンを指定します。相対パスは、ワークスペース ルートを基準に解決されます。パターンは、tsconfig.json ['exclude'](https://www.typescriptlang.org/tsconfig#exclude) セマンティクスを使用して評価されます。
	"typescript.preferences.autoImportFileExcludePatterns": [],
	// 一致するインポート指定子を使用して、自動インポートを除外する正規表現を指定します。例:
	// 
	// - `^node:`
	// - `lib/internal' (スラッシュはエスケープする必要ありません...)
	// - `/lib\/internal/i` (...`i` フラグまたは `u` フラグに周囲のスラッシュを含めない限り)
	// - `^lodash$` (lodash からのサブパス インポートのみを許可)
	"typescript.preferences.autoImportSpecifierExcludeRegexes": [],
	// 自動 import の優先パス スタイル。
	//  - shortest: 相対インポートよりもパス セグメント数が少なくなる場合にのみ、非相対インポートを優先します。
	//  - relative: インポートされたファイルの場所への相対パスを優先します。
	//  - non-relative: `jsconfig.json` または `tsconfig.json` に構成されている `baseUrl` または `paths` に基づいて非相対インポートを優先します。
	//  - project-relative: 相対インポート パスでパッケージまたはプロジェクト ディレクトリが提供される場合にのみ、非相対インポートを優先します。
	"typescript.preferences.importModuleSpecifier": "shortest",
	// 自動インポートの優先パスの末尾。
	//  - auto: プロジェクト設定を使用してデフォルトを選択します。
	//  - minimal: './component/index.js' を './component' に短縮します。
	//  - index: ./component/index.js' を './component/index' に短縮します。
	//  - js: パスの末尾を短くしないでください。拡張子 `.js` または `.ts` を含めます。
	"typescript.preferences.importModuleSpecifierEnding": "auto",
	// 使用可能な自動インポートについて 'package.json' の依存関係の検索を有効または無効にします。
	//  - auto: パフォーマンスの推定影響に基づいて依存関係を検索します。
	//  - on: 常に依存関係を検索します。
	//  - off: 依存関係を検索しないでください。
	"typescript.preferences.includePackageJsonAutoImports": "auto",
	// JSX 属性補完向けに優先されるスタイル。
	//  - auto: プロパティの種類に基づいて属性名の後に '={}' または '=""' を挿入します。文字列属性に使用される引用符の種類を制御するには、`typescript.preferences.quoteStyle` を参照してください。
	//  - braces: 属性名の後に `={}` を挿入します。
	//  - none: 属性名の挿入のみ。
	"typescript.preferences.jsxAttributeCompletionStyle": "auto",
	// インポートの順序を制御する詳細な設定です。
	"typescript.preferences.organizeImports": {},
	// 可能な場合は、`type` キーワードを自動インポートに含めます。ワークスペースで TypeScript 5.3 以降を使用する必要があります。
	"typescript.preferences.preferTypeOnlyAutoImports": false,
	// 迅速な修正の使用で優先される引用符のスタイル。
	//  - auto: 既存のコードから引用符の種類を推測する
	//  - single: 常に単一引用符 `'` を使用します。
	//  - double: 常に二重引用符 `"` を使用します。
	"typescript.preferences.quoteStyle": "auto",
	// JSX タグの場合は、シンボルの名前を変更するのではなく、一致するタグの名前を変更します。ワークスペースで TypeScript 5.1 以降を使用する必要があります。
	"typescript.preferences.renameMatchingJsxTags": true,
	// 設定 'typescript.preferences.renameShorthandProperties' は非推奨になりました。'typescript.preferences.useAliasesForRenames' をお勧めします
	// 名前の変更時にオブジェクトの省略形のプロパティのエイリアスの導入を有効または無効にします。
	"typescript.preferences.renameShorthandProperties": true,
	// 名前の変更時にオブジェクトの省略形のプロパティのエイリアスの導入を有効または無効にします。
	"typescript.preferences.useAliasesForRenames": true,
	// 代わりに [ソース定義に移動] をトリガーすることで、可能な場合は [ソース定義に移動] で型宣言ファイルを回避します。これにより、[ソース定義に移動] をマウス ジェスチャでトリガーできます。
	"typescript.preferGoToSourceDefinition": false,
	// TypeScript ファイルで CodeLens の参照を有効/無効にします。
	"typescript.referencesCodeLens.enabled": false,
	// 有効および無効は、TypeScript ファイル内のすべての関数で CodeLens を参照します。
	"typescript.referencesCodeLens.showOnAllFunctions": false,
	// スタイル チェックを警告として報告します。
	"typescript.reportStyleChecksAsWarnings": true,
	// 自動インポートの提案を有効または無効にします。
	"typescript.suggest.autoImports": true,
	// クラス メンバーのスニペットの入力候補を有効または無効にします。
	"typescript.suggest.classMemberSnippets.enabled": true,
	// パラメーター シグネチャを含む完全な関数。
	"typescript.suggest.completeFunctionCalls": false,
	// JSDoc のコメントを完成させるための提案を有効/無効にします。
	"typescript.suggest.completeJSDocs": true,
	// オートコンプリートの提案を有効/無効にします。
	"typescript.suggest.enabled": true,
	// オプションのチェーン呼び出しを挿入する定義されていない可能性のある値で入力候補を表示することを有効または無効にします。厳密な null チェックを有効にする必要があります。
	"typescript.suggest.includeAutomaticOptionalChainCompletions": true,
	// 部分的に入力されたインポート ステートメントで、自動インポート形式の入力候補を有効または無効にします。
	"typescript.suggest.includeCompletionsForImportStatements": true,
	// JSDoc テンプレートの `@returns` 注釈の生成を有効または無効にします。
	"typescript.suggest.jsdoc.generateReturns": true,
	// オブジェクト リテラル内のメソッドのスニペット補完を有効または無効にします。
	"typescript.suggest.objectLiteralMethodSnippets.enabled": true,
	// import ステートメントや require 呼び出しでパスの提案を有効/無効にします。
	"typescript.suggest.paths": true,
	// エディター内で TypeScript ファイルの診断の提案を有効または無効にします。
	"typescript.suggestionActions.enabled": true,
	// VS Code の JavaScript と TypeScript のサポートを向上させるために、ときどき行われるアンケートを有効/無効にします。
	"typescript.surveys.enabled": true,
	// tsc タスクの自動検出を制御します。
	//  - on: ビルドとウォッチ、両方のタスクを作成します。
	//  - off: この機能を無効にします。
	//  - build: 単一の実行コンパイルタスクのみを作成します。
	//  - watch: コンパイルタスクとウォッチタスクのみを作成します。
	"typescript.tsc.autoDetect": "on",
	// IntelliSense に使用する、TypeScript インストールの下にある tsserver および lib*.d.ts ファイルのフォルダー パスを指定します。例: './node_modules/typescript/lib'。
	// 
	// - ユーザー設定として指定した場合は、'typescript.tsdk' からの TypeScript バージョンによって組み込みの TypeScript バージョンが自動的に置き換えられます。
	// - ワークスペース設定として指定した場合は、'typescript.tsdk' で 'TypeScript: Select TypeScript version' コマンドを使用することによって、IntelliSense のためにそのワークスペース バージョンの TypeScript を使用するように切り替えることができます。
	// 
	// TypeScript バージョンの管理について詳しくは、[TypeScript のドキュメント](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) をご覧ください。
	"typescript.tsdk": "",
	// TypeScript でリージョン ベースの診断を有効にします。ワークスペースで TypeScript 5.6+ 以降を使用する必要があります。
	"typescript.tsserver.enableRegionDiagnostics": true,
	// ディレクトリへの TS サーバーのパフォーマンスのトレースを有効にします。これらのトレース ファイルは TS サーバーのパフォーマンスの問題を診断するために使用できます。ログには、プロジェクトのファイル パス、ソース コード、その他の潜在的に機密性の高い情報が含まれている場合があります。
	"typescript.tsserver.enableTracing": false,
	// (試験的) プロジェクト全体のエラー報告を有効にします。
	"typescript.tsserver.experimental.enableProjectDiagnostics": false,
	// Please use the `typescript.tsserver.watchOptions` setting instead.
	// TypeScript のものの代わりに VS Code のファイル ウォッチャーを使用します。ワークスペースで TypeScript 5.4+ 以降を使用する必要があります。
	"typescript.tsserver.experimental.useVsCodeWatcher": true,
	// ファイルへの TS サーバーのログを有効にします。このログは TS サーバーの問題を診断するために使用できます。ログには、プロジェクトのファイルパス、ソースコード、その他の潜在的に機密性の高い情報が含まれている場合があります。
	"typescript.tsserver.log": "off",
	// TypeScript サーバー プロセスに割り当てるメモリの最大量 (MB 単位)。4 GB を超えるメモリ制限を使用するには、'#typescript.tsserver.nodePath#' を使用して、カスタム Node インストールを使用して TS Server を実行します。
	"typescript.tsserver.maxTsServerMemory": 3072,
	// カスタム Node インストールで TS Server を実行します。これは、Node 実行可能ファイルへのパス、または VS Code に Node インストールを検出させるには `node` へのパスになります。
	"typescript.tsserver.nodePath": "",
	// TypeScript 言語サービス プラグインを検出する追加のパス。
	"typescript.tsserver.pluginPaths": [],
	// この設定は、'typescript.tsserver.useSyntaxServer' のため廃止されました。
	// 折りたたみの計算やドキュメント シンボルのコンピューティングなど、構文に関連する操作に迅速に応答できる別の TypeScript サーバーの作成を有効または無効にします。
	"typescript.tsserver.useSeparateSyntaxServer": true,
	// TypeScript がコード折りたたみの計算などの構文関連操作をより迅速に処理するため、専用サーバーを起動するかどうかを制御します。
	//  - always: 軽量化構文サーバーを使用して、すべての IntelliSense 操作を処理します。この構文サーバーは、開いているファイルに対してのみ IntelliSense を提供します。
	//  - never: 専用の構文サーバーを使用しないでください。単一のサーバーを使用して、すべての IntelliSense 操作を処理します。
	//  - auto: 構文操作専用の完全なサーバーと、軽量化サーバーの両方を生成します。構文サーバーは、プロジェクトの読み込み中に構文操作を高速化し、IntelliSense を提供するために使用されます。
	"typescript.tsserver.useSyntaxServer": "auto",
	// ファイルとディレクトリを追跡するために使用する監視方法を構成します。
	"typescript.tsserver.watchOptions": "vscode",
	// Web 上でプロジェクト全体の IntelliSense を有効または無効にします。VS Code が信頼されたコンテキストで実行されている必要があります。
	"typescript.tsserver.web.projectWideIntellisense.enabled": true,
	// プロジェクト全体の IntelliSense が有効になっている場合でも、Web 上のセマンティック エラーを抑制します。これは、プロジェクト全体の IntelliSense が有効になっていないか使用できない場合、常にオンです。`typescript.tsserver.web.projectWideIntellisense.enabled` を参照してください
	"typescript.tsserver.web.projectWideIntellisense.suppressSemanticErrors": false,
	// Web でパッケージの取得を有効/無効にします。これにより、インポートされたパッケージの IntelliSense が有効になります。`typescript.tsserver.web.projectWideIntellisense.enabled` が必要です。Ssfari では現在サポートされていません。
	"typescript.tsserver.web.typeAcquisition.enabled": true,
	// VS Code で名前変更や移動を行ったファイルのインポート パスの自動更新を有効または無効にします。
	//  - prompt: 名前を変更するときに確認をします。
	//  - always: 常に自動的にパスを更新します。
	//  - never: パスの名前を変更せず確認も行いません。
	"typescript.updateImportsOnFileMove.enabled": "prompt",
	// TypeScript の検証を有効/無効にします。
	"typescript.validate.enable": true,
	// [ワークスペース内のシンボルに移動] の結果で、ライブラリ ファイルから取得したシンボルを除外します。ワークスペースで TypeScript 5.3 以降を使用する必要があります。
	"typescript.workspaceSymbols.excludeLibrarySymbols": true,
	// [ワークスペース内のシンボルへの移動](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name) でどのファイルを検索するかを制御します。
	//  - allOpenProjects: 開いているすべての JavaScript プロジェクトまたは TypeScript プロジェクトでシンボルを検索します。
	//  - currentProject: 現在の JavaScript または TypeScript プロジェクトからのみシンボルを検索します。
	"typescript.workspaceSymbols.scope": "allOpenProjects",
	// スレッドが解決されたときにコメント スレッドを折りたたむかどうかを制御します。
	"comments.collapseOnResolve": true,
	// コメント ウィジェットをスクロールするか展開するかを制御します。
	"comments.maxHeight": true,
	// この設定は'comments.openView' を優先し、非推奨です。
	// コメント パネルを開くタイミングを制御します。
	"comments.openPanel": "openOnSessionStartWithComments",
	// コメント パネルが開くべきタイミングを制御します。
	//  - never: コメント ビューが開くことはありません。
	//  - file: コメント付きのファイルがアクティブになると、コメント ビューが開きます。
	//  - firstFile: このセッション中にコメント ビューがまだ開いていない場合は、コメントを含むファイルがアクティブになっているセッション中に初めて開きます。
	//  - firstFileUnresolved: このセッション中にコメント ビューがまだ開かれていない場合、コメントが解決されない場合は、コメントを含むファイルがアクティブなセッション中に初めて開きます。
	"comments.openView": "firstFile",
	// コメント タイムスタンプ ('1 日前' など) に相対時間を使用するかどうかを決定します。
	"comments.useRelativeTime": true,
	// コメント範囲とコメントを含むエディターで、コメント バーとコメント スレッドを表示するかどうかを制御します。コメントはコメント ビューを介して引き続きアクセスでき、コマンド "Comments: Toggle Editor Commenting" の切り替えを実行するのと同じ方法でコメントがオンに切り替わります。
	"comments.visible": true,
	// 任意のファイルにブレークポイントを設定できるようにします。
	"debug.allowBreakpointsEverywhere": false,
	// ゲッターなど、遅延解決される変数をデバッガーによって自動的に解決および展開するかどうかを制御します。
	//  - auto: スクリーン リーダー最適化モードの場合、lazy 変数を自動的に展開します。
	//  - on: 常に lazy 変数を自動的に展開します。
	//  - off: lazy 変数を自動的に展開しません。
	"debug.autoExpandLazyVariables": "auto",
	// デバッグ セッションの終了時に、そのセッションに関連付けられているすべての読み取り専用タブが閉じられます
	"debug.closeReadonlyTabsOnEnd": false,
	// アクティブなデバッグ セッションがある場合に、ウィンドウを閉じたときに確認を行うかどうかを制御します。
	//  - never: 確認しません。
	//  - always: デバッグ セッションがあるかどうかを常に確認します。
	"debug.confirmOnExit": "never",
	// デバッグ コンソールの入力候補を受け入れるかどうかを制御します。また、入力は、デバッグコンソールに入力された内容を評価するためにも使用されます。
	"debug.console.acceptSuggestionOnEnter": "off",
	// デバッグ セッションの終了時にデバッグ コンソールを自動的に閉じるかどうかを制御します。
	"debug.console.closeOnEnd": false,
	// デバッグ コンソールで同一の行を折りたたみ、出現回数をバッジ付きで表示するかどうか制御します。
	"debug.console.collapseIdenticalLines": true,
	// デバッグ コンソールのフォント ファミリを制御します。
	"debug.console.fontFamily": "default",
	// デバッグ コンソール内のフォント サイズをピクセル単位で制御します。
	"debug.console.fontSize": 14,
	// 以前に型指定された入力をデバッグ コンソールが提案する必要があるかどうかを制御します。
	"debug.console.historySuggestions": true,
	// デバッグ コンソール内での行の高さをピクセル単位で制御します。フォント サイズから行の高さを計算するには 0 を使用します。
	"debug.console.lineHeight": 0,
	// 行をデバッグ コンソールで折り返す必要があるかどうかを制御します。
	"debug.console.wordWrap": true,
	// 逆アセンブリ ビューでソース コードを表示する。
	"debug.disassemblyView.showSourceCode": true,
	// デバッガーがアクティブな場合のステータス バーの色。
	"debug.enableStatusBarColor": true,
	// デバッガーが中断したときにエディターにフォーカスを設定するかどうかを制御します。
	"debug.focusEditorOnBreak": true,
	// デバッガーが中断したときにワークベンチ ウィンドウにフォーカスするかどうかを制御します。
	"debug.focusWindowOnBreak": true,
	// マウスのミドル ボタンでエディターの余白をクリックするときに実行するアクションを制御します。
	//  - logpoint: ログポイントを追加します。
	//  - conditionalBreakpoint: 条件付きブレークポイントを追加します。
	//  - triggeredBreakpoint: トリガーされたブレークポイントを追加します。
	//  - none: アクションを実行しないでください。
	"debug.gutterMiddleClickAction": "logpoint",
	// デバッグがアクティブな間は、[実行とデバッグ] ビューのタイトル バーで [デバッグの開始] コントロールを非表示にします。`debug.toolBarLocation` が `docked` でない場合にのみ関連します。
	"debug.hideLauncherWhileDebugging": false,
	// Hide the warning shown when a `preLaunchTask` has been running for a while.
	"debug.hideSlowPreLaunchWarning": false,
	// デバッグ中にエディターの行内に変数値を表示します。
	//  - on: デバッグ中に変数値を常にインラインでエディターに表示します。
	//  - off: デバッグ中に変数値をインラインでエディターに表示しません。
	//  - auto: 言語でインライン値の場所がサポートされている場合、デバッグ中に変数値をインラインでエディターに表示します。
	"debug.inlineValues": "auto",
	// いつ内部デバッグ コンソールを開くかを制御します。
	"debug.internalConsoleOptions": "openOnFirstSessionStart",
	// preLaunchTask の実行後にエラーが発生した場合の処理を制御します。
	//  - debugAnyway: タスクのエラーを無視し、デバッグを開始します。
	//  - showErrors: 問題ビューを表示し、デバッグを開始しません。
	//  - prompt: ユーザーに確認します。
	//  - abort: デバッグを取り消します。
	"debug.onTaskErrors": "prompt",
	// いつデバッグ ビューを開くかを制御します。
	"debug.openDebug": "openOnDebugBreak",
	// デバッグ セッションの終了時にエクスプローラー ビューを自動的に開きます。
	"debug.openExplorerOnEnd": false,
	// デバッグ セッションを開始する前にどのエディターを保存するかを制御します。
	//  - allEditorsInActiveGroup: デバッグ セッションを開始する前に、アクティブなグループ内のすべてのエディターを保存します。
	//  - nonUntitledEditorsInActiveGroup: デバッグ セッションを開始する前に、アクティブなグループ内のすべてのエディターを、無題のものを除いて保存します。
	//  - none: デバッグ セッションを開始する前にエディターを保存しません。
	"debug.saveBeforeStart": "allEditorsInActiveGroup",
	// ブレークポイントを概要ルーラーに表示するかどうかを制御します。
	"debug.showBreakpointsInOverviewRuler": false,
	// デバッグ中にインライン ブレークポイント候補の装飾をエディターに表示するかどうかを制御します。
	"debug.showInlineBreakpointCandidates": true,
	// いつデバッグ ステータス バーを表示するかを制御します。
	//  - never: 今後ステータス バーにデバッグを表示しない
	//  - always: ステータス バーにデバッグを常に表示する
	//  - onFirstSessionStart: 初めてデバッグが開始されたときのみステータス バーにデバッグを表示する
	"debug.showInStatusBar": "onFirstSessionStart",
	// デバッグ ツール バーにデバッグのサブセッションを表示するかどうかを制御します。false に設定されている場合、サブセッションに対する停止コマンドによって、親セッションも停止します。
	"debug.showSubSessionsInToolBar": false,
	// デバッグ セッション中に変数の種類を変数ペインに表示する
	"debug.showVariableTypes": false,
	// 統合または外部ターミナルで新しいデバッグ セッションを開始する前に、ターミナルをクリアします。
	"debug.terminal.clearBeforeReusing": false,
	// デバッグ ツール バーの場所を制御します。すべてのビューで `floating`、デバッグ ビューで `docked`、`commandCenter` (`window.commandCenter` が必要)、または `hidden` のいずれかを指定します。
	//  - floating: すべてのビューにデバッグ ツール バーを表示します。
	//  - docked: デバッグ ビューにのみデバッグ ツール バーを表示します。
	//  - commandCenter: `(試験段階)` コマンド センターにデバッグ ツール バーを表示します。
	//  - hidden: デバッグ ツール バーを表示しません。
	"debug.toolBarLocation": "floating",
	// グローバル デバッグ起動構成。ワークスペースで共有されている 'launch.json' の代わりに使用する必要があります。
	"launch": {
		"configurations": [],
		"compounds": []
	},
	// `testing.followRunningTest` がオンの場合、実行されたテストが常に公開されます。この設定をオフにすると、失敗したテストのみ公開されます。
	"testing.alwaysRevealTestOnStateChange": false,
	// エラーのピーク ビューを自動的に開くタイミングを構成します。
	//  - failureAnywhere: エラーの場所に関係なく、自動的に開きます。
	//  - failureInVisibleDocument: 参照可能なドキュメントでテストが失敗したときに自動的に開きます。
	//  - never: 自動的に開くことはありません。
	"testing.automaticallyOpenPeekView": "failureInVisibleDocument",
	// 連続実行モードでピーク ビューを自動的に開くかどうかを制御します。
	"testing.automaticallyOpenPeekViewDuringAutoRun": false,
	// テストが期限切れとしてマークされ、新しい実行を開始してから待機する時間 (ミリ秒単位)。
	"testing.autoRun.delay": 1000,
	// アクティビティ バーの [テスト] アイコンのカウント バッジを制御します。
	//  - failed: 失敗したテストの数を表示する
	//  - off: テスト カウント バッジを無効にする
	//  - passed: 成功したテストの数を表示する
	//  - skipped: スキップされたテストの数を表示する
	"testing.countBadge": "failed",
	// テスト カバレッジ バーの割合に使用する色を構成します。
	"testing.coverageBarThresholds": {
		"red": 0,
		"yellow": 60,
		"green": 90
	},
	// カバレッジ ツール バーをエディターに表示するかどうかを制御します。
	"testing.coverageToolbarEnabled": false,
	// とじしろ内のテスト デコレーションをクリックした場合に実行する操作を制御します。
	//  - run: テストを実行します。
	//  - debug: テストをデバッグします。
	//  - runWithCoverage: カバレッジを使用してテストを実行します。
	//  - contextMenu: その他のオプションについては、コンテキスト メニューを開きます。
	"testing.defaultGutterClickAction": "run",
	// テスト カバレッジに対して既定で表示される割合を構成します。
	//  - totalCoverage: 結合されたステートメント、関数、ブランチ カバレッジの計算。
	//  - statement: ステートメント カバレッジ。
	//  - minimum: ステートメント、関数、ブランチ カバレッジの最小値。
	"testing.displayedCoveragePercent": "totalCoverage",
	// 実行中のテストをテスト エクスプローラー ビューでフォローするかどうかを制御します。
	"testing.followRunningTest": true,
	// テスト デコレーションがエディターのとじしろに表示するかどうかを制御します。
	"testing.gutterEnabled": true,
	// いつテスト ビューを開くかを制御します。
	//  - neverOpen: テスト ビューを自動的に開かない
	//  - openOnTestStart: テストの開始時にテスト結果ビューを開く
	//  - openOnTestFailure: テストの失敗時にテスト結果ビューを開く
	//  - openExplorerOnTestStart: テストの開始時にテスト エクスプローラーを開く
	"testing.openTesting": "openOnTestStart",
	// テストを実行する前にすべてのダーティ エディターを保存するかどうかを制御します。
	"testing.saveBeforeTest": true,
	// すべてのテストの実行からメッセージを表示するかどうかを制御します。
	"testing.showAllMessages": false,
	// エクスプローラー ビューでテスト カバレッジをダウンさせるかどうか。
	"testing.showCoverageInExplorer": true,
	// CSS プロパティの完了時に行末にセミコロンを挿入します。
	"css.completion.completePropertyWithSemicolon": true,
	// 既定では、VS Codeは CSS プロパティが選択されるとプロパティ値の補完をトリガーします。この設定を使うことで、この動作は無効にできます。
	"css.completion.triggerPropertyValueCompletion": true,
	// [カスタム データ形式](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md) に従って JSON ファイルを指す相対ファイル パスの一覧。
	// 
	// VS Code では、起動時にカスタム データを読み込んで、ユーザーが JSON ファイルに指定する CSS カスタム プロパティ (変数)、アットルール、擬似クラス、擬似要素の CSS サポートを強化します。
	// 
	// ファイル パスはワークスペースに対して相対的であり、ワークスペース フォルダーの設定のみが考慮されます。
	"css.customData": [],
	// ルールと同じ行に中かっこを配置するか ('collapse')、または中かっこを独自の行 ('expand') に配置します。
	"css.format.braceStyle": "collapse",
	// 既定の CSS フォーマッタを有効または無効にします。
	"css.format.enable": true,
	// '#css.format.preserveNewLines#' が有効な場合に、1 つのチャンクに保持される改行の最大数。
	"css.format.maxPreserveNewLines": null,
	// ルールセットを空白行で区切ります。
	"css.format.newlineBetweenRules": true,
	// セレクターを改行で区切ります。
	"css.format.newlineBetweenSelectors": true,
	// 要素の前に既存の改行を保持するかどうか。
	"css.format.preserveNewLines": true,
	// セレクターの区切り記号 '>'、'+'、'~' (例: 'a > b') の周囲に空白文字を付けます。
	"css.format.spaceAroundSelectorSeparator": false,
	// CSS ホバー時にプロパティと値のドキュメントを表示します。
	"css.hover.documentation": true,
	// CSS ホバー時に MDN への参照を表示します。
	"css.hover.references": true,
	// パラメーター数が無効です。
	"css.lint.argumentsInColorFunction": "error",
	// `padding` や `border` を使用するときに `width` や `height` を使用しないでください
	"css.lint.boxModel": "ignore",
	// ベンダー プレフィックス を使用するときは、他すべてのベンダー プレフィックスも必ず含めてください。
	"css.lint.compatibleVendorPrefixes": "ignore",
	// 重複するスタイル定義を使用しないでください。
	"css.lint.duplicateProperties": "ignore",
	// 空の規則セットを使用しないでください。
	"css.lint.emptyRules": "warning",
	// `float` の使用を避けてください。float は脆弱な CSS につながり、レイアウトの一部が変更されたときに CSS が破損しやすくなります。
	"css.lint.float": "ignore",
	// `@font-face` 規則で `src` プロパティと `font-family` プロパティを定義する必要があります。
	"css.lint.fontFaceProperties": "warning",
	// Hex 色は 3、4、6、または 8 桁の 16 進数で構成する必要があります。
	"css.lint.hexColorLength": "error",
	// セレクターには ID を含めないでください。これらの規則と HTML の結合が密接すぎます。
	"css.lint.idSelector": "ignore",
	// IE ハックは、IE7 以前をサポートする場合にのみ必要です。
	"css.lint.ieHack": "ignore",
	// `!important` の使用を避けてください。これは CSS 全体の特定性が制御不能になり、リファクタリングが必要になります。
	"css.lint.important": "ignore",
	// 複数の Import ステートメントを同時に読み込むことはできません。
	"css.lint.importStatement": "ignore",
	// display によってプロパティを無視します。例: `display: inline` の場合、`width`、`height`、`margin-top`、`margin-bottom`、`float` プロパティには効果がありません。
	"css.lint.propertyIgnoredDueToDisplay": "warning",
	// ユニバーサル セレクター (`*`) を使用すると処理速度が低下することが知られています。
	"css.lint.universalSelector": "ignore",
	// 不明な @ 規則。
	"css.lint.unknownAtRules": "warning",
	// 不明なプロパティ。
	"css.lint.unknownProperties": "warning",
	// 不明なベンダー固有のプロパティ。
	"css.lint.unknownVendorSpecificProperties": "ignore",
	// `UnknownProperties` ルールに対して検証されていないプロパティの一覧です。
	"css.lint.validProperties": [],
	// ベンダー プレフィックスを使用するとき、標準のプロパティーも含めます。
	"css.lint.vendorPrefix": "warning",
	// 0 に単位は必要ありません。
	"css.lint.zeroUnits": "ignore",
	// VS Code と CSS 言語サーバー間の通信をトレースします。
	"css.trace.server": "off",
	// すべての検証を有効または無効にします。
	"css.validate": true,
	// CSS プロパティの完了時に行末にセミコロンを挿入します。
	"less.completion.completePropertyWithSemicolon": true,
	// 既定では、VS Codeは CSS プロパティが選択されるとプロパティ値の補完をトリガーします。この設定を使うことで、この動作は無効にできます。
	"less.completion.triggerPropertyValueCompletion": true,
	// ルールと同じ行に中かっこを配置するか ('collapse')、または中かっこを独自の行 ('expand') に配置します。
	"less.format.braceStyle": "collapse",
	// 既定の LESS フォーマッタを有効または無効にします。
	"less.format.enable": true,
	// '#less.format.preserveNewLines#' が有効な場合に、1 つのチャンクに保持される改行の最大数。
	"less.format.maxPreserveNewLines": null,
	// ルールセットを空白行で区切ります。
	"less.format.newlineBetweenRules": true,
	// セレクターを改行で区切ります。
	"less.format.newlineBetweenSelectors": true,
	// 要素の前に既存の改行を保持するかどうか。
	"less.format.preserveNewLines": true,
	// セレクターの区切り記号 '>'、'+'、'~' (例: 'a > b') の周囲に空白文字を付けます。
	"less.format.spaceAroundSelectorSeparator": false,
	// LESS ホバー時にプロパティと値のドキュメントを表示します。
	"less.hover.documentation": true,
	// LESS ホバー時に MDN への参照を表示します。
	"less.hover.references": true,
	// パラメーター数が無効です。
	"less.lint.argumentsInColorFunction": "error",
	// `padding` や `border` を使用するときに `width` や `height` を使用しないでください
	"less.lint.boxModel": "ignore",
	// ベンダー プレフィックス を使用するときは、他すべてのベンダー プレフィックスも必ず含めてください。
	"less.lint.compatibleVendorPrefixes": "ignore",
	// 重複するスタイル定義を使用しないでください。
	"less.lint.duplicateProperties": "ignore",
	// 空の規則セットを使用しないでください。
	"less.lint.emptyRules": "warning",
	// `float` の使用を避けてください。float は脆弱な CSS につながり、レイアウトの一部が変更されたときに CSS が破損しやすくなります。
	"less.lint.float": "ignore",
	// `@font-face` 規則で `src` プロパティと `font-family` プロパティを定義する必要があります。
	"less.lint.fontFaceProperties": "warning",
	// Hex 色は 3、4、6、または 8 桁の 16 進数で構成する必要があります。
	"less.lint.hexColorLength": "error",
	// セレクターには ID を含めないでください。これらの規則と HTML の結合が密接すぎます。
	"less.lint.idSelector": "ignore",
	// IE ハックは、IE7 以前をサポートする場合にのみ必要です。
	"less.lint.ieHack": "ignore",
	// `!important` の使用を避けてください。これは CSS 全体の特定性が制御不能になり、リファクタリングが必要になります。
	"less.lint.important": "ignore",
	// 複数の Import ステートメントを同時に読み込むことはできません。
	"less.lint.importStatement": "ignore",
	// display によってプロパティを無視します。例: `display: inline` の場合、`width`、`height`、`margin-top`、`margin-bottom`、`float` プロパティには効果がありません。
	"less.lint.propertyIgnoredDueToDisplay": "warning",
	// ユニバーサル セレクター (`*`) を使用すると処理速度が低下することが知られています。
	"less.lint.universalSelector": "ignore",
	// 不明な @ 規則。
	"less.lint.unknownAtRules": "warning",
	// 不明なプロパティ。
	"less.lint.unknownProperties": "warning",
	// 不明なベンダー固有のプロパティ。
	"less.lint.unknownVendorSpecificProperties": "ignore",
	// `UnknownProperties` ルールに対して検証されていないプロパティの一覧です。
	"less.lint.validProperties": [],
	// ベンダー プレフィックスを使用するとき、標準のプロパティーも含めます。
	"less.lint.vendorPrefix": "warning",
	// 0 に単位は必要ありません。
	"less.lint.zeroUnits": "ignore",
	// すべての検証を有効または無効にします。
	"less.validate": true,
	// CSS プロパティの完了時に行末にセミコロンを挿入します。
	"scss.completion.completePropertyWithSemicolon": true,
	// 既定では、VS Codeは CSS プロパティが選択されるとプロパティ値の補完をトリガーします。この設定を使うことで、この動作は無効にできます。
	"scss.completion.triggerPropertyValueCompletion": true,
	// ルールと同じ行に中かっこを配置するか ('collapse')、または中かっこを独自の行 ('expand') に配置します。
	"scss.format.braceStyle": "collapse",
	// 既定の SCSS フォーマッタを有効または無効にします。
	"scss.format.enable": true,
	// '#scss.format.preserveNewLines#' が有効な場合に、1 つのチャンクに保持される改行の最大数。
	"scss.format.maxPreserveNewLines": null,
	// ルールセットを空白行で区切ります。
	"scss.format.newlineBetweenRules": true,
	// セレクターを改行で区切ります。
	"scss.format.newlineBetweenSelectors": true,
	// 要素の前に既存の改行を保持するかどうか。
	"scss.format.preserveNewLines": true,
	// セレクターの区切り記号 '>'、'+'、'~' (例: 'a > b') の周囲に空白文字を付けます。
	"scss.format.spaceAroundSelectorSeparator": false,
	// SCSS ホバー時にプロパティと値のドキュメントを表示します。
	"scss.hover.documentation": true,
	// SCSS ホバー時に MDN への参照を表示します。
	"scss.hover.references": true,
	// パラメーター数が無効です。
	"scss.lint.argumentsInColorFunction": "error",
	// `padding` や `border` を使用するときに `width` や `height` を使用しないでください
	"scss.lint.boxModel": "ignore",
	// ベンダー プレフィックス を使用するときは、他すべてのベンダー プレフィックスも必ず含めてください。
	"scss.lint.compatibleVendorPrefixes": "ignore",
	// 重複するスタイル定義を使用しないでください。
	"scss.lint.duplicateProperties": "ignore",
	// 空の規則セットを使用しないでください。
	"scss.lint.emptyRules": "warning",
	// `float` の使用を避けてください。float は脆弱な CSS につながり、レイアウトの一部が変更されたときに CSS が破損しやすくなります。
	"scss.lint.float": "ignore",
	// `@font-face` 規則で `src` プロパティと `font-family` プロパティを定義する必要があります。
	"scss.lint.fontFaceProperties": "warning",
	// Hex 色は 3、4、6、または 8 桁の 16 進数で構成する必要があります。
	"scss.lint.hexColorLength": "error",
	// セレクターには ID を含めないでください。これらの規則と HTML の結合が密接すぎます。
	"scss.lint.idSelector": "ignore",
	// IE ハックは、IE7 以前をサポートする場合にのみ必要です。
	"scss.lint.ieHack": "ignore",
	// `!important` の使用を避けてください。これは CSS 全体の特定性が制御不能になり、リファクタリングが必要になります。
	"scss.lint.important": "ignore",
	// 複数の Import ステートメントを同時に読み込むことはできません。
	"scss.lint.importStatement": "ignore",
	// display によってプロパティを無視します。例: `display: inline` の場合、`width`、`height`、`margin-top`、`margin-bottom`、`float` プロパティには効果がありません。
	"scss.lint.propertyIgnoredDueToDisplay": "warning",
	// ユニバーサル セレクター (`*`) を使用すると処理速度が低下することが知られています。
	"scss.lint.universalSelector": "ignore",
	// 不明な @ 規則。
	"scss.lint.unknownAtRules": "warning",
	// 不明なプロパティ。
	"scss.lint.unknownProperties": "warning",
	// 不明なベンダー固有のプロパティ。
	"scss.lint.unknownVendorSpecificProperties": "ignore",
	// `UnknownProperties` ルールに対して検証されていないプロパティの一覧です。
	"scss.lint.validProperties": [],
	// ベンダー プレフィックスを使用するとき、標準のプロパティーも含めます。
	"scss.lint.vendorPrefix": "warning",
	// 0 に単位は必要ありません。
	"scss.lint.zeroUnits": "ignore",
	// すべての検証を有効または無効にします。
	"scss.validate": true,
	// 有効にした場合、拡張機能の更新を自動的に確認します。拡張機能に更新がある場合は、拡張機能ビューで古くなった拡張機能として表示されます。更新は Microsoft オンライン サービスから取得されます。
	"extensions.autoCheckUpdates": true,
	// 拡張機能の自動更新の動作を制御します。更新プログラムは、Microsoft オンライン サービスからフェッチされます。
	//  - true: すべての拡張機能の更新プログラムを自動的にダウンロードしてインストールします。
	//  - onlyEnabledExtensions: 有効にした拡張機能に対してのみ、更新プログラムを自動的にダウンロードしてインストールします。
	//  - false: 拡張機能は自動的には更新されません。
	"extensions.autoUpdate": true,
	// 有効にした場合、拡張機能の詳細を表示したエディターは拡張機能ビューから移動すると自動的に閉じられるようになります。
	"extensions.closeExtensionDetailsOnViewChange": false,
	// 拡張機能がここに表示されている場合、その拡張機能が URI を処理するときに確認プロンプトは表示されません。
	"extensions.confirmedUriHandlerExtensionIds": [],
	// 別の拡張機能ホスト プロセスで実行するように拡張機能を構成します。
	"extensions.experimental.affinity": {},
	// 有効にすると、タイムアウト後に `onStartupFinished` アクティブ化イベントを宣言する拡張機能がアクティブ化されます。
	"extensions.experimental.deferredStartupFinishedActivation": false,
	// 有効にすると、クイック アクセスを使用して拡張機能を検索し、そこから問題を報告できます。
	"extensions.experimental.issueQuickAccess": true,
	// 有効にした場合、拡張機能の推奨事項の通知を表示しません。
	"extensions.ignoreRecommendations": false,
	// この設定は非推奨化されています。extensions.ignoreRecommendations 設定を使用して、推奨事項の通知を制御します。既定で推奨ビューを非表示にするには、拡張機能ビューの可視性アクションを使用します。
	// 
	"extensions.showRecommendationsOnlyOnDemand": false,
	// 拡張機能の信頼されていないワークペースのサポートをオーバーライドします。`true` を使用する拡張機能は常に有効になります。`limited` を使用する拡張機能は常に有効になり、信頼を必要とする機能は拡張子により非表示にされます。`false` を使用している拡張機能は、ワークスペースが信頼されている場合にのみ有効になります。
	"extensions.supportUntrustedWorkspaces": {},
	// 拡張機能の仮想ワークスぺースのサポートをオーバーライドします。
	"extensions.supportVirtualWorkspaces": {},
	// 有効にすると、拡張機能はインストールされる前に署名されているかどうか検証されます。
	"extensions.verifySignature": true,
	// web worker 拡張機能ホストを有効にします。
	//  - true: Web Worker 拡張機能のホストは常に起動されます。
	//  - false: Web Worker 拡張機能のホストは起動されません。
	//  - auto: Web ワーカー拡張機能のホストは、Web 拡張機能で必要とされるときに起動されます。
	"extensions.webWorker": "auto",
	// 出力ビューでスマート スクロール機能を有効/無効にします。スマート スクロールを使用する場合、出力ビューをクリックすると自動的にスクロールがロックされ、最後の行をクリックするとロックが解除されます。
	"output.smartScroll.enabled": true,
	// 同期中に無視される拡張機能の一覧です。拡張機能の識別子は常に `${publisher}.${name}` です。たとえば、`vscode.csharp` です。
	"settingsSync.ignoredExtensions": [],
	// 同期中に無視される設定を構成します。
	"settingsSync.ignoredSettings": [],
	// 各プラットフォームのキー バインドを同期します。
	"settingsSync.keybindingsPerPlatform": true,
	// インタラクティブ ウィンドウのコード セルを既定で折りたたむかどうかを制御します。
	"interactiveWindow.collapseCellInputCode": "fromEditor",
	// ノートブック ファイルがホット リロードの用にバックアップされなくなるノートブック出力サイズの制限 (KB 単位)。無制限の場合は 0 を使用します。
	"notebook.backup.sizeLimit": 10000,
	// 有効にすると、ノートブックの階層リンクにコード セルが含まれます。
	"notebook.breadcrumbs.showCodeCells": true,
	// セル エラーの使用可能な診断を表示します。
	"notebook.cellFailureDiagnostics": true,
	// フォーカスインジケーターが描画されている場所を、セルの境界線または左端余白に沿って制御します。
	"notebook.cellFocusIndicator": "gutter",
	// セルのツールバーを表示するか非表示にするかどうか。
	"notebook.cellToolbarLocation": {
		"default": "right"
	},
	// ポイントしたときまたはクリック時にセルのツールバーを表示するかどうか。
	"notebook.cellToolbarVisibility": "click",
	// ノートブック エディターをコンパクト形式で表示するかどうかを制御します。たとえば、オンにすると、左余白の幅が小さくなります。
	"notebook.compactView": true,
	// 実行中のセルを削除する場合に確認プロンプトを必須とするかどうかを制御します。
	"notebook.confirmDeleteRunningCell": true,
	// 出力アクションを出力ツールバーにレンダリングするかどうかを制御します。
	"notebook.consolidatedOutputButton": true,
	// [実行] ボタンの横にあるドロップダウンで、追加アクションを表示するかどうかを制御します。
	"notebook.consolidatedRunButton": false,
	// その他すべてのフォーマッタ設定よりも優先される、既定のノートブック フォーマッタを定義します。フォーマッタを提供している拡張機能の識別子にする必要があります。
	//  - null: なし
	//  - ms-python.autopep8: Formatting support for Python files using the autopep8 formatter.
	//  - ms-python.black-formatter: Formatting support for Python files using the Black formatter.
	//  - vscode.css-language-features: CSS、LESS、SCSS ファイルに豊富な言語サポートを提供。
	//  - vscode.html-language-features: HTML と Handlebar ファイルに豊富な言語サポートを提供します
	//  - vscode.json-language-features: JSON ファイルに豊富な言語サポートを提供。
	//  - vscode.markdown-language-features: Markdown に豊富な言語サポートを提供。
	//  - vscode.markdown-math: ノートブックのマークダウンに数式サポートを追加します。
	//  - vscode.php-language-features: PHP ファイルに豊富な言語サポートを提供します。
	//  - ms-python.python: Python language support with extension access points for IntelliSense (Pylance), Debugging (Python Debugger), linting, formatting, refactoring, unit tests, and more.
	//  - vscode.typescript-language-features: JavaScript と TypeScript ファイルに豊富な言語サポートを提供。
	//  - pranaygp.vscode-css-peek: Allow peeking to css ID and class strings as definitions from html files to respective CSS. Allows peek and goto definition.
	//  - HTMLHint.vscode-htmlhint: VS Code integration for HTMLHint - A Static Code Analysis Tool for HTML
	//  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
	//  - vscode.configuration-editing: 設定、起動、拡張機能の推奨事項ファイルといった、構成ファイルの機能 (高度な IntelliSense、auto-fixing など) を提供します。
	//  - kevinglasson.cornflakes-linter: Wrapper for Python flake8 linter and associated plugins. It rectifies current issues with displaying ALL flake8 problems in the problems tab.
	//  - vscode.debug-auto-launch: node-debug 拡張がアクティブではないときに自動的にアタッチする機能を補助します。
	//  - vscode.debug-server-ready: デバッグ対象のサーバーが準備完了になったら、URI をブラウザーで開きます。
	//  - ms-python.debugpy: Python Debugger extension using debugpy.
	//  - vscode.emmet: VSCode の Emmet サポート
	//  - vscode.extension-editing: 拡張機能を作成するためのリンティング機能を提供します。
	//  - vscode.git: Git SCM統合
	//  - vscode.git-base: Git の静的コントリビューションとピッカー。
	//  - mhutchie.git-graph: View a Git Graph of your repository, and perform Git actions from the graph.
	//  - vscode.github: VS Code 用 GitHub 機能
	//  - vscode.github-authentication: GitHub 認証プロバイダー
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: VS Code に Gulp 機能を追加する拡張機能。
	//  - vscode.ipynb: Jupyter の .ipynb ノートブック ファイルを開いて読み取るための基本サポートを提供します
	//  - vscode.jake: VS Code に Jake 機能を追加する拡張機能。
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - ms-vscode.live-server: Hosts a local server in your workspace for you to preview your webpages on.
	//  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
	//  - vscode.media-preview: 画像、オーディオ、ビデオの VS Code の組み込みプレビューを提供します
	//  - vscode.merge-conflict: 行内マージ競合のハイライト、コマンドを提供します。
	//  - vscode.microsoft-authentication: Microsoft 認証プロバイダー
	//  - vscode.npm: npm スクリプトのタスクサポートを追加する拡張
	//  - vscode.references-view: サイドバーの独立した安定したビューとして検索結果を参照する
	//  - ms-vscode-remote.remote-wsl: Linux 用 Windows サブシステム (WSL) 内の任意のフォルダーを開き、Visual Studio Codeの完全な機能セットを利用します。
	//  - vscode.search-result: シンタックスハイライトとタブ付き検索結果向け言語機能を提供します。
	//  - vscode.simple-browser: Web コンテンツを表示するための非常に基本的な組み込みの Web ビューです。
	//  - SimonSiefke.svg-preview: Preview for Svg files
	//  - vscode.tunnel-forwarding: 転送ローカル ポートにインターネット経由でアクセスできるようにします。
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	"notebook.defaultFormatter": null,
	// ノートブックに拡張テキスト差分エディターを使用するかどうか。
	"notebook.diff.enablePreview": true,
	// メタデータの違いを非表示にする
	"notebook.diff.ignoreMetadata": false,
	// 出力の違いを非表示にする
	"notebook.diff.ignoreOutputs": false,
	// ノートブックの差分エディターで概要ルーラーをレンダリングするかどうか。
	"notebook.diff.overviewRuler": false,
	// 出力 MIME 種類の優先度リスト
	"notebook.displayOrder": [],
	// ノートブック エディターでドラッグ アンド ドロップによるセルの移動を許可するかどうかを制御します。
	"notebook.dragAndDropEnabled": true,
	// ノートブックで使用されるコード エディターの設定。これを使用して、ほとんどのエディター * 設定をカスタマイズできます。
	"notebook.editorOptionsCustomizations": {},
	// インライン チャットを有効にしてコード セルを作成するための実験用の生成アクションを有効にします。
	"notebook.experimental.generate": true,
	// プロセス間とリモート接続間でのノートブックの増分保存を有効にします。有効にすると、ノートブックへの変更のみが拡張機能ホストに送信されるため、大きなノートブックと低速なネットワーク接続のパフォーマンスが向上します。
	"notebook.experimental.remoteSave": false,
	// ウィジェット検索によるノートブック セルの検索動作をカスタマイズします。マークアップ ソースとマークアップ プレビューの両方が有効になっている場合、ウィジェット検索は、セルの現在の状態に基づいてソース コードまたはプレビューを検索します。
	"notebook.find.filters": {
		"markupSource": true,
		"markupPreview": true,
		"codeSource": true,
		"codeOutput": true
	},
	// 実行時にノートブック セルの書式を設定します。フォーマッタを使用できる必要があります。
	"notebook.formatOnCellExecution": false,
	// ノートブックを保存するときにフォーマットします。フォーマッタが有効でなければなりません。ファイルの遅延保存やエディターを閉じることは許可されていません。
	"notebook.formatOnSave.enabled": false,
	// ノートブック エディター内でグローバル ツールバーをレンダリングするかどうかを制御します。
	"notebook.globalToolbar": true,
	// [ノートブック] ツールバーのアクションがラベルをレンダリングするかどうかを制御します。
	"notebook.globalToolbarShowLabel": "always",
	// シンボルに移動 クイック 選択を有効にすると、ノートブックの完全なコード シンボルと Markdown ヘッダーが表示されます。
	"notebook.gotoSymbols.showAllSymbols": true,
	// 有効にすると、ノートブックを保存するときにコード セルの最後に改行が挿入されます。
	"notebook.insertFinalNewline": false,
	// セルを挿入アクションを表示するかどうかを制御します。
	//  - betweenCells: セル間でカーソルを合わせたときに表示されるツールバー。
	//  - notebookToolbar: ノートブック エディターの上部にあるツールバー。
	//  - both: 両方のツールバー。
	//  - hidden: 挿入アクションがどこにも表示されません。
	"notebook.insertToolbarLocation": "both",
	// セル エディターでの行番号の表示を制御します。
	"notebook.lineNumbers": "off",
	// ノートブック内の Markdown セルの線の高さをピクセル単位で制御します。`0` に設定すると、`normal` が使用されます
	"notebook.markdown.lineHeight": 0,
	// ノートブックでレンダリングされたマークアップのフォント サイズをピクセル単位で制御します。`0` に設定すると、`editor.fontSize` の 120% が使用されます。
	"notebook.markup.fontSize": 0,
	// 試験段階。ノートブック エディターで、複数のセルにわたる限られた複数のカーソル コントロールのセットを有効にします。現在サポートされているのは、主要なエディター アクション (入力、切り取り、コピー、貼り付け/合成) と、エディター コマンドの限定されたサブセットです。
	"notebook.multiCursor.enabled": false,
	// 有効にすると、セルエディター内の現在のカーソルが最初または最後の行にあるときに、カーソルは次または前のセルに移動できます。
	"notebook.navigation.allowNavigateToSurroundingCells": true,
	// 有効にすると、ノートブック アウトラインにコード セルが表示されます。
	"notebook.outline.showCodeCells": false,
	// 有効にすると、ノートブックのアウトラインにコード セルの記号が表示されます。'notebook.outline.showCodeCells' が有効になっていることに依存します。
	"notebook.outline.showCodeCellSymbols": true,
	// 有効にすると、ノートブックのアウトラインにヘッダーを含むマークダウン セルのみが表示されます。
	"notebook.outline.showMarkdownHeadersOnly": true,
	// ノートブック セル内の出力テキストのフォント ファミリ。空に設定すると、`editor.fontFamily` が使用されます。
	"notebook.output.fontFamily": "",
	// ノートブック セル内の出力テキストのフォント サイズ。0 に設定すると、`editor.fontSize` が使用されます。
	"notebook.output.fontSize": 0,
	// ノートブック セル内の出力テキストの行の高さ。
	//  - 0 に設定すると、エディターの行の高さが使用されます。
	//  - 0 から 8 の値は、フォント サイズの乗数として使用されます。
	//  - 8 以上の値が有効な値として使用されます。
	"notebook.output.lineHeight": 0,
	// ノートブック セルの出力でファイルパス リンクを無効にするかどうかを制御します。
	"notebook.output.linkifyFilePaths": true,
	// エラー出力を最小限のスタイルでレンダリングするかどうかを制御します。
	"notebook.output.minimalErrorRendering": false,
	// 制限より長い場合、最初はスクロール可能な領域にノートブックの出力をレンダリングします。
	"notebook.output.scrolling": false,
	// テキスト出力に表示されるテキストの行数を制御します。`notebook.output.scrolling` が有効な場合、この設定は出力のスクロールの高さを決定するために使用されます。
	"notebook.output.textLineLimit": 30,
	// 出力内の行を折り返すかどうかを制御します。
	"notebook.output.wordWrap": false,
	// notebook.cell.executeAndSelectBelow の実行時に次のセルを表示するときにスクロールする距離。
	//  - fullCell: スクロールして次のセルを完全に表示します。
	//  - firstLine: スクロールして、次のセルの最初の行を表示します。
	//  - none: スクロールしないでください。
	"notebook.scrolling.revealNextCellOnExecute": "fullCell",
	// セルのステータス バーを表示するかどうか。
	//  - hidden: セルのステータス バーは常に非表示です。
	//  - visible: セルのステータス バーは常に表示されています。
	//  - visibleAfterExecute: セルのステータス バーは、セルが実行されるまで非表示になります。その後可視化され、実行状態を表示できるようになります。
	"notebook.showCellStatusBar": "visible",
	// マークダウン ヘッダー折りたたみ矢印が表示されるタイミングを制御します。
	//  - always: 折りたたみコントロールは常に表示されています。
	//  - never: 折りたたみコントロールを表示せず、余白のサイズを小さくします。
	//  - mouseover: 折りたたみコントロールは、カーソルを合わせたときにのみ表示されます。
	"notebook.showFoldingControls": "mouseover",
	// 実験。ノートブック エディターでノートブック固定スクロール ヘッダーをレンダリングするかどうかを制御します。
	"notebook.stickyScroll.enabled": false,
	// 入れ子になった固定ラインをフラットに積み重ねて表示するか、インデントして積み重ねて表示するかを制御します。
	//  - flat: 入れ子になった固定ラインはフラットに表示されます。
	//  - indented: 入れ子になった固定ラインはインデントされて表示されます。
	"notebook.stickyScroll.mode": "indented",
	// セルごとに個別の元に戻す/やり直しのスタックを使用するかどうか。
	"notebook.undoRedoPerCell": true,
	// デバッグ パネル内で実験的なノートブック変数ビューを有効にします。
	"notebook.variablesView": false,
	// 対話型ウィンドウを自動的にスクロールして、最後に実行されたステートメントの出力を表示します。この値が false の場合、最後のセルが既にスクロール先の場合にのみウィンドウがスクロールされます。
	"interactiveWindow.alwaysScrollOnNewCell": true,
	// shift+enter を使用してインタラクティブ ウィンドウ (REPL) 入力ボックスを実行し、改行の作成に使用できるようにします。
	"interactiveWindow.executeWithShiftEnter": false,
	// インタラクティブ ウィンドウを閉じたときに保存するように求めるメッセージを表示します。この設定の変更の影響を受けるのは、新しいインタラクティブ ウィンドウのみです。
	"interactiveWindow.promptToSaveOnClose": false,
	// コードの実行方法を示すヒントをインタラクティブ ウィンドウ (REPL) 入力ボックスに表示します。
	"interactiveWindow.showExecutionHint": true,
	// When enabled, slow renderers are automatically profiled.
	"application.experimental.rendererProfiling": false,
	// 自動タスクを有効にする - タスクは信頼されていないワークスペースでは実行されないことに注意してください。
	//  - on: 常に
	//  - off: なし
	"task.allowAutomaticTasks": "on",
	// すべてのタスク プロバイダー拡張機能に対する 'provideTasks' の有効化を制御します。Tasks: Run Task コマンドが低速の場合、タスク プロバイダーの自動検出を無効にすると改善される可能性があります。個々の拡張機能で、自動検出を無効にする設定が備わっている場合もあります。
	"task.autoDetect": "on",
	// タスクの実行時に問題マッチャーのプロンプトを表示するかどうかを構成します。'true' に設定してプロンプトしないようにするか、タスクの種類のディクショナリを使用して、特定のタスクの種類に対してのみプロンプトをオフにします。
	"task.problemMatchers.neverPrompt": false,
	// [タスクの実行] など、タスク クイック ピックに詳細があるタスクについてタスクの詳細を表示するかどうかを制御します。
	"task.quickOpen.detail": true,
	// タスククイックオープンダイアログで追跡された最近のアイテムの数を制御します。
	"task.quickOpen.history": 30,
	// タスクがプロバイダーによってグループ化されている場合、[タスク: タスクの実行] コマンドで、高速の 2 レベル ピッカーの代わりに低速の [すべて表示] の動作を使用します。
	"task.quickOpen.showAll": false,
	// 選択するタスクが 1 つしかない場合に、タスクのクイック ピックをスキップするかどうかを制御します。
	"task.quickOpen.skip": false,
	// ウィンドウの再読み込み時に、問題マッチャーがあるタスクに再接続します。
	"task.reconnection": true,
	// タスクを実行する前に、すべてのダーティなエディターを保存してください。
	//  - always: 実行する前に常にすべてのエディターを保存します。
	//  - never: 実行する前にエディターを保存しません。
	//  - prompt: 実行前にエディターを保存するかどうかを確認します。
	"task.saveBeforeRun": "always",
	// プロバイダーの速度が遅いときに警告を表示するかどうかを構成します
	"task.slowProviderWarning": true,
	// タスクの詳細ログを有効にします。
	"task.verboseLogging": false,
	// ターミナルでエクスプローラーからファイルを開くときに、起動するターミナルの種類を決定します。
	//  - integrated: VS Code の統合ターミナルを使用します。
	//  - external: 構成済みの外部ターミナルを使用します。
	//  - both: 他の 2 つを一緒に使用します。
	"terminal.explorerKind": "integrated",
	// どのターミナルを Linux で実行するかをカスタマイズします。
	"terminal.external.linuxExec": "xterm",
	// どのターミナル アプリケーションを macOS で実行するかをカスタマイズします。
	"terminal.external.osxExec": "Terminal.app",
	// どのターミナルを Windows で実行するかをカスタマイズします。
	"terminal.external.windowsExec": "C:\\WINDOWS\\System32\\cmd.exe",
	// ターミナルでソース管理リポジトリ ビューからリポジトリを開くときに、起動するターミナルの種類を決定します。
	//  - integrated: VS Code の統合ターミナルを使用します。
	//  - external: 構成済みの外部ターミナルを使用します。
	//  - both: 他の 2 つを一緒に使用します。
	"terminal.sourceControlRepositoriesKind": "integrated",
	// コマンド実行時にターミナルのアクセス可能ビューをフォーカスします。
	"terminal.integrated.accessibleViewFocusOnCommandExecution": false,
	// バッファーの下部に設定するのではなく、ターミナルのアクセス可能なビューを再度開いたときにカーソルの位置を保持します。
	"terminal.integrated.accessibleViewPreserveCursorPosition": false,
	// ターミナルでコードのキーバインドを許可するかどうか。これが true で、キーストロークの結果がコード内の場合、`terminal.integrated.commandsToSkipShell` をバイパスすることに注意してください。これを false に設定すると、Ctrl + k キーを (VS Code ではなく) シェルに移動する場合に特に便利です。
	"terminal.integrated.allowChords": true,
	// ターミナルがリンクを開くことを許可されている URI スキームを含む文字列の配列。既定では、セキュリティ上の理由から、可能なスキームの小さなサブセットのみが許可されます。
	"terminal.integrated.allowedLinkSchemes": [
		"file",
		"http",
		"https",
		"mailto",
		"vscode",
		"vscode-insiders"
	],
	// メニュー バー ニーモニック (Alt+F など) でメニュー バーを開くかどうかを指定します。これを true にした場合、すべての Alt キーストロークがシェルをスキップするようになることにご注意ください。これは、macOS では何の効果もありません。
	"terminal.integrated.allowMnemonics": false,
	// 有効にすると、alt/option を押しながらクリックすると、`editor.multiCursorModifier` が `'alt'` (既定値) に設定されているときに、プロンプト カーソルがマウスの下に移動します。シェルによっては、これは確実に機能しない可能性があります。
	"terminal.integrated.altClickMovesCursor": true,
	// タスクやデバッグなどのオートメーション関連のターミナルの使用に Linux で使用するターミナル プロファイル。
	"terminal.integrated.automationProfile.linux": null,
	// タスクやデバッグなどのオートメーション関連のターミナルの使用に macOS で使用するターミナル プロファイル。
	"terminal.integrated.automationProfile.osx": null,
	// タスクやデバッグなどのオートメーション関連のターミナルの使用に使用するターミナル プロファイル。現在、この設定は、`terminal.integrated.automationShell.windows` (非推奨になりました) が設定されている場合は無視されます。
	"terminal.integrated.automationProfile.windows": null,
	// A set of messages that, when encountered in the terminal, will be automatically responded to. Provided the message is specific enough, this can help automate away common responses.
	// 
	// Remarks:
	// 
	// - Use `"Terminate batch job (Y/N)": "Y\r"` to automatically respond to the terminate batch job prompt on Windows.
	// - The message includes escape sequences so the reply might not happen with styled text.
	// - Each reply can only happen once every second.
	// - Use `"\r"` in the reply to mean the enter key.
	// - To unset a default key, set the value to null.
	// - Restart VS Code if new don't apply.
	"terminal.integrated.autoReplies": {},
	// トリガーされた場合に、ターミナル タブ内にベルを表示するためのミリ秒数です。
	"terminal.integrated.bellDuration": 1000,
	// キー バインドがシェルに送信されず、代わりに常に VS Code で処理されるコマンド ID のセット。これにより、シェルによって通常使用されるキー バインドが、ターミナルがフォーカスされていない場合と同じ動作をするようにします。たとえば、'Ctrl+P' で Quick Open を起動します。
	// 
	// &nbsp;
	// 
	// 既定では、多くのコマンドがスキップされます。既定値をオーバーライドし、代わりにそのコマンドのキー バインドをシェルに渡すには、先頭に '-' 文字が付いているコマンドを追加します。たとえば、'-workbench.action.quickOpen' を追加して、'Ctrl+P' でシェルにアクセスできるようにします。
	// 
	// &nbsp;
	// 
	// 既定でスキップされる以下のコマンドの一覧は、設定エディターで表示したときには切り詰められます。完全な一覧を表示するには、下の一覧から最初のコマンドを [既定の設定の JSON を開く](command:workbench.action.openRawDefaultSettings '既定の設定 (JSON) を開く') して検索します。
	// 
	// &nbsp;
	// 
	// 既定でスキップされるコマンド:
	// 
	// - editor.action.accessibilityHelp
	// - editor.action.toggleTabFocusMode
	// - notification.acceptPrimaryAction
	// - notifications.hideList
	// - notifications.hideToasts
	// - runCommands
	// - workbench.action.closeQuickOpen
	// - workbench.action.debug.continue
	// - workbench.action.debug.pause
	// - workbench.action.debug.restart
	// - workbench.action.debug.run
	// - workbench.action.debug.start
	// - workbench.action.debug.stepInto
	// - workbench.action.debug.stepOut
	// - workbench.action.debug.stepOver
	// - workbench.action.debug.stop
	// - workbench.action.firstEditorInGroup
	// - workbench.action.focusActiveEditorGroup
	// - workbench.action.focusEighthEditorGroup
	// - workbench.action.focusFifthEditorGroup
	// - workbench.action.focusFirstEditorGroup
	// - workbench.action.focusFourthEditorGroup
	// - workbench.action.focusLastEditorGroup
	// - workbench.action.focusNextPart
	// - workbench.action.focusPreviousPart
	// - workbench.action.focusSecondEditorGroup
	// - workbench.action.focusSeventhEditorGroup
	// - workbench.action.focusSixthEditorGroup
	// - workbench.action.focusThirdEditorGroup
	// - workbench.action.lastEditorInGroup
	// - workbench.action.navigateDown
	// - workbench.action.navigateLeft
	// - workbench.action.navigateRight
	// - workbench.action.navigateUp
	// - workbench.action.nextEditor
	// - workbench.action.nextEditorInGroup
	// - workbench.action.nextPanelView
	// - workbench.action.nextSideBarView
	// - workbench.action.openNextRecentlyUsedEditor
	// - workbench.action.openNextRecentlyUsedEditorInGroup
	// - workbench.action.openPreviousRecentlyUsedEditor
	// - workbench.action.openPreviousRecentlyUsedEditorInGroup
	// - workbench.action.previousEditor
	// - workbench.action.previousEditorInGroup
	// - workbench.action.previousPanelView
	// - workbench.action.previousSideBarView
	// - workbench.action.quickOpen
	// - workbench.action.quickOpenLeastRecentlyUsedEditor
	// - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenPreviousEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenView
	// - workbench.action.showCommands
	// - workbench.action.tasks.build
	// - workbench.action.tasks.reRunTask
	// - workbench.action.tasks.restartTask
	// - workbench.action.tasks.runTask
	// - workbench.action.tasks.showLog
	// - workbench.action.tasks.showTasks
	// - workbench.action.tasks.terminate
	// - workbench.action.tasks.test
	// - workbench.action.terminal.acceptSelectedSuggestion
	// - workbench.action.terminal.acceptSelectedSuggestionEnter
	// - workbench.action.terminal.chat.cancel
	// - workbench.action.terminal.chat.close
	// - workbench.action.terminal.chat.discard
	// - workbench.action.terminal.chat.feedbackHelpful
	// - workbench.action.terminal.chat.feedbackReportIssue
	// - workbench.action.terminal.chat.feedbackUnhelpful
	// - workbench.action.terminal.chat.insertCommand
	// - workbench.action.terminal.chat.makeRequest
	// - workbench.action.terminal.chat.runCommand
	// - workbench.action.terminal.chat.start
	// - workbench.action.terminal.chat.viewInChat
	// - workbench.action.terminal.clear
	// - workbench.action.terminal.clearSelection
	// - workbench.action.terminal.clearSuggestCache
	// - workbench.action.terminal.copyAndClearSelection
	// - workbench.action.terminal.copyLastCommand
	// - workbench.action.terminal.copyLastCommandAndLastCommandOutput
	// - workbench.action.terminal.copyLastCommandOutput
	// - workbench.action.terminal.copySelection
	// - workbench.action.terminal.copySelectionAsHtml
	// - workbench.action.terminal.deleteToLineStart
	// - workbench.action.terminal.deleteWordLeft
	// - workbench.action.terminal.deleteWordRight
	// - workbench.action.terminal.findNext
	// - workbench.action.terminal.findPrevious
	// - workbench.action.terminal.focus
	// - workbench.action.terminal.focusAccessibleBuffer
	// - workbench.action.terminal.focusAtIndex1
	// - workbench.action.terminal.focusAtIndex2
	// - workbench.action.terminal.focusAtIndex3
	// - workbench.action.terminal.focusAtIndex4
	// - workbench.action.terminal.focusAtIndex5
	// - workbench.action.terminal.focusAtIndex6
	// - workbench.action.terminal.focusAtIndex7
	// - workbench.action.terminal.focusAtIndex8
	// - workbench.action.terminal.focusAtIndex9
	// - workbench.action.terminal.focusFind
	// - workbench.action.terminal.focusHover
	// - workbench.action.terminal.focusNext
	// - workbench.action.terminal.focusNextPane
	// - workbench.action.terminal.focusPrevious
	// - workbench.action.terminal.focusPreviousPane
	// - workbench.action.terminal.goToRecentDirectory
	// - workbench.action.terminal.hideFind
	// - workbench.action.terminal.hideSuggestWidget
	// - workbench.action.terminal.kill
	// - workbench.action.terminal.killEditor
	// - workbench.action.terminal.moveToEditor
	// - workbench.action.terminal.moveToLineEnd
	// - workbench.action.terminal.moveToLineStart
	// - workbench.action.terminal.moveToTerminalPanel
	// - workbench.action.terminal.new
	// - workbench.action.terminal.newInActiveWorkspace
	// - workbench.action.terminal.paste
	// - workbench.action.terminal.pasteSelection
	// - workbench.action.terminal.resizePaneDown
	// - workbench.action.terminal.resizePaneLeft
	// - workbench.action.terminal.resizePaneRight
	// - workbench.action.terminal.resizePaneUp
	// - workbench.action.terminal.runActiveFile
	// - workbench.action.terminal.runRecentCommand
	// - workbench.action.terminal.runSelectedText
	// - workbench.action.terminal.scrollDown
	// - workbench.action.terminal.scrollDownPage
	// - workbench.action.terminal.scrollToBottom
	// - workbench.action.terminal.scrollToNextCommand
	// - workbench.action.terminal.scrollToPreviousCommand
	// - workbench.action.terminal.scrollToTop
	// - workbench.action.terminal.scrollUp
	// - workbench.action.terminal.scrollUpPage
	// - workbench.action.terminal.searchWorkspace
	// - workbench.action.terminal.selectAll
	// - workbench.action.terminal.selectNextPageSuggestion
	// - workbench.action.terminal.selectNextSuggestion
	// - workbench.action.terminal.selectPrevPageSuggestion
	// - workbench.action.terminal.selectPrevSuggestion
	// - workbench.action.terminal.selectToNextCommand
	// - workbench.action.terminal.selectToNextLine
	// - workbench.action.terminal.selectToPreviousCommand
	// - workbench.action.terminal.selectToPreviousLine
	// - workbench.action.terminal.sendSequence
	// - workbench.action.terminal.sizeToContentWidth
	// - workbench.action.terminal.split
	// - workbench.action.terminal.splitInActiveWorkspace
	// - workbench.action.terminal.toggleFindCaseSensitive
	// - workbench.action.terminal.toggleFindRegex
	// - workbench.action.terminal.toggleFindWholeWord
	// - workbench.action.terminal.toggleTerminal
	// - workbench.action.toggleFullScreen
	// - workbench.action.toggleMaximizedPanel
	// - workbench.action.togglePanel
	"terminal.integrated.commandsToSkipShell": [],
	// アクティブなターミナル セッションがある場合に、ウィンドウを閉じたときに確認を行うかどうかを制御します。
	//  - never: 確認しません。
	//  - always: ターミナルがあるかどうか常に確認します。
	//  - hasChildProcesses: 子プロセスがあるターミナルがあるかどうかを確認します。
	"terminal.integrated.confirmOnExit": "never",
	// 子プロセスがある場合にターミナルの強制終了を確認するかどうかを制御します。エディターに設定すると、子プロセスがある場合、エディター領域のターミナルは変更済みとしてマークされます。子プロセスの検出は、シェルの子プロセスとしてプロセスを実行しない Git Bash のようなシェルでは適切に機能しない可能性があることに注意してください。
	//  - never: 確認しません。
	//  - editor: ターミナルがエディター内にあるかどうかを確認します。
	//  - panel: ターミナルがパネル内にあるかどうかを確認します。
	//  - always: ターミナルがエディターとパネルのどちらにあるかを確認します。
	"terminal.integrated.confirmOnKill": "editor",
	// ターミナルで選択したテキストをクリップボードにコピーするかどうかを制御します。
	"terminal.integrated.copyOnSelection": false,
	// ターミナルでカーソルを点滅させるかどうかを制御します。
	"terminal.integrated.cursorBlinking": false,
	// ターミナルにフォーカスがある場合のターミナル カーソルのスタイルを制御します。
	"terminal.integrated.cursorStyle": "block",
	// ターミナルにフォーカスがない場合のターミナル カーソルのスタイルを制御します。
	"terminal.integrated.cursorStyleInactive": "outline",
	// `terminal.integrated.cursorStyle` が `line` に設定されている場合のカーソルの幅を制御します。
	"terminal.integrated.cursorWidth": 1,
	// フォントを使用する代わりに、ブロック要素およびボックス描画文字のカスタム グリフを描画するかどうか。通常は、連続した直線を使用した方が適切なレンダリングを行います。これは `terminal.integrated.gpuAcceleration` が無効である場合は動作しないことにご注意ください。
	"terminal.integrated.customGlyphs": true,
	// ターミナルが起動される明示的な開始パスです。これは、シェル プロセスの現在の作業ディレクトリ (cwd) として使用されます。これは特に、ルート ディレクトリが便利な cwd でない場合にワークスペースの設定で役立ちます。
	"terminal.integrated.cwd": "",
	// 新規に作成されたターミナルの表示場所を制御します。
	//  - editor: エディターでのターミナルの作成
	//  - view: ターミナル ビューでのターミナルの作成
	"terminal.integrated.defaultLocation": "view",
	// Linux 上の既定のターミナル プロファイル。
	"terminal.integrated.defaultProfile.linux": null,
	// macOS 上の既定のターミナル プロファイル。
	"terminal.integrated.defaultProfile.osx": null,
	// Windows 上の既定のターミナル プロファイル。
	//  - null: 既定値を自動的に検出する
	//  - PowerShell: $(terminal-powershell) PowerShell
	// - path: C:\Program Files\PowerShell\7\pwsh.exe
	//  - Windows PowerShell: $(terminal-powershell) Windows PowerShell
	// - path: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe
	//  - Git Bash: $(terminal) Git Bash
	// - path: C:\Program Files\Git\bin\bash.exe
	// - args: ['--login','-i']
	//  - Command Prompt: $(terminal-cmd) Command Prompt
	// - path: C:\WINDOWS\System32\cmd.exe
	// - args: []
	//  - Ubuntu-20.04 (WSL): $(terminal-ubuntu) Ubuntu-20.04 (WSL)
	// - path: C:\WINDOWS\System32\wsl.exe
	// - args: ['-d','Ubuntu-20.04']
	//  - Ubuntu (WSL): $(terminal-ubuntu) Ubuntu (WSL)
	// - path: C:\WINDOWS\System32\wsl.exe
	// - args: ['-d','Ubuntu']
	//  - JavaScript デバッグ ターミナル: $($(debug)) JavaScript デバッグ ターミナル
	// - extensionIdentifier: ms-vscode.js-debug
	"terminal.integrated.defaultProfile.windows": null,
	// '$LANG' 環境変数を検出して UTF-8 準拠のオプションに設定するかどうかを制御します。これは、VS Code のターミナルでは、シェルからのデータで UTF-8 エンコードのみがサポートされるためです。
	//  - auto: 既存の変数が存在しないか、または `'.UTF-8'` で終わっていない場合に、`$LANG` 環境変数を設定します。
	//  - off: $LANG' 環境変数は設定しないでください。
	//  - on: 常に '$LANG' 環境変数を設定します。
	"terminal.integrated.detectLocale": "auto",
	// ターミナルの太字のテキストで常に "明るい" ANSI 色のバリエーションを使用するかどうかを制御します。
	"terminal.integrated.drawBoldTextInBrightColors": true,
	// ターミナルのファイル リンクを有効にするかどうかを指定します。各ファイルのリンクがファイル システムに対して確認されるため、特にネットワーク ドライブ上での作業時にリンクの動作が低速になることがあります。この変更は、新しいターミナルでのみ有効になります。
	//  - off: 常にオフ。
	//  - on: 常にオン。
	//  - notRemote: リモート ワークスペースにない場合にのみ有効にします。
	"terminal.integrated.enableFileLinks": "on",
	// ターミナルでイメージのサポートを有効にします。これは、 `terminal.integrated.gpuAcceleration` が有効になっている場合にのみ機能します。Linux と macOS では、sixel と iTerm の両方のインライン イメージ プロトコルがサポートされています。ConPTY がシーケンスを通過すると、Windows のサポートが自動的に点灯します。現在、ウィンドウの再読み込み/再接続の間にイメージは復元されません。
	"terminal.integrated.enableImages": false,
	// ターミナルに複数行を貼り付ける場合に警告ダイアログを表示するかどうかを制御します。
	//  - auto: 警告を有効にしますが、次の場合は表示しません。
	// 
	// - ブラケットで囲まれた貼り付けモードが有効である (シェルはネイティブで複数行貼り付けをサポート)
	// - 貼り付けはシェルの読み取りラインによって処理される (pwsh の場合)
	//  - always: テキストに改行が含まれている場合は常に警告を表示します。
	//  - never: 警告を表示しません。
	"terminal.integrated.enableMultiLinePasteWarning": "auto",
	// ウィンドウの再読み込み時にワークスペースのターミナル セッション/履歴を保持します。
	"terminal.integrated.enablePersistentSessions": true,
	// 視覚的端末ベルを有効にするかどうかを制御します。これは、ターミナル名の横に表示されます。
	"terminal.integrated.enableVisualBell": false,
	// Linux 上のターミナルで使用される VS Code プロセスに追加される環境変数を含むオブジェクト。環境変数を削除するには、'null' に設定します。
	"terminal.integrated.env.linux": {},
	// macOS 上のターミナルで使用される VS Code プロセスに追加される環境変数を含むオブジェクトです。環境変数を削除するには、'null' に設定します。
	"terminal.integrated.env.osx": {},
	// Windows 上のターミナルで使用される VS Code プロセスに追加される環境変数を含むオブジェクトです。環境変数を削除するには、'null' に設定します。
	"terminal.integrated.env.windows": {},
	// 各ターミナルに環境変更インジケーターを表示するかどうかを指定します。これは、拡張機能によってターミナルの環境が変更されたかどうか、または変更を加えたいかどうかを示します。
	//  - off: インジケーターを無効にします。
	//  - on: インジケーターを有効にします。
	//  - warnonly: ターミナルの環境が「古く」なった場合にのみ警告インジケーターを表示します。これは、ターミナルの環境が拡張機能によって変更されたことを示す情報インジケーターではありません。
	"terminal.integrated.environmentChangesIndicator": "warnonly",
	// 拡張機能が環境に参加する必要があり、まだ対話が行われていない場合に、自動的に端末を再起動するかどうか。
	"terminal.integrated.environmentChangesRelaunch": true,
	// Windows に付属する conpty.dll ではなく、VS Code に付属する試験的なバージョンを使用するかどうか。
	"terminal.integrated.experimental.windowsUseConptyDll": false,
	// 'Alt' キーを押した時のスクロール速度の乗数。
	"terminal.integrated.fastScrollSensitivity": 5,
	// [ターミナル: アクティブなターミナルで選択したテキストを実行する] が実行された後に、ターミナル、アクセス可能なバッファー、またはどちらもフォーカスしないかを制御します。
	//  - terminal: 常にターミナルにフォーカスします。
	//  - accessible-buffer: アクセス可能なバッファーに常にフォーカスします。
	//  - none: 何もしない。
	"terminal.integrated.focusAfterRun": "none",
	// ターミナルのフォント ファミリを制御し、既定値は `editor.fontFamily` となります。
	"terminal.integrated.fontFamily": "",
	// ターミナルのフォント サイズをピクセル単位で制御します。
	"terminal.integrated.fontSize": 14,
	// 端末内で太字以外のテキストに使用するフォントの太さ。"normal" と "bold" のキーワード、または 1 から 1000 の間の数字を受け入れます。
	"terminal.integrated.fontWeight": "normal",
	// 端末内で太字のテキストに使用するフォントの太さ。"normal" と "bold" のキーワード、または 1 から 1000 の間の数字を受け入れます。
	"terminal.integrated.fontWeightBold": "bold",
	// ターミナルで GPU を利用してレンダリングを行うかどうかを制御します。
	//  - auto: 最適なエクスペリエンスを提供するレンダラーを VS Code で検出できるようにします。
	//  - on: ターミナル内の GPU アクセラレーションを有効にします。
	//  - off: ターミナル内の GPU アクセラレータを無効にします。GPU アクセラレータをオフにすると、ターミナルのレンダリング速度は大幅に低下しますが、すべてのシステムで確実に動作するはずです。
	"terminal.integrated.gpuAcceleration": "auto",
	// スタートアップ時にターミナル ビューを非表示にするかどうか。固定セッションがない場合にターミナルを作成しないようにします。
	//  - never: 起動時にターミナル ビューを常に表示します。
	//  - whenEmpty: 永続的なセッションが復元されていない場合にのみ、ターミナルを非表示にします。
	//  - always: 永続的なセッションが復元された場合でも、常にターミナルを非表示にします。
	"terminal.integrated.hideOnStartup": "never",
	// ターミナルがモードに設定されている場合でも、ターミナルがかっこで囲まれた貼り付けモードを無視するかどうかを制御します。貼り付け時に `\x1b[200~` と `\x1b[201~` シーケンスを省略します。これは、たとえばサブシェルで発生する可能性のあるモードをシェルが優先していない場合に便利です。
	"terminal.integrated.ignoreBracketedPasteMode": false,
	// `terminal.integrated.confirmOnKill` 設定を使用するときに無視するプロセス名のセット。
	"terminal.integrated.ignoreProcessNames": [
		"starship",
		"oh-my-posh",
		"bash",
		"zsh"
	],
	// 新しいシェルがVS Codeから環境を継承する必要があるかどうか。これにより、ログイン シェルがソースとなり、$PATHおよびその他の開発変数が初期化される可能性があります。これは Windows には影響しません。
	"terminal.integrated.inheritEnv": true,
	// 入力されていない最初のターミナルがフォーカスされているときに使用可能なアクションに関するヒントを表示するかどうかを制御します。
	"terminal.integrated.initialHint": true,
	// ターミナルの文字間隔を制御します。これは、文字間に追加する追加のピクセル数を表す整数値です。
	"terminal.integrated.letterSpacing": 0,
	// ターミナルの行の高さを制御します。この数にターミナルのフォント サイズを掛けて、実際の行の高さをピクセル単位で算出します。
	"terminal.integrated.lineHeight": 1,
	// ローカル エコーを有効にする必要がある場合。これにより、`terminal.integrated.localEchoLatencyThreshold` をオーバーライドします
	//  - on: 常に有効
	//  - off: 常に無効
	//  - auto: リモート ワークスペースに対してのみ有効
	"terminal.integrated.localEchoEnabled": "auto",
	// これらのプログラム名のいずれかがターミナル タイトルに見つかったとき、ローカル エコーは無効になります。
	"terminal.integrated.localEchoExcludePrograms": [
		"vim",
		"vi",
		"nano",
		"tmux"
	],
	// ネットワーク遅延の長さ (ミリ秒単位)。ローカルの編集内容はサーバーの確認を待たずに端末にエコーされます。'0' の場合ローカル エコーは常にオンになり、'-1' の場合は無効になります。
	"terminal.integrated.localEchoLatencyThreshold": 30,
	// ローカル エコー テキストの端末スタイル。フォント スタイルまたは RGB カラー。
	"terminal.integrated.localEchoStyle": "dim",
	// macOS で option キーを押しながらクリックしたときに選択を強制するかどうかを制御します。これにより、標準 (行) の選択が強制され、列選択モードが使用されなくなります。これにより、たとえば tmux でマウス モードが有効になっている場合などに、通常のターミナル選択を使用してコピーと貼り付けを行うことができます。
	"terminal.integrated.macOptionClickForcesSelection": false,
	// option キーを macOS 上のターミナルの meta キーとして扱うかどうかを制御します。
	"terminal.integrated.macOptionIsMeta": false,
	// ターミナルがミドル クリックにどのように反応するかを制御します。
	//  - default: プラットフォームは既定でターミナルにフォーカスします。Linux では、選択内容も貼り付けられます。
	//  - paste: ミドル クリック時に貼り付けます。
	"terminal.integrated.middleClickBehavior": "default",
	// 各セルの前景色を設定すると、指定されたコントラスト比に見合うように変更を試みます。#146406 ごとの 'powerline' 文字には適用されないことに注意してください。値の例: 
	// 
	// - 1: 何も実行せず、標準テーマ カラーを使用します。
	// - 4.5: [WCAG AA 準拠 (最低)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) (既定)。
	// - 7: [WCAG AAA 準拠 (拡張)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html)。
	// - 21: 黒地に白、または白地に黒。
	"terminal.integrated.minimumContrastRatio": 4.5,
	// マウス ホイールのスクロール イベントの 'deltaY' で使用される乗数です。
	"terminal.integrated.mouseWheelScrollSensitivity": 1,
	// `Ctrl` キーを押しながらマウス ホイールを使用してターミナルのフォントをズームします。
	"terminal.integrated.mouseWheelZoom": false,
	// ターミナル プロセスをシャットダウンする必要がある場合 (例: ウィンドウまたはアプリケーションが閉じた場合)、これにより、前のターミナル セッション/履歴の内容を復元し、ワークスペースを次回開いたときにプロセスを再作成するタイミングが決定されます。
	// 
	// Caveats:
	// 
	// - プロセスの現在の作業ディレクトリの復元は、それがシェルでサポートされているかどうかによって異なります。
	// - シャットダウン中にセッションを保持する時間が制限されるため、待機時間の長いリモート接続を使用している場合に中止される可能性があります。
	//  - onExit: Windows または Linux で最後のウィンドウが閉じられた後、`workbench.action.quit` コマンドがトリガーされた場合 (コマンド パレット、キー バインド、メニュー) にプロセスの再活性化を行います。
	//  - onExitAndWindowClose: Windows または Linux で最後のウィンドウが閉じられた後、`workbench.action.quit` コマンドがトリガーされた場合 (コマンド パレット、キー バインド、メニュー)、またはウィンドウが閉じられた場合にプロセスの再活性化を行います。
	//  - never: ターミナル バッファーの復元や、プロセスの再作成を行わないでください。
	"terminal.integrated.persistentSessionReviveProcess": "onExit",
	// 永続的なターミナル セッションに再接続するときに復元される回線の最大数を制御します。これを増やすと、より多くのメモリを犠牲にしてスクロールバックの回線が復元され、起動時に端末への接続にかかる時間が長くなります。この設定を有効にするには、値を `terminal.integrated.scrollback` 以下に設定する必要があります。
	"terminal.integrated.persistentSessionScrollback": 100,
	// ターミナルの起動方法を追加、削除、または変更できる、Linux の一連のターミナル プロファイルのカスタマイズ。プロファイルは、必須のパス、オプションの引数、その他のプレゼンテーション オプションで構成されます。
	// 
	// 既存のプロファイルを上書きするには、プロファイル名をキーとして使用します。例: 
	// 
	// ```json
	// "terminal.integrated.profile.linux": {
	//   "bash": null
	// }
	// ```
	// 
	// [プロファイルの構成に関する詳細をご覧ください](https://code.visualstudio.com/docs/terminal/profiles)。
	"terminal.integrated.profiles.linux": {
		"bash": {
			"path": "bash",
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh"
		},
		"fish": {
			"path": "fish"
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},
	// ターミナルの起動方法を追加、削除、または変更できる、Mac の一連のターミナル プロファイルのカスタマイズ。プロファイルは、必須のパス、オプションの引数、その他のプレゼンテーション オプションで構成されます。
	// 
	// 既存のプロファイルを上書きするには、プロファイル名をキーとして使用します。例: 
	// 
	// ```json
	// "terminal.integrated.profile.osx": {
	//   "bash": null
	// }
	// ```
	// 
	// [プロファイルの構成に関する詳細をご覧ください](https://code.visualstudio.com/docs/terminal/profiles)。
	"terminal.integrated.profiles.osx": {
		"bash": {
			"path": "bash",
			"args": [
				"-l"
			],
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh",
			"args": [
				"-l"
			]
		},
		"fish": {
			"path": "fish",
			"args": [
				"-l"
			]
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},
	// ターミナルの起動方法を追加、削除、または変更できる、Windows の一連のターミナル プロファイルのカスタマイズ。プロファイルは、必須のパス、オプションの引数、その他のプレゼンテーション オプションで構成されます。
	// 
	// 既存のプロファイルを上書きするには、プロファイル名をキーとして使用します。例: 
	// 
	// ```json
	// "terminal.integrated.profile.windows": {
	//   "bash": null
	// }
	// ```
	// 
	// [プロファイルの構成に関する詳細をご覧ください](https://code.visualstudio.com/docs/terminal/profiles)。
	"terminal.integrated.profiles.windows": {
		"PowerShell": {
			"source": "PowerShell",
			"icon": "terminal-powershell"
		},
		"Command Prompt": {
			"path": [
				"${env:windir}\\Sysnative\\cmd.exe",
				"${env:windir}\\System32\\cmd.exe"
			],
			"args": [],
			"icon": "terminal-cmd"
		},
		"Git Bash": {
			"source": "Git Bash"
		}
	},
	// 横幅が 1 セルのグリフで、後続のセルに重なるグリフがあるときに、グリフを横方向にリスケールするかどうか。これは通常、等幅フォントでは使用されないあいまいな幅文字 (例: ローマ数字文字 U+2160+) で発生します。絵文字グリフはリスケーリングされません。
	"terminal.integrated.rescaleOverlappingGlyphs": true,
	// 右クリックに対するターミナルの反応を制御します。
	//  - default: コンテキスト メニューを表示します。
	//  - copyPaste: 選択範囲がある場合はコピーし、それ以外の場合は貼り付けます。
	//  - paste: 右クリック時に貼り付けます。
	//  - selectWord: カーソルの下にある単語を選択して、コンテキスト メニューを表示します。
	//  - nothing: 何もせず、ターミナルにイベントを渡します。
	"terminal.integrated.rightClickBehavior": "copyPaste",
	// ターミナルがバッファーに保持する最大行数を制御します。スムーズなエクスペリエンスを実現するために、この値に基づいてメモリを事前に割り当てます。そのため、値が大きくなると、メモリの量も増えます。
	"terminal.integrated.scrollback": 1000,
	// ワークベンチではなくターミナルにほとんどのキー バインドをディスパッチし、`terminal.integrated.commandsToSkipShell` をオーバーライドします。これは、精細な調整の代わりに使用できます。
	"terminal.integrated.sendKeybindingsToShell": false,
	// シェル統合が有効になっている場合は、コマンドごとに装飾を追加します。
	//  - both: 余白 (左) と概要ルーラー (右) にデコレーションを表示する
	//  - gutter: ターミナルの左側に余白のデコレーションを表示する
	//  - overviewRuler: ターミナルの右側に概要ルーラー デコレーションを表示する
	//  - never: 装飾を表示しない
	"terminal.integrated.shellIntegration.decorationsEnabled": "both",
	// 強化されたコマンド追跡や現在の作業ディレクトリの検出などの機能をサポートするために、シェル統合で自動挿入するか否かを決定します。
	// 
	// シェル統合は、シェルをスタートアップ スクリプトで導入することで機能します。そのスクリプトは、ターミナル内で何が起こっているかについて VS Code 分析情報を提供します。
	// 
	// サポートされているシェル:
	// 
	// - Linux/macOS: bash、fish、pwsh、zsh
	// - Windows: pwsh、git bash
	// 
	// この設定はターミナルが作成されたときにのみ適用されるため、ターミナルを再起動して有効にする必要があります。
	// 
	// ターミナル プロファイルでカスタム引数が定義されていて、`editor.accessibilitySupport#`が有効になっている場合、[complex bash `PROMPT_COMMAND`](https://code.visualstudio.com/docs/editor/integrated-terminal#_complex-bash-promptcommand)、またはその他のサポートされていないセットアップがある場合は、スクリプト挿入が機能しないことがあります。デコレーションを無効化するには、`#terminal.integrated.shellIntegrations.decorationsEnabled` をご覧ください
	"terminal.integrated.shellIntegration.enabled": true,
	// Controls the number of recently used commands to keep in the terminal command history. Set to 0 to disable terminal command history.
	"terminal.integrated.shellIntegration.history": 100,
	// ターミナルでコマンドをポイントしたときにコマンド ガイドを表示するかどうか。
	"terminal.integrated.shellIntegration.showCommandGuide": true,
	// 終了コードがゼロ以外の場合に、"ターミナルの処理が終了しました (終了コード: )" という警告を表示するかどうかを制御します。
	"terminal.integrated.showExitAlert": true,
	// ターミナル出力でリンクにホバーを表示するかどうか。
	"terminal.integrated.showLinkHover": true,
	// アニメーションでターミナルをスクロールするかどうかを制御します。
	"terminal.integrated.smoothScrolling": false,
	// 分割ターミナルの開始点となる作業ディレクトリを制御します。
	//  - workspaceRoot: 新しい分割ターミナルでは、ワークスペースのルートが作業ディレクトリとして使用されます。マルチ ルートのワークスペースでは、どのルート フォルダーを使用するか選択できます。
	//  - initial: 新しい分割ターミナルでは、親ターミナルの起動時の作業ディレクトリが使用されます。
	//  - inherited: macOS と Linux では、新しい分割ターミナルは親ターミナルの作業ディレクトリを使用します。Windows では、初期の動作と同じになります。
	"terminal.integrated.splitCwd": "inherited",
	// ターミナルの上部に現在のコマンドを表示します。
	"terminal.integrated.stickyScroll.enabled": false,
	// 表示する追従行の最大数を定義します。追従スクロール行は、この設定に関係なくビューポートの 40% を超えることはありません。
	"terminal.integrated.stickyScroll.maxLineCount": 5,
	// アクティブ化される組み込みの入力候補を制御します。カスタム シェル入力候補がシェル プロファイルで構成されている場合、この設定によって競合が発生する可能性があります。
	"terminal.integrated.suggest.builtinCompletions": {
		"pwshCode": true,
		"pwshGit": true
	},
	// `terminal.integrated.shellIntegration.enabled` が `true` に設定されている場合、サポートされているシェル (PowerShell v7+) の試験的なターミナル Intellisense 候補が有効になります。
	// 
	// シェル統合を手動でインストールする場合は、シェル統合スクリプトを呼び出す前に、`VSCODE_SUGGEST` を `1` に設定する必要があります。
	"terminal.integrated.suggest.enabled": false,
	// 入力中に候補を自動的に表示するかどうかを制御します。また、提案が特殊文字によってトリガーされるかどうかを制御する `terminal.integrated.suggest.suggestOnTriggerCharacters`-設定にも注意してください。
	"terminal.integrated.suggest.quickSuggestions": true,
	// `Enter` キー (`タブ` ではない) を使用して結果を承諾するときに候補をすぐに実行するかどうかを制御します。
	//  - ignore: 候補を無視し、入力を完了せずにシェルに直接送信します。これは既定値として使用されるため、候補ウィジェットはできるだけ目立たないようにします。
	//  - never: `Enter` キーで実行しません。
	//  - exactMatch: 候補が完全に入力されたときに `Enter` キーで実行します。
	//  - exactMatchIgnoreExtension: 候補が完全に入力されたとき、または拡張子を含めずにファイルが入力されたときに `Enter` キーで実行します。
	//  - always: 常に `Enter` キーで実行します。
	"terminal.integrated.suggest.runOnEnter": "ignore",
	// トリガー文字の入力時に候補が自動的に表示されるようにするかどうかを制御します。
	"terminal.integrated.suggest.suggestOnTriggerCharacters": true,
	// 既定でターミナル アイコンに関連付けるテーマ カラー ID。
	"terminal.integrated.tabs.defaultColor": null,
	// 既定でターミナル アイコンに関連付けるcodicon ID。
	//  - add: $(add)
	//  - plus: $(plus)
	//  - gist-new: $(gist-new)
	//  - repo-create: $(repo-create)
	//  - lightbulb: $(lightbulb)
	//  - light-bulb: $(light-bulb)
	//  - repo: $(repo)
	//  - repo-delete: $(repo-delete)
	//  - gist-fork: $(gist-fork)
	//  - repo-forked: $(repo-forked)
	//  - git-pull-request: $(git-pull-request)
	//  - git-pull-request-abandoned: $(git-pull-request-abandoned)
	//  - record-keys: $(record-keys)
	//  - keyboard: $(keyboard)
	//  - tag: $(tag)
	//  - git-pull-request-label: $(git-pull-request-label)
	//  - tag-add: $(tag-add)
	//  - tag-remove: $(tag-remove)
	//  - person: $(person)
	//  - person-follow: $(person-follow)
	//  - person-outline: $(person-outline)
	//  - person-filled: $(person-filled)
	//  - git-branch: $(git-branch)
	//  - git-branch-create: $(git-branch-create)
	//  - git-branch-delete: $(git-branch-delete)
	//  - source-control: $(source-control)
	//  - mirror: $(mirror)
	//  - mirror-public: $(mirror-public)
	//  - star: $(star)
	//  - star-add: $(star-add)
	//  - star-delete: $(star-delete)
	//  - star-empty: $(star-empty)
	//  - comment: $(comment)
	//  - comment-add: $(comment-add)
	//  - alert: $(alert)
	//  - warning: $(warning)
	//  - search: $(search)
	//  - search-save: $(search-save)
	//  - log-out: $(log-out)
	//  - sign-out: $(sign-out)
	//  - log-in: $(log-in)
	//  - sign-in: $(sign-in)
	//  - eye: $(eye)
	//  - eye-unwatch: $(eye-unwatch)
	//  - eye-watch: $(eye-watch)
	//  - circle-filled: $(circle-filled)
	//  - primitive-dot: $(primitive-dot)
	//  - close-dirty: $(close-dirty)
	//  - debug-breakpoint: $(debug-breakpoint)
	//  - debug-breakpoint-disabled: $(debug-breakpoint-disabled)
	//  - debug-hint: $(debug-hint)
	//  - terminal-decoration-success: $(terminal-decoration-success)
	//  - primitive-square: $(primitive-square)
	//  - edit: $(edit)
	//  - pencil: $(pencil)
	//  - info: $(info)
	//  - issue-opened: $(issue-opened)
	//  - gist-private: $(gist-private)
	//  - git-fork-private: $(git-fork-private)
	//  - lock: $(lock)
	//  - mirror-private: $(mirror-private)
	//  - close: $(close)
	//  - remove-close: $(remove-close)
	//  - x: $(x)
	//  - repo-sync: $(repo-sync)
	//  - sync: $(sync)
	//  - clone: $(clone)
	//  - desktop-download: $(desktop-download)
	//  - beaker: $(beaker)
	//  - microscope: $(microscope)
	//  - vm: $(vm)
	//  - device-desktop: $(device-desktop)
	//  - file: $(file)
	//  - file-text: $(file-text)
	//  - more: $(more)
	//  - ellipsis: $(ellipsis)
	//  - kebab-horizontal: $(kebab-horizontal)
	//  - mail-reply: $(mail-reply)
	//  - reply: $(reply)
	//  - organization: $(organization)
	//  - organization-filled: $(organization-filled)
	//  - organization-outline: $(organization-outline)
	//  - new-file: $(new-file)
	//  - file-add: $(file-add)
	//  - new-folder: $(new-folder)
	//  - file-directory-create: $(file-directory-create)
	//  - trash: $(trash)
	//  - trashcan: $(trashcan)
	//  - history: $(history)
	//  - clock: $(clock)
	//  - folder: $(folder)
	//  - file-directory: $(file-directory)
	//  - symbol-folder: $(symbol-folder)
	//  - logo-github: $(logo-github)
	//  - mark-github: $(mark-github)
	//  - github: $(github)
	//  - terminal: $(terminal)
	//  - console: $(console)
	//  - repl: $(repl)
	//  - zap: $(zap)
	//  - symbol-event: $(symbol-event)
	//  - error: $(error)
	//  - stop: $(stop)
	//  - variable: $(variable)
	//  - symbol-variable: $(symbol-variable)
	//  - array: $(array)
	//  - symbol-array: $(symbol-array)
	//  - symbol-module: $(symbol-module)
	//  - symbol-package: $(symbol-package)
	//  - symbol-namespace: $(symbol-namespace)
	//  - symbol-object: $(symbol-object)
	//  - symbol-method: $(symbol-method)
	//  - symbol-function: $(symbol-function)
	//  - symbol-constructor: $(symbol-constructor)
	//  - symbol-boolean: $(symbol-boolean)
	//  - symbol-null: $(symbol-null)
	//  - symbol-numeric: $(symbol-numeric)
	//  - symbol-number: $(symbol-number)
	//  - symbol-structure: $(symbol-structure)
	//  - symbol-struct: $(symbol-struct)
	//  - symbol-parameter: $(symbol-parameter)
	//  - symbol-type-parameter: $(symbol-type-parameter)
	//  - symbol-key: $(symbol-key)
	//  - symbol-text: $(symbol-text)
	//  - symbol-reference: $(symbol-reference)
	//  - go-to-file: $(go-to-file)
	//  - symbol-enum: $(symbol-enum)
	//  - symbol-value: $(symbol-value)
	//  - symbol-ruler: $(symbol-ruler)
	//  - symbol-unit: $(symbol-unit)
	//  - activate-breakpoints: $(activate-breakpoints)
	//  - archive: $(archive)
	//  - arrow-both: $(arrow-both)
	//  - arrow-down: $(arrow-down)
	//  - arrow-left: $(arrow-left)
	//  - arrow-right: $(arrow-right)
	//  - arrow-small-down: $(arrow-small-down)
	//  - arrow-small-left: $(arrow-small-left)
	//  - arrow-small-right: $(arrow-small-right)
	//  - arrow-small-up: $(arrow-small-up)
	//  - arrow-up: $(arrow-up)
	//  - bell: $(bell)
	//  - bold: $(bold)
	//  - book: $(book)
	//  - bookmark: $(bookmark)
	//  - debug-breakpoint-conditional-unverified: $(debug-breakpoint-conditional-unverified)
	//  - debug-breakpoint-conditional: $(debug-breakpoint-conditional)
	//  - debug-breakpoint-conditional-disabled: $(debug-breakpoint-conditional-disabled)
	//  - debug-breakpoint-data-unverified: $(debug-breakpoint-data-unverified)
	//  - debug-breakpoint-data: $(debug-breakpoint-data)
	//  - debug-breakpoint-data-disabled: $(debug-breakpoint-data-disabled)
	//  - debug-breakpoint-log-unverified: $(debug-breakpoint-log-unverified)
	//  - debug-breakpoint-log: $(debug-breakpoint-log)
	//  - debug-breakpoint-log-disabled: $(debug-breakpoint-log-disabled)
	//  - briefcase: $(briefcase)
	//  - broadcast: $(broadcast)
	//  - browser: $(browser)
	//  - bug: $(bug)
	//  - calendar: $(calendar)
	//  - case-sensitive: $(case-sensitive)
	//  - check: $(check)
	//  - checklist: $(checklist)
	//  - chevron-down: $(chevron-down)
	//  - chevron-left: $(chevron-left)
	//  - chevron-right: $(chevron-right)
	//  - chevron-up: $(chevron-up)
	//  - chrome-close: $(chrome-close)
	//  - chrome-maximize: $(chrome-maximize)
	//  - chrome-minimize: $(chrome-minimize)
	//  - chrome-restore: $(chrome-restore)
	//  - circle-outline: $(circle-outline)
	//  - circle: $(circle)
	//  - debug-breakpoint-unverified: $(debug-breakpoint-unverified)
	//  - terminal-decoration-incomplete: $(terminal-decoration-incomplete)
	//  - circle-slash: $(circle-slash)
	//  - circuit-board: $(circuit-board)
	//  - clear-all: $(clear-all)
	//  - clippy: $(clippy)
	//  - close-all: $(close-all)
	//  - cloud-download: $(cloud-download)
	//  - cloud-upload: $(cloud-upload)
	//  - code: $(code)
	//  - collapse-all: $(collapse-all)
	//  - color-mode: $(color-mode)
	//  - comment-discussion: $(comment-discussion)
	//  - credit-card: $(credit-card)
	//  - dash: $(dash)
	//  - dashboard: $(dashboard)
	//  - database: $(database)
	//  - debug-continue: $(debug-continue)
	//  - debug-disconnect: $(debug-disconnect)
	//  - debug-pause: $(debug-pause)
	//  - debug-restart: $(debug-restart)
	//  - debug-start: $(debug-start)
	//  - debug-step-into: $(debug-step-into)
	//  - debug-step-out: $(debug-step-out)
	//  - debug-step-over: $(debug-step-over)
	//  - debug-stop: $(debug-stop)
	//  - debug: $(debug)
	//  - device-camera-video: $(device-camera-video)
	//  - device-camera: $(device-camera)
	//  - device-mobile: $(device-mobile)
	//  - diff-added: $(diff-added)
	//  - diff-ignored: $(diff-ignored)
	//  - diff-modified: $(diff-modified)
	//  - diff-removed: $(diff-removed)
	//  - diff-renamed: $(diff-renamed)
	//  - diff: $(diff)
	//  - diff-sidebyside: $(diff-sidebyside)
	//  - discard: $(discard)
	//  - editor-layout: $(editor-layout)
	//  - empty-window: $(empty-window)
	//  - exclude: $(exclude)
	//  - extensions: $(extensions)
	//  - eye-closed: $(eye-closed)
	//  - file-binary: $(file-binary)
	//  - file-code: $(file-code)
	//  - file-media: $(file-media)
	//  - file-pdf: $(file-pdf)
	//  - file-submodule: $(file-submodule)
	//  - file-symlink-directory: $(file-symlink-directory)
	//  - file-symlink-file: $(file-symlink-file)
	//  - file-zip: $(file-zip)
	//  - files: $(files)
	//  - filter: $(filter)
	//  - flame: $(flame)
	//  - fold-down: $(fold-down)
	//  - fold-up: $(fold-up)
	//  - fold: $(fold)
	//  - folder-active: $(folder-active)
	//  - folder-opened: $(folder-opened)
	//  - gear: $(gear)
	//  - gift: $(gift)
	//  - gist-secret: $(gist-secret)
	//  - gist: $(gist)
	//  - git-commit: $(git-commit)
	//  - git-compare: $(git-compare)
	//  - compare-changes: $(compare-changes)
	//  - git-merge: $(git-merge)
	//  - github-action: $(github-action)
	//  - github-alt: $(github-alt)
	//  - globe: $(globe)
	//  - grabber: $(grabber)
	//  - graph: $(graph)
	//  - gripper: $(gripper)
	//  - heart: $(heart)
	//  - home: $(home)
	//  - horizontal-rule: $(horizontal-rule)
	//  - hubot: $(hubot)
	//  - inbox: $(inbox)
	//  - issue-reopened: $(issue-reopened)
	//  - issues: $(issues)
	//  - italic: $(italic)
	//  - jersey: $(jersey)
	//  - json: $(json)
	//  - kebab-vertical: $(kebab-vertical)
	//  - key: $(key)
	//  - law: $(law)
	//  - lightbulb-autofix: $(lightbulb-autofix)
	//  - link-external: $(link-external)
	//  - link: $(link)
	//  - list-ordered: $(list-ordered)
	//  - list-unordered: $(list-unordered)
	//  - live-share: $(live-share)
	//  - loading: $(loading)
	//  - location: $(location)
	//  - mail-read: $(mail-read)
	//  - mail: $(mail)
	//  - markdown: $(markdown)
	//  - megaphone: $(megaphone)
	//  - mention: $(mention)
	//  - milestone: $(milestone)
	//  - git-pull-request-milestone: $(git-pull-request-milestone)
	//  - mortar-board: $(mortar-board)
	//  - move: $(move)
	//  - multiple-windows: $(multiple-windows)
	//  - mute: $(mute)
	//  - no-newline: $(no-newline)
	//  - note: $(note)
	//  - octoface: $(octoface)
	//  - open-preview: $(open-preview)
	//  - package: $(package)
	//  - paintcan: $(paintcan)
	//  - pin: $(pin)
	//  - play: $(play)
	//  - run: $(run)
	//  - plug: $(plug)
	//  - preserve-case: $(preserve-case)
	//  - preview: $(preview)
	//  - project: $(project)
	//  - pulse: $(pulse)
	//  - question: $(question)
	//  - quote: $(quote)
	//  - radio-tower: $(radio-tower)
	//  - reactions: $(reactions)
	//  - references: $(references)
	//  - refresh: $(refresh)
	//  - regex: $(regex)
	//  - remote-explorer: $(remote-explorer)
	//  - remote: $(remote)
	//  - remove: $(remove)
	//  - replace-all: $(replace-all)
	//  - replace: $(replace)
	//  - repo-clone: $(repo-clone)
	//  - repo-force-push: $(repo-force-push)
	//  - repo-pull: $(repo-pull)
	//  - repo-push: $(repo-push)
	//  - report: $(report)
	//  - request-changes: $(request-changes)
	//  - rocket: $(rocket)
	//  - root-folder-opened: $(root-folder-opened)
	//  - root-folder: $(root-folder)
	//  - rss: $(rss)
	//  - ruby: $(ruby)
	//  - save-all: $(save-all)
	//  - save-as: $(save-as)
	//  - save: $(save)
	//  - screen-full: $(screen-full)
	//  - screen-normal: $(screen-normal)
	//  - search-stop: $(search-stop)
	//  - server: $(server)
	//  - settings-gear: $(settings-gear)
	//  - settings: $(settings)
	//  - shield: $(shield)
	//  - smiley: $(smiley)
	//  - sort-precedence: $(sort-precedence)
	//  - split-horizontal: $(split-horizontal)
	//  - split-vertical: $(split-vertical)
	//  - squirrel: $(squirrel)
	//  - star-full: $(star-full)
	//  - star-half: $(star-half)
	//  - symbol-class: $(symbol-class)
	//  - symbol-color: $(symbol-color)
	//  - symbol-constant: $(symbol-constant)
	//  - symbol-enum-member: $(symbol-enum-member)
	//  - symbol-field: $(symbol-field)
	//  - symbol-file: $(symbol-file)
	//  - symbol-interface: $(symbol-interface)
	//  - symbol-keyword: $(symbol-keyword)
	//  - symbol-misc: $(symbol-misc)
	//  - symbol-operator: $(symbol-operator)
	//  - symbol-property: $(symbol-property)
	//  - wrench: $(wrench)
	//  - wrench-subaction: $(wrench-subaction)
	//  - symbol-snippet: $(symbol-snippet)
	//  - tasklist: $(tasklist)
	//  - telescope: $(telescope)
	//  - text-size: $(text-size)
	//  - three-bars: $(three-bars)
	//  - thumbsdown: $(thumbsdown)
	//  - thumbsup: $(thumbsup)
	//  - tools: $(tools)
	//  - triangle-down: $(triangle-down)
	//  - triangle-left: $(triangle-left)
	//  - triangle-right: $(triangle-right)
	//  - triangle-up: $(triangle-up)
	//  - twitter: $(twitter)
	//  - unfold: $(unfold)
	//  - unlock: $(unlock)
	//  - unmute: $(unmute)
	//  - unverified: $(unverified)
	//  - verified: $(verified)
	//  - versions: $(versions)
	//  - vm-active: $(vm-active)
	//  - vm-outline: $(vm-outline)
	//  - vm-running: $(vm-running)
	//  - watch: $(watch)
	//  - whitespace: $(whitespace)
	//  - whole-word: $(whole-word)
	//  - window: $(window)
	//  - word-wrap: $(word-wrap)
	//  - zoom-in: $(zoom-in)
	//  - zoom-out: $(zoom-out)
	//  - list-filter: $(list-filter)
	//  - list-flat: $(list-flat)
	//  - list-selection: $(list-selection)
	//  - selection: $(selection)
	//  - list-tree: $(list-tree)
	//  - debug-breakpoint-function-unverified: $(debug-breakpoint-function-unverified)
	//  - debug-breakpoint-function: $(debug-breakpoint-function)
	//  - debug-breakpoint-function-disabled: $(debug-breakpoint-function-disabled)
	//  - debug-stackframe-active: $(debug-stackframe-active)
	//  - circle-small-filled: $(circle-small-filled)
	//  - debug-stackframe-dot: $(debug-stackframe-dot)
	//  - terminal-decoration-mark: $(terminal-decoration-mark)
	//  - debug-stackframe: $(debug-stackframe)
	//  - debug-stackframe-focused: $(debug-stackframe-focused)
	//  - debug-breakpoint-unsupported: $(debug-breakpoint-unsupported)
	//  - symbol-string: $(symbol-string)
	//  - debug-reverse-continue: $(debug-reverse-continue)
	//  - debug-step-back: $(debug-step-back)
	//  - debug-restart-frame: $(debug-restart-frame)
	//  - debug-alt: $(debug-alt)
	//  - call-incoming: $(call-incoming)
	//  - call-outgoing: $(call-outgoing)
	//  - menu: $(menu)
	//  - expand-all: $(expand-all)
	//  - feedback: $(feedback)
	//  - git-pull-request-reviewer: $(git-pull-request-reviewer)
	//  - group-by-ref-type: $(group-by-ref-type)
	//  - ungroup-by-ref-type: $(ungroup-by-ref-type)
	//  - account: $(account)
	//  - git-pull-request-assignee: $(git-pull-request-assignee)
	//  - bell-dot: $(bell-dot)
	//  - debug-console: $(debug-console)
	//  - library: $(library)
	//  - output: $(output)
	//  - run-all: $(run-all)
	//  - sync-ignored: $(sync-ignored)
	//  - pinned: $(pinned)
	//  - github-inverted: $(github-inverted)
	//  - server-process: $(server-process)
	//  - server-environment: $(server-environment)
	//  - pass: $(pass)
	//  - issue-closed: $(issue-closed)
	//  - stop-circle: $(stop-circle)
	//  - play-circle: $(play-circle)
	//  - record: $(record)
	//  - debug-alt-small: $(debug-alt-small)
	//  - vm-connect: $(vm-connect)
	//  - cloud: $(cloud)
	//  - merge: $(merge)
	//  - export: $(export)
	//  - graph-left: $(graph-left)
	//  - magnet: $(magnet)
	//  - notebook: $(notebook)
	//  - redo: $(redo)
	//  - check-all: $(check-all)
	//  - pinned-dirty: $(pinned-dirty)
	//  - pass-filled: $(pass-filled)
	//  - circle-large-filled: $(circle-large-filled)
	//  - circle-large: $(circle-large)
	//  - circle-large-outline: $(circle-large-outline)
	//  - combine: $(combine)
	//  - gather: $(gather)
	//  - table: $(table)
	//  - variable-group: $(variable-group)
	//  - type-hierarchy: $(type-hierarchy)
	//  - type-hierarchy-sub: $(type-hierarchy-sub)
	//  - type-hierarchy-super: $(type-hierarchy-super)
	//  - git-pull-request-create: $(git-pull-request-create)
	//  - run-above: $(run-above)
	//  - run-below: $(run-below)
	//  - notebook-template: $(notebook-template)
	//  - debug-rerun: $(debug-rerun)
	//  - workspace-trusted: $(workspace-trusted)
	//  - workspace-untrusted: $(workspace-untrusted)
	//  - workspace-unknown: $(workspace-unknown)
	//  - terminal-cmd: $(terminal-cmd)
	//  - terminal-debian: $(terminal-debian)
	//  - terminal-linux: $(terminal-linux)
	//  - terminal-powershell: $(terminal-powershell)
	//  - terminal-tmux: $(terminal-tmux)
	//  - terminal-ubuntu: $(terminal-ubuntu)
	//  - terminal-bash: $(terminal-bash)
	//  - arrow-swap: $(arrow-swap)
	//  - copy: $(copy)
	//  - person-add: $(person-add)
	//  - filter-filled: $(filter-filled)
	//  - wand: $(wand)
	//  - debug-line-by-line: $(debug-line-by-line)
	//  - inspect: $(inspect)
	//  - layers: $(layers)
	//  - layers-dot: $(layers-dot)
	//  - layers-active: $(layers-active)
	//  - compass: $(compass)
	//  - compass-dot: $(compass-dot)
	//  - compass-active: $(compass-active)
	//  - azure: $(azure)
	//  - issue-draft: $(issue-draft)
	//  - git-pull-request-closed: $(git-pull-request-closed)
	//  - git-pull-request-draft: $(git-pull-request-draft)
	//  - debug-all: $(debug-all)
	//  - debug-coverage: $(debug-coverage)
	//  - run-errors: $(run-errors)
	//  - folder-library: $(folder-library)
	//  - debug-continue-small: $(debug-continue-small)
	//  - beaker-stop: $(beaker-stop)
	//  - graph-line: $(graph-line)
	//  - graph-scatter: $(graph-scatter)
	//  - pie-chart: $(pie-chart)
	//  - bracket: $(bracket)
	//  - bracket-dot: $(bracket-dot)
	//  - bracket-error: $(bracket-error)
	//  - lock-small: $(lock-small)
	//  - azure-devops: $(azure-devops)
	//  - verified-filled: $(verified-filled)
	//  - newline: $(newline)
	//  - layout: $(layout)
	//  - layout-activitybar-left: $(layout-activitybar-left)
	//  - layout-activitybar-right: $(layout-activitybar-right)
	//  - layout-panel-left: $(layout-panel-left)
	//  - layout-panel-center: $(layout-panel-center)
	//  - layout-panel-justify: $(layout-panel-justify)
	//  - layout-panel-right: $(layout-panel-right)
	//  - layout-panel: $(layout-panel)
	//  - layout-sidebar-left: $(layout-sidebar-left)
	//  - layout-sidebar-right: $(layout-sidebar-right)
	//  - layout-statusbar: $(layout-statusbar)
	//  - layout-menubar: $(layout-menubar)
	//  - layout-centered: $(layout-centered)
	//  - target: $(target)
	//  - indent: $(indent)
	//  - record-small: $(record-small)
	//  - error-small: $(error-small)
	//  - terminal-decoration-error: $(terminal-decoration-error)
	//  - arrow-circle-down: $(arrow-circle-down)
	//  - arrow-circle-left: $(arrow-circle-left)
	//  - arrow-circle-right: $(arrow-circle-right)
	//  - arrow-circle-up: $(arrow-circle-up)
	//  - layout-sidebar-right-off: $(layout-sidebar-right-off)
	//  - layout-panel-off: $(layout-panel-off)
	//  - layout-sidebar-left-off: $(layout-sidebar-left-off)
	//  - blank: $(blank)
	//  - heart-filled: $(heart-filled)
	//  - map: $(map)
	//  - map-horizontal: $(map-horizontal)
	//  - fold-horizontal: $(fold-horizontal)
	//  - map-filled: $(map-filled)
	//  - map-horizontal-filled: $(map-horizontal-filled)
	//  - fold-horizontal-filled: $(fold-horizontal-filled)
	//  - circle-small: $(circle-small)
	//  - bell-slash: $(bell-slash)
	//  - bell-slash-dot: $(bell-slash-dot)
	//  - comment-unresolved: $(comment-unresolved)
	//  - git-pull-request-go-to-changes: $(git-pull-request-go-to-changes)
	//  - git-pull-request-new-changes: $(git-pull-request-new-changes)
	//  - search-fuzzy: $(search-fuzzy)
	//  - comment-draft: $(comment-draft)
	//  - send: $(send)
	//  - sparkle: $(sparkle)
	//  - insert: $(insert)
	//  - mic: $(mic)
	//  - thumbsdown-filled: $(thumbsdown-filled)
	//  - thumbsup-filled: $(thumbsup-filled)
	//  - coffee: $(coffee)
	//  - snake: $(snake)
	//  - game: $(game)
	//  - vr: $(vr)
	//  - chip: $(chip)
	//  - piano: $(piano)
	//  - music: $(music)
	//  - mic-filled: $(mic-filled)
	//  - repo-fetch: $(repo-fetch)
	//  - copilot: $(copilot)
	//  - lightbulb-sparkle: $(lightbulb-sparkle)
	//  - robot: $(robot)
	//  - sparkle-filled: $(sparkle-filled)
	//  - diff-single: $(diff-single)
	//  - diff-multiple: $(diff-multiple)
	//  - surround-with: $(surround-with)
	//  - share: $(share)
	//  - git-stash: $(git-stash)
	//  - git-stash-apply: $(git-stash-apply)
	//  - git-stash-pop: $(git-stash-pop)
	//  - vscode: $(vscode)
	//  - vscode-insiders: $(vscode-insiders)
	//  - code-oss: $(code-oss)
	//  - run-coverage: $(run-coverage)
	//  - run-all-coverage: $(run-all-coverage)
	//  - coverage: $(coverage)
	//  - github-project: $(github-project)
	//  - map-vertical: $(map-vertical)
	//  - fold-vertical: $(fold-vertical)
	//  - map-vertical-filled: $(map-vertical-filled)
	//  - fold-vertical-filled: $(fold-vertical-filled)
	//  - go-to-search: $(go-to-search)
	//  - percentage: $(percentage)
	//  - sort-percentage: $(sort-percentage)
	//  - attach: $(attach)
	//  - go-to-editing-session: $(go-to-editing-session)
	//  - edit-session: $(edit-session)
	//  - code-review: $(code-review)
	//  - dialog-error: $(dialog-error)
	//  - dialog-warning: $(dialog-warning)
	//  - dialog-info: $(dialog-info)
	//  - dialog-close: $(dialog-close)
	//  - tree-item-expanded: $(tree-item-expanded)
	//  - tree-filter-on-type-on: $(tree-filter-on-type-on)
	//  - tree-filter-on-type-off: $(tree-filter-on-type-off)
	//  - tree-filter-clear: $(tree-filter-clear)
	//  - tree-item-loading: $(tree-item-loading)
	//  - menu-selection: $(menu-selection)
	//  - menu-submenu: $(menu-submenu)
	//  - menubar-more: $(menubar-more)
	//  - scrollbar-button-left: $(scrollbar-button-left)
	//  - scrollbar-button-right: $(scrollbar-button-right)
	//  - scrollbar-button-up: $(scrollbar-button-up)
	//  - scrollbar-button-down: $(scrollbar-button-down)
	//  - toolbar-more: $(toolbar-more)
	//  - quick-input-back: $(quick-input-back)
	//  - drop-down-button: $(drop-down-button)
	//  - symbol-customcolor: $(symbol-customcolor)
	//  - export: $(export)
	//  - workspace-unspecified: $(workspace-unspecified)
	//  - newline: $(newline)
	//  - thumbsdown-filled: $(thumbsdown-filled)
	//  - thumbsup-filled: $(thumbsup-filled)
	//  - git-fetch: $(git-fetch)
	//  - lightbulb-sparkle-autofix: $(lightbulb-sparkle-autofix)
	//  - debug-breakpoint-pending: $(debug-breakpoint-pending)
	"terminal.integrated.tabs.defaultIcon": "terminal",
	// タイトルの右側に表示されるターミナルの説明を制御します。変数は以下のコンテキストに基づいて置換されます。
	// - `${cwd}`: 現在のターミナルの作業ディレクトリ
	// - `${cwdFolder}`: 現在のターミナルの作業ディレクトリ。マルチ ルート ワークスペースの場合は表示され、または初期作業ディレクトリと値が異なる場合にはシングル ルート ワークスペースに表示されます。Windows では、シェル統合が有効になっている場合にのみ表示されます。
	// - `${workspaceFolder}`: ターミナルを起動したワークスペース
	// - `${workspaceFolderName}`: ターミナルを起動したワークスペースの `name`
	// - `${local}`: リモート ワークスペース内のローカル ターミナルを示す
	// - `${process}`: ターミナル プロセスの名前
	// - `${separator}`: 値か固定のテキストで囲われたとき、条件付きの区切り記号 (` - `) を表示します。
	// - `${sequence}`: プロセスによってターミナルに指定された名前
	// - `${task}`: このターミナルがタスクに関連付けられていることを示す
	"terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",
	// ターミナル タブの状態がアニメーションをサポートするかどうかを制御します (例: 進行中のタスク)。
	"terminal.integrated.tabs.enableAnimation": true,
	// ターミナルの側面にターミナル タブを一覧として表示するかどうかを制御します。これを無効にすると、代わりにドロップダウンが表示されます。
	"terminal.integrated.tabs.enabled": true,
	// シングル クリックでタブのターミナルにフォーカスするかどうかを制御します。
	//  - singleClick: ターミナル タブをクリックした場合にターミナルにフォーカス
	//  - doubleClick: ターミナル タブをダブルクリックした場合にターミナルにフォーカス
	"terminal.integrated.tabs.focusMode": "doubleClick",
	// ターミナル タブ ビューが特定の条件下で非表示になるかどうかを制御します。
	//  - never: ターミナル タブ ビューを常に表示する
	//  - singleTerminal: ターミナルを1つだけ開いたときに、ターミナル タブ ビューを非表示にします
	//  - singleGroup: ターミナル グループを 1 つだけ開いた場合に、ターミナル タブ ビューを非表示にします
	"terminal.integrated.tabs.hideCondition": "singleTerminal",
	// ターミナル タブの場所を、実際のターミナルの左または右のいずれかに制御します。
	//  - left: ターミナルの左側にターミナル タブ ビューを表示する
	//  - right: ターミナルの右側にターミナル タブ ビューを表示する
	"terminal.integrated.tabs.location": "right",
	// `terminal.integrated.tabs.title#` と `#terminal.integrated.tabs.description` で使用される区切り記号。
	"terminal.integrated.tabs.separator": " - ",
	// 新しいターミナル ボタンの横にターミナルの分割ボタンと強制終了ボタンを表示するかどうかを制御します。
	//  - always: 常にアクションを表示する
	//  - singleTerminal: 唯一のターミナルが開かれている場合にアクションを表示する
	//  - singleTerminalOrNarrow: 唯一のターミナルが開かれているか、タブ ビューがその狭義のテキストなし状態である場合にアクションを表示する
	//  - never: アクションを表示しない
	"terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",
	// アクティブなターミナル情報を表示します。これは、タブ内にタイトルが表示されない場合に特に役立ちます。
	//  - always: アクティブなターミナルを常に表示する
	//  - singleTerminal: アクティブなターミナルが開かれている唯一のターミナルを表示する
	//  - singleTerminalOrNarrow: アクティブなターミナルが開かれている唯一のターミナルを表示するか、タブ ビューがその狭義のテキストなし状態である場合
	//  - never: アクティブなターミナルを常に非表示にする
	"terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",
	// ターミナル タイトルを制御します。変数は以下のコンテキストに基づいて置換されます。
	// - `${cwd}`: 現在のターミナルの作業ディレクトリ
	// - `${cwdFolder}`: 現在のターミナルの作業ディレクトリ。マルチ ルート ワークスペースの場合は表示され、または初期作業ディレクトリと値が異なる場合にはシングル ルート ワークスペースに表示されます。Windows では、シェル統合が有効になっている場合にのみ表示されます。
	// - `${workspaceFolder}`: ターミナルを起動したワークスペース
	// - `${workspaceFolderName}`: ターミナルを起動したワークスペースの `name`
	// - `${local}`: リモート ワークスペース内のローカル ターミナルを示す
	// - `${process}`: ターミナル プロセスの名前
	// - `${separator}`: 値か固定のテキストで囲われたとき、条件付きの区切り記号 (` - `) を表示します。
	// - `${sequence}`: プロセスによってターミナルに指定された名前
	// - `${task}`: このターミナルがタスクに関連付けられていることを示す
	"terminal.integrated.tabs.title": "${process}",
	// タブ位置のセル数。
	"terminal.integrated.tabStopWidth": 8,
	// ターミナルでの文字幅を評価するときに使用する Unicode のバージョンを制御します。絵文字や他のワイド文字で占める領域の大きさが正しくない場合や、バックスペースによる削除の量が多すぎるか少なすぎる場合には、この設定を微調整してみてください。
	//  - 6: バージョン 6 の Unicode。これは古いバージョンであり、古いシステムで適切に動作するはずです。
	//  - 11: バージョン 11 の Unicode。このバージョンでは、Unicode の最新バージョンを使用する最新のシステムでのサポートが向上しています。
	"terminal.integrated.unicodeVersion": "11",
	// ターミナルのドロップダウンに WSL ディストリビューションを表示するかどうかを制御します
	"terminal.integrated.useWslProfiles": true,
	// Windows ターミナル プロセス通信に ConPTY を使用するかどうかを指定します (Windows 10 のビルド番号 18309 以上が必要です)。これが false の場合は、winpty が使用されます。
	"terminal.integrated.windowsEnableConpty": true,
	// ダブルクリックして単語を選択し、フォールバック 'word' リンクの検出時に、単語区切り記号と見なされるすべての文字を含む文字列。これはリンク検出に使用されるため、リンクの検出時に使用される ':' などの文字を含めると、'file:10:5' などのリンクの行と列の部分が無視されます。
	"terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’“”|",
	// ファイルを開くとき、問題ビューに自動的にそのファイルを表示するかどうかを制御します
	"problems.autoReveal": true,
	// ファイルとフォルダーのエラーと警告を表示します。オフの場合、`problems.visibility` に上書きされます。
	"problems.decorations.enabled": true,
	// 問題ビューの既定の表示モードを制御します。
	"problems.defaultViewMode": "tree",
	// 有効にすると、現在発生している問題がステータス バーに表示されます。
	"problems.showCurrentInStatus": false,
	// 問題のナビゲート順序を制御します。
	//  - severity: 重大度順に並べ替えられた問題をナビゲートする
	//  - position: 位置順に並べ替えられた問題をナビゲートする
	"problems.sortOrder": "severity",
	// エディターとワークベンチ全体で問題を表示するかどうかを制御します。
	"problems.visibility": true,
	// ナビゲーション階層リンクを有効/無効にします。
	"breadcrumbs.enabled": true,
	// 階層リンク ビューでファイル パスをどのように表示するかどうかを制御します。
	//  - on: 階層リンク ビューでファイル パスを表示します。
	//  - off: 階層リンク ビューでファイル パスを表示しません。
	//  - last: 階層リンク ビューでファイル パスの最後の要素のみを表示します。
	"breadcrumbs.filePath": "on",
	// 階層リンク項目をアイコンでレンダリングします。
	"breadcrumbs.icons": true,
	// 有効にすると、階層リンクに '配列' 記号が表示されます。
	"breadcrumbs.showArrays": true,
	// 有効にすると、階層リンクに `ブール型` 記号が表示されます。
	"breadcrumbs.showBooleans": true,
	// 有効にすると、階層リンクに `クラス` 記号が表示されます。
	"breadcrumbs.showClasses": true,
	// 有効にすると、階層リンクに `定数` の記号が表示されます。
	"breadcrumbs.showConstants": true,
	// 有効にすると、階層リンクに 'コンストラクター' 記号が表示されます。
	"breadcrumbs.showConstructors": true,
	// 有効にすると、階層リンクに `enumMember` 記号が表示されます。
	"breadcrumbs.showEnumMembers": true,
	// 有効にすると、階層リンクに '列挙型' 記号が表示されます。
	"breadcrumbs.showEnums": true,
	// 有効にすると、階層リンクに 'イベント' 記号が表示されます。
	"breadcrumbs.showEvents": true,
	// 有効にすると、階層リンクに `フィールド` 記号が表示されます。
	"breadcrumbs.showFields": true,
	// 有効にすると、階層リンクに `ファイル` 記号が表示されます。
	"breadcrumbs.showFiles": true,
	// 有効にすると、階層リンクに '関数' 記号が表示されます。
	"breadcrumbs.showFunctions": true,
	// 有効にすると、階層リンクに `インターフェイス` 記号が表示されます。
	"breadcrumbs.showInterfaces": true,
	// 有効にすると、階層リンクに `キー` 記号が表示されます。
	"breadcrumbs.showKeys": true,
	// 有効にすると、階層リンクに `メソッド` 記号が表示されます。
	"breadcrumbs.showMethods": true,
	// 有効にすると、階層リンクに `モジュール` 記号が表示されます。
	"breadcrumbs.showModules": true,
	// 有効にすると、階層リンクに `名前空間` 記号が表示されます。
	"breadcrumbs.showNamespaces": true,
	// 有効にすると、階層リンクに `null` 記号が表示されます。
	"breadcrumbs.showNull": true,
	// 有効にすると、階層リンクに `数値` 記号が表示されます。
	"breadcrumbs.showNumbers": true,
	// 有効にすると、階層リンクに `オブジェクト` 記号が表示されます。
	"breadcrumbs.showObjects": true,
	// 有効にすると、階層リンクに `演算子` 記号が表示されます。
	"breadcrumbs.showOperators": true,
	// 有効にすると、階層リンクに 'パッケージ' 記号が表示されます。
	"breadcrumbs.showPackages": true,
	// 有効にすると、階層リンクに 'プロパティ' 記号が表示されます。
	"breadcrumbs.showProperties": true,
	// 有効にすると、階層リンクに `文字列` 記号が表示されます。
	"breadcrumbs.showStrings": true,
	// 有効にすると、階層リンクに `構造体` 記号が表示されます。
	"breadcrumbs.showStructs": true,
	// 有効にすると、階層リンクに 'typeParameter' 記号が表示されます。
	"breadcrumbs.showTypeParameters": true,
	// 有効にすると、階層リンクに `変数` 記号が表示されます。
	"breadcrumbs.showVariables": true,
	// 階層リンク ビューでシンボルをどのように表示するかどうかを制御します。
	//  - on: 階層リンク ビューですべてのシンボルを表示します。
	//  - off: 階層リンク ビューでシンボルを表示しません。
	//  - last: 階層リンク ビューで現在のシンボルのみを表示します。
	"breadcrumbs.symbolPath": "on",
	// 階層リンクのアウトライン ビューでシンボルを並び替える方法を制御します。
	//  - position: ファイル内での位置順にシンボルのアウトラインを表示します。
	//  - name: アルファベット順でシンボル アウトラインを表示します。
	//  - type: シンボルの種類の順番でシンボル アウトラインを表示します。
	"breadcrumbs.symbolSortOrder": "position",
	// アウトライン項目を折りたたむか展開するかを制御します。
	//  - alwaysCollapse: すべての項目を折りたたむ。
	//  - alwaysExpand: すべての項目を展開します。
	"outline.collapseItems": "alwaysExpand",
	// アイコン付きでアウトライン要素を表示します。
	"outline.icons": true,
	// アウトライン要素のエラーと警告にはバッジを使用します。オフの場合、`problems.visibility` に上書きされます。
	"outline.problems.badges": true,
	// アウトライン要素のエラーと警告には色を使用します。オフの場合、`problems.visibility` に上書きされます。
	"outline.problems.colors": true,
	// アウトライン要素にエラーと警告を表示します。オフの場合、`problems.visibility` に上書きされます。
	"outline.problems.enabled": true,
	// 有効にすると、アウトラインに `配列` 記号が表示されます。
	"outline.showArrays": true,
	// 有効にすると、アウトラインに `ブール型` 記号が表示されます。
	"outline.showBooleans": true,
	// 有効にすると、アウトラインに `クラス` 記号が表示されます。
	"outline.showClasses": true,
	// 有効にすると、アウトラインに `定数` 記号が表示されます。
	"outline.showConstants": true,
	// 有効にすると、アウトラインに `コンストラクター` 記号が表示されます。
	"outline.showConstructors": true,
	// 有効にすると、アウトラインに `enumMember` 記号が表示されます。
	"outline.showEnumMembers": true,
	// 有効にすると、アウトラインに `列挙型` 記号が表示されます。
	"outline.showEnums": true,
	// 有効にすると、アウトラインに `イベント` 記号が表示されます。
	"outline.showEvents": true,
	// 有効にすると、アウトラインに `フィールド` 記号が表示されます。
	"outline.showFields": true,
	// 有効にすると、アウトラインに `ファイル` 記号が表示されます。
	"outline.showFiles": true,
	// 有効にすると、アウトラインに `関数` 記号が表示されます。
	"outline.showFunctions": true,
	// 有効にすると、アウトラインに `インターフェイス` 記号が表示されます。
	"outline.showInterfaces": true,
	// 有効にすると、アウトラインに `キー` 記号が表示されます。
	"outline.showKeys": true,
	// 有効にすると、アウトラインに `メソッド` 記号が表示されます。
	"outline.showMethods": true,
	// 有効にすると、アウトラインに `モジュール` 記号が表示されます。
	"outline.showModules": true,
	// 有効にすると、アウトラインに `名前空間` 記号が表示されます。
	"outline.showNamespaces": true,
	// 有効にすると、アウトラインに `null` 記号が表示されます。
	"outline.showNull": true,
	// 有効にすると、アウトラインに `数値` 記号が表示されます。
	"outline.showNumbers": true,
	// 有効にすると、アウトラインに `オブジェクト` 記号が表示されます。
	"outline.showObjects": true,
	// 有効にすると、アウトラインに `演算子` 記号が表示されます。
	"outline.showOperators": true,
	// 有効にすると、アウトラインに `パッケージ` 記号が表示されます。
	"outline.showPackages": true,
	// 有効にすると、アウトラインに `プロパティ` 記号が表示されます。
	"outline.showProperties": true,
	// 有効にすると、アウトラインに `文字列` 記号が表示されます。
	"outline.showStrings": true,
	// 有効にすると、アウトラインに `構造体` 記号が表示されます。
	"outline.showStructs": true,
	// 有効にすると、アウトラインに `typeParameter` 記号が表示されます。
	"outline.showTypeParameters": true,
	// 有効にすると、アウトラインに `変数` 記号が表示されます。
	"outline.showVariables": true,
	// 試験段階。リストの最後までスクロールしたとき、タイムライン ビューで次のページの項目を読み込むかどうかを制御します。
	"timeline.pageOnScroll": false,
	// タイムライン ビューで、既定の場合と、さらに項目を読み込む場合に表示する項目数。'null' (既定値) に設定すると、タイムライン ビューの表示可能な領域に基づいて自動的にページ サイズが選択されます。
	"timeline.pageSize": null,
	// clojure 言語が優先される設定を構成します。
	"[clojure]": {
		"diffEditor.ignoreTrimWhitespace": false
	},
	// coffeescript 言語が優先される設定を構成します。
	"[coffeescript]": {
		"diffEditor.ignoreTrimWhitespace": false
	},
	// csharp 言語が優先される設定を構成します。
	"[csharp]": {
		"editor.maxTokenizationLineLength": 2500
	},
	// css 言語が優先される設定を構成します。
	"[css]": {
		"editor.suggest.insertMode": "replace"
	},
	// dockercompose 言語が優先される設定を構成します。
	"[dockercompose]": {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced"
	},
	// dockerfile 言語が優先される設定を構成します。
	"[dockerfile]": {
		"editor.quickSuggestions": {
			"strings": true
		}
	},
	// fsharp 言語が優先される設定を構成します。
	"[fsharp]": {
		"diffEditor.ignoreTrimWhitespace": false
	},
	// git-commit 言語が優先される設定を構成します。
	"[git-commit]": {
		"editor.rulers": [
			50,
			72
		],
		"editor.wordWrap": "off",
		"workbench.editor.restoreViewState": false
	},
	// git-rebase 言語が優先される設定を構成します。
	"[git-rebase]": {
		"workbench.editor.restoreViewState": false
	},
	// go 言語が優先される設定を構成します。
	"[go]": {
		"editor.insertSpaces": false
	},
	// handlebars 言語が優先される設定を構成します。
	"[handlebars]": {
		"editor.suggest.insertMode": "replace"
	},
	// html 言語が優先される設定を構成します。
	"[html]": {
		"editor.suggest.insertMode": "replace"
	},
	// jade 言語が優先される設定を構成します。
	"[jade]": {
		"diffEditor.ignoreTrimWhitespace": false
	},
	// javascript 言語が優先される設定を構成します。
	"[javascript]": {
		"editor.maxTokenizationLineLength": 2500
	},
	// json 言語が優先される設定を構成します。
	"[json]": {
		"editor.quickSuggestions": {
			"strings": true
		},
		"editor.suggest.insertMode": "replace"
	},
	// jsonc 言語が優先される設定を構成します。
	"[jsonc]": {
		"editor.quickSuggestions": {
			"strings": true
		},
		"editor.suggest.insertMode": "replace"
	},
	// less 言語が優先される設定を構成します。
	"[less]": {
		"editor.suggest.insertMode": "replace"
	},
	// makefile 言語が優先される設定を構成します。
	"[makefile]": {
		"editor.insertSpaces": false
	},
	// markdown 言語が優先される設定を構成します。
	"[markdown]": {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false,
		"diffEditor.ignoreTrimWhitespace": false,
		"editor.wordWrap": "on",
		"editor.quickSuggestions": {
			"comments": "off",
			"strings": "off",
			"other": "off"
		}
	},
	// plaintext 言語が優先される設定を構成します。
	"[plaintext]": {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false
	},
	// python 言語が優先される設定を構成します。
	"[python]": {
		"diffEditor.ignoreTrimWhitespace": false,
		"editor.formatOnType": true,
		"editor.wordBasedSuggestions": "off"
	},
	// scss 言語が優先される設定を構成します。
	"[scss]": {
		"editor.suggest.insertMode": "replace"
	},
	// search-result 言語が優先される設定を構成します。
	"[search-result]": {
		"editor.lineNumbers": "off"
	},
	// shellscript 言語が優先される設定を構成します。
	"[shellscript]": {
		"files.eol": "\n"
	},
	// yaml 言語が優先される設定を構成します。
	"[yaml]": {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced",
		"diffEditor.ignoreTrimWhitespace": false
	},
	// コマンド センターにチャット アクションのメニューを表示するかどうかを制御します (`window.commandCenter` が必要です)。
	"chat.commandCenter.enabled": true,
	// Whether to always ask before saving files with changes made by chat.
	"chat.editing.alwaysSaveWithGeneratedChanges": false,
	// Whether to show a confirmation before removing a request and its associated edits.
	"chat.editing.confirmEditRequestRemoval": true,
	// Whether to show a confirmation before retrying a request and its associated edits.
	"chat.editing.confirmEditRequestRetry": true,
	// Whether to show a toggle to restore an earlier version of a file that was edited in a chat editing session request.
	"chat.editing.experimental.enableRestoreFile": false,
	// チャット コード ブロック内のフォント ファミリを制御します。
	"chat.editor.fontFamily": "default",
	// チャット コード ブロック内のフォント サイズをピクセル単位で制御します。
	"chat.editor.fontSize": 14,
	// チャット コード ブロック内のフォントの太さを制御します。
	"chat.editor.fontWeight": "default",
	// チャット コード ブロック内の行の高さをピクセル単位で制御します。フォント サイズから行の高さを計算するには 0 を使用します。
	"chat.editor.lineHeight": 0,
	// チャット コード ブロックで行を折り返すかどうかを制御します。
	"chat.editor.wordWrap": "off",
	// パネル チャットのチャット参加者の自動検出を有効にします。
	"chat.experimental.detectParticipant.enabled": null,
	// 
	//  - legacy: 従来の差分アルゴリズムを使用します。
	//  - advanced: 高度な差分アルゴリズムを使用します。
	"mergeEditor.diffAlgorithm": "advanced",
	// Controls if deletions in base or one of the inputs should be indicated by a vertical bar.
	"mergeEditor.showDeletionMarkers": true,
	// Enable experimental multi diff editor.
	"multiDiffEditor.experimental.enabled": true,
	// 有効にすると、新しい実行中のプロセスが検出され、リッスンしているポートが自動的に転送されます。この設定を無効にしても、すべてのポートの転送を防ぐわけではありません。無効にした場合でも、拡張機能は引き続きポートの転送が可能であり、一部の URL を開ことにより、ポートが引き続き転送されます。`remote.autoForwardPortsSource` も参照してください。
	"remote.autoForwardPorts": true,
	// ポートを自動転送し、'remote.autoForwardPortsSource' が 'process' に既定で設定されている場合に、'process' から 'hybrid' への切り替えをトリガーする自動転送ポートの数。フォールバックを無効にするには、'0' に設定します。`remote.autoForwardPortsFallback` が設定されていないが、`remote.autoForwardPortsSource` が設定されている場合、`remote.autoForwardPortsFallback` は 0 に設定されているものとして扱われます。
	"remote.autoForwardPortsFallback": 20,
	// `remote.autoForwardPorts#` が true の場合にポートが自動的に転送されるソースを設定します。`#remote.autoForwardPorts#` が false の場合、 `#remote.autoForwardPortsSource` は既に転送されているポートに関する情報を検索するために使用されます。Windows と macOS のリモートでは、`process` および `hybrid` オプションは効果がなく、`output` が使用されます。
	//  - process: ポートは、開始済みで、ポートが含まれるプロセスを監視することによって検出されたときに自動的に転送されます。
	//  - output: ポートは、ターミナルとデバッグの出力を読み取ることによって検出されたときに自動的に転送されます。ポートを使用するすべてのプロセスで統合ターミナルまたはデバッグ コンソールに出力されるわけではないため、一部のポートは見逃されます。出力に基づいて転送されたポートは、再度読み込むか、ユーザーがポート ビューでポートを閉じない限り、"転送を解除" されることはありません。
	//  - hybrid: ポートは、ターミナルとデバッグの出力を読み取ることによって検出されたときに自動的に転送されます。ポートを使用するすべてのプロセスで統合ターミナルまたはデバッグ コンソールに出力されるわけではないため、一部のポートは見逃されます。ポートは、終了するこのポートをリッスンするプロセスをモニタリングすることで"転送が解除" されます。
	"remote.autoForwardPortsSource": "process",
	// 有効にすると、拡張機能がローカルにダウンロードされ、リモート上にインストールされます。
	"remote.downloadExtensionsLocally": false,
	// 拡張子の種類をオーバーライドします。'ui' 拡張機能はローカル マシンでインストールされて実行されますが、'workspace' 拡張機能はリモートで実行されます。この設定を使用して拡張機能の既定の種類をオーバーライドすることで、その拡張機能をローカルまたはリモートのいずれかでインストールして有効にするかどうかを指定します。
	"remote.extensionKind": {
		"pub.name": [
			"ui"
		]
	},
	// ターミナルとデバッグ コンソールから開いたときに、ポートを持つローカル URL を転送するかどうかを制御します。
	"remote.forwardOnOpen": true,
	// ポート転送に使用するローカル ホスト名を指定します。
	"remote.localPortHost": "localhost",
	// 設定 `remote.portsAttributes` からプロパティを取得しないすべてのポートに適用される既定のプロパティを設定します。例:
	// 
	// '''
	// {
	//  "onAutoForward": "ignore"
	// }
	// '''
	"remote.otherPortsAttributes": {},
	// 特定のポート番号が転送されるときに適用されるプロパティを設定します。例:
	// 
	// ```
	// "3000": {
	//   "label": "Application"
	// },
	// "40000-55000": {
	//   "onAutoForward": "ignore"
	// },
	// ".+\\/server.js": {
	//  "onAutoForward": "openPreview"
	// }
	// ```
	"remote.portsAttributes": {
		"443": {
			"protocol": "https"
		},
		"8443": {
			"protocol": "https"
		}
	},
	// ワークスペースで転送したポートを復元します。
	"remote.restoreForwardedPorts": true,
	// keypress で、ユーザー補助対応のビューを閉じ、そのビューが呼び出された要素にフォーカスします。
	"accessibility.accessibleView.closeOnKeyPress": true,
	// デバッグ ウォッチ ビューで変数の変更を通知するかどうかを制御します。
	"accessibility.debugWatchVariableAnnouncements": true,
	// 位置の変更をデバウンスする必要があるかどうか
	"accessibility.signalOptions.debouncePositionChanges": false,
	// 
	"accessibility.signalOptions.experimental.delays.errorAtPosition": {},
	// Delays for all signals besides error and warning at position
	"accessibility.signalOptions.experimental.delays.general": {},
	// 
	"accessibility.signalOptions.experimental.delays.warningAtPosition": {},
	// サウンドの音量 (パーセント単位) (0 - 100)。
	"accessibility.signalOptions.volume": 70,
	// チャット要求が行われたときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.chatRequestSent": {
		"sound": "auto",
		"announcement": "auto"
	},
	// 応答を受信したときにサウンド/オーディオ キューを再生します。
	"accessibility.signals.chatResponseReceived": {
		"sound": "auto"
	},
	// 機能 (ターミナル、デバッグ コンソール、出力チャネルなど) がクリアされたときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.clear": {
		"sound": "auto",
		"announcement": "auto"
	},
	// アクセシビリティ対応差分閲覧者モードでフォーカスが削除された行に移動したとき、または次/前の変更に移動したときに、サウンド/オーディオ キューを再生します。
	"accessibility.signals.diffLineDeleted": {
		"sound": "auto"
	},
	// アクセシビリティ対応差分閲覧者モードでフォーカスが挿入された行に移動したとき、または次/前の変更に移動したときに、サウンド/オーディオ キューを再生します。
	"accessibility.signals.diffLineInserted": {
		"sound": "auto"
	},
	// アクセシビリティ対応差分閲覧者モードでフォーカスが変更された行に移動したとき、または次/前の変更に移動したときに、サウンド/オーディオ キューを再生します。
	"accessibility.signals.diffLineModified": {
		"sound": "auto"
	},
	// ファイルまたはノートブックがフォーマットされたときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.format": {
		"sound": "never",
		"announcement": "never"
	},
	// アクティブな行にブレークポイントがあるときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.lineHasBreakpoint": {
		"sound": "auto",
		"announcement": "auto"
	},
	// アクティブな行にエラーがあるときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.lineHasError": {
		"sound": "auto",
		"announcement": "auto"
	},
	// アクティブ行に、展開可能だが、折りたたまれた領域があるときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.lineHasFoldedArea": {
		"sound": "auto",
		"announcement": "auto"
	},
	// アクティブな行にインライン提案があるときにサウンド/オーディオ キューを再生します。
	"accessibility.signals.lineHasInlineSuggestion": {
		"sound": "auto"
	},
	// アクティブな行に警告があるときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.lineHasWarning": {
		"sound": "auto",
		"announcement": "auto"
	},
	// インレイ ヒントのないインレイ ヒントを含む行を読み上げようとしているときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.noInlayHints": {
		"sound": "auto",
		"announcement": "auto"
	},
	// ノートブック セルの実行が正常に完了したときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.notebookCellCompleted": {
		"sound": "auto",
		"announcement": "auto"
	},
	// ノートブック セルの実行に失敗したときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.notebookCellFailed": {
		"sound": "auto",
		"announcement": "auto"
	},
	// デバッガーがブレークポイントで停止したときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.onDebugBreak": {
		"sound": "auto",
		"announcement": "auto"
	},
	// アクティブな行に警告があるときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.positionHasError": {
		"sound": "auto",
		"announcement": "auto"
	},
	// アクティブな行に警告があるときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.positionHasWarning": {
		"sound": "auto",
		"announcement": "auto"
	},
	// 進行中にループが発生しているときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.progress": {
		"sound": "auto",
		"announcement": "auto"
	},
	// ファイルが保存されたときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.save": {
		"sound": "never",
		"announcement": "never"
	},
	// タスクが完了したときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.taskCompleted": {
		"sound": "auto",
		"announcement": "auto"
	},
	// タスクが失敗したときに (ゼロ以外の終了コード)、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.taskFailed": {
		"sound": "auto",
		"announcement": "auto"
	},
	// ターミナル ベルが鳴っているときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.terminalBell": {
		"sound": "off",
		"announcement": "auto"
	},
	// ターミナル コマンドが失敗したとき (終了コードが 0 以外の場合)、またはそのような終了コードを持つコマンドにアクセス可能なビューで移動したときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.terminalCommandFailed": {
		"sound": "auto",
		"announcement": "auto"
	},
	// ターミナル コマンドが成功したとき (終了コードが 0 の場合)、またはそのような終了コードを持つコマンドにアクセス可能なビューで移動したときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.terminalCommandSucceeded": {
		"sound": "auto",
		"announcement": "auto"
	},
	// ターミナルのクイック修正が利用可能になったときに、シグナル (サウンド (オーディオ キュー) および/またはアナウンス (アラート)) を再生します。
	"accessibility.signals.terminalQuickFix": {
		"sound": "auto",
		"announcement": "auto"
	},
	// 音声録音が開始されたときに、サウンド/オーディオ キューを再生します。
	"accessibility.signals.voiceRecordingStarted": {
		"sound": "on"
	},
	// 音声録音が停止したときに、サウンド/オーディオ キューを再生します。
	"accessibility.signals.voiceRecordingStopped": {
		"sound": "auto"
	},
	// ワークベンチでリンクに下線を付けるかどうかを制御します。
	"accessibility.underlineLinks": false,
	// コメント ウィジェットまたはコメントを含むファイルで実行できるアクションに関する情報を提供します。
	"accessibility.verbosity.comments": true,
	// デバッグ コンソールが実行され、デバッグ ビューレットがフォーカスされているときに、デバッグ コンソールのアクセシビリティ ヘルプ ダイアログにアクセスする方法に関する情報を提供します。これを有効にするにはウィンドウの再読み込みが必要であることに注意してください。
	"accessibility.verbosity.debug": true,
	// 差分エディターにフォーカスがあるときに変更を移動する方法に関する情報を提供します。
	"accessibility.verbosity.diffEditor": true,
	// 差分エディターがアクティブなエディターになるタイミングを示します。
	"accessibility.verbosity.diffEditorActive": true,
	// 空のテキスト エディターで関連するアクションに関する情報を提供します。
	"accessibility.verbosity.emptyEditorHint": true,
	// ユーザー補助対応のビューでホバーを開く方法に関する情報を提供します。
	"accessibility.verbosity.hover": true,
	// インライン エディター チャットのアクセシビリティ ヘルプ メニューにアクセスする方法に関する情報を提供し、入力にフォーカスがあるときの機能を使用する方法を説明するヒントを提供します。
	"accessibility.verbosity.inlineChat": true,
	// インライン補完のホバーとユーザー補助対応のビューにアクセスする方法に関する情報を提供します。
	"accessibility.verbosity.inlineCompletions": true,
	// 行がフォーカスされているときにキー バインド エディターでキー バインドを変更する方法に関する情報を提供します。
	"accessibility.verbosity.keybindingsEditor": true,
	// ノートブック セルがフォーカスされているときにセル コンテナーまたは内部エディターにフォーカスを移動する方法に関する情報を提供します。
	"accessibility.verbosity.notebook": true,
	// ユーザー補助対応のビューで通知を開く方法に関する情報を提供します。
	"accessibility.verbosity.notification": true,
	// チャット入力にフォーカスがある場合にチャット ヘルプ メニューにアクセスする方法に関する情報を提供します。
	"accessibility.verbosity.panelChat": true,
	// Repl 入力に関連するアクションに関する情報を指定します。
	"accessibility.verbosity.replInputHint": true,
	// ターミナルにフォーカスがある場合に、ターミナルのアクセシビリティ ヘルプ メニューにアクセスする方法について説明します。
	"accessibility.verbosity.terminal": true,
	// アクセシブル ビューでチュートリアルを開く方法に関する情報を提供します。
	"accessibility.verbosity.walkthrough": true,
	// ネイティブ ダイアログ、メニュー、タイトル バーなどのネイティブ UI 要素のカラー モードを設定します。OS がライトなカラー モードで構成されている場合でも、ウィンドウにはダークなシステム カラー テーマを選択できます。`workbench.colorTheme` 設定に基づいて自動的に調整するように構成することもできます。
	// 
	// 注: `window.autoDetectColorScheme` が有効になっている場合、この設定は無視されます。
	//  - default: ネイティブ ウィジェットの色は、システム カラーと一致します。
	//  - auto: ライト カラーのテーマにはライトなネイティブ ウィジェットの色を使用し、ダーク テーマには濃色を使用します。
	//  - light: ライトなネイティブ ウィジェットの色を使用します。
	//  - dark: ダークなネイティブ ウィジェットの色を使用します。
	"window.systemColorTheme": "default",
	// リモート トンネル アクセスに登録されている名前。設定されていない場合は、ホスト名が使用されます。
	"remote.tunnels.access.hostNameOverride": "",
	// リモート トンネル アクセスが有効になっているときに、このコンピューターがスリープ状態にならないようにします。
	"remote.tunnels.access.preventSleep": false,
	// Emmet 省略記法を展開すべきでない言語の配列。
	"emmet.excludeLanguages": [
		"markdown"
	],
	// 各パスに Emmet の syntaxProfile や snippet ファイルを含めることができるパスの配列。
	// 競合が発生した場合、後のパスのプロファイルまたはスニペットが前のパスのプロファイルまたはスニペットを上書きします。
	// 詳細およびスニペット ファイルの例については、https://code.visualstudio.com/docs/editor/emmet を参照してください。
	"emmet.extensionsPath": [],
	// 既定ではサポートされていない言語の emmet 省略記法を有効にします。言語と Emmet でサポートされる言語との間のマッピングをこちらに追加してください。
	//  例: `{"vue-html": "html", "javascript": "javascriptreact"}`
	"emmet.includeLanguages": {},
	// `false` に設定すると、現在位置が emmet 省略記法の展開に有効かどうかを判別するためにファイル全体が解析されます。`true` に設定すると、CSS、SCSS、Less ファイルでの現在位置周辺のコンテンツのみが解析されます。
	"emmet.optimizeStylesheetParsing": true,
	// Emmet の一部のアクションやリゾルバーの動作の変更に使用される基本設定。
	"emmet.preferences": {},
	// 利用できる Emmet 省略記法を候補として表示します。スタイルシートや emmet.showExpandedAbbreviation を `"never"` に設定していると適用されません。
	"emmet.showAbbreviationSuggestions": true,
	// 展開された Emmet 省略形を候補として表示します。
	// オプション `"inMarkupAndStylesheetFilesOnly"` は、html、haml、jade、slim、xml、xsl、css、scss、sass、less、stylus に適用されます。
	// オプション `"always"` は、マークアップと css に関係なくファイルのすべての部分に適用されます。
	"emmet.showExpandedAbbreviation": "always",
	// `true` の場合、Emmet 候補をスニペットとして表示して `editor.snippetSuggestions` 設定に従ってそれらを並び替えます。
	"emmet.showSuggestionsAsSnippets": false,
	// 指定した構文に対してプロファイルを定義するか、特定の規則がある独自のプロファイルをご使用ください。
	"emmet.syntaxProfiles": {},
	// 有効にすると、入力候補が表示されない場合でも Tab キーを押すと Emmet 省略記法が展開されます。無効にした場合でも、TAB キーを押すと、表示される入力候補を受け入れられます。
	"emmet.triggerExpansionOnTab": false,
	// 'true' の場合、Emmet はインライン補完を使用して拡張を提案します。この設定が 'true' の間にインライン以外の完了項目プロバイダーが頻繁に表示されないようにするには、'#editor.quickSuggestions#' を 'inline' に、あるいは 'other' 項目を 'off' にします。
	"emmet.useInlineCompletions": false,
	// Emmet のスニペットで使用される変数。
	"emmet.variables": {},
	// 強制的なプッシュ (--force-with-lease の有無にかかわらず) を有効にするかどうかを制御します。
	"git.allowForcePush": false,
	// pre-commit と commit-msg フックを実行しないコミットを許可するかどうかを制御します。
	"git.allowNoVerifyCommit": false,
	// ステージ済み変更のリソース グループを常に表示します。
	"git.alwaysShowStagedChangesResourceGroup": false,
	// すべてのコミットのサインオフ フラグを制御します。
	"git.alwaysSignOff": false,
	// true に設定すると、現在の Git リポジトリの既定のリモートからコミットが自動的にフェッチされます。[すべて] に設定すると、すべてのリモートからフェッチされます。
	"git.autofetch": false,
	// `git.autofetch` が有効な場合の git の自動フェッチ間隔 (秒単位)。
	"git.autofetchPeriod": 180,
	// 自動更新の有効/無効。
	"git.autorefresh": true,
	// レポジトリを自動的に検出するかどうかを構成します。
	//  - true: 現在開いているフォルダーのサブフォルダーと、開いているファイルの親フォルダーの両方をスキャンします。
	//  - false: リポジトリの自動的なスキャンを無効にします。
	//  - subFolders: 現在開いているフォルダーのサブフォルダーをスキャンします。
	//  - openEditors: 開いているファイルの親フォルダーをスキャンします。
	"git.autoRepositoryDetection": true,
	// プルする前にすべての変更をスタッシュし、プル成功後に復元します。
	"git.autoStash": false,
	// 新しいブランチを作成するときに使用されるプレフィックス。
	"git.branchPrefix": "",
	// 保護されたブランチのリスト。既定では、変更が保護されたブランチにコミットされる前にプロンプトが表示されます。プロンプトは、'#git.branchProtectionPrompt#' 設定を使用して制御できます。
	"git.branchProtection": [],
	// 保護されたブランチに変更をコミットする前にプロンプトを表示するかどうかを制御します。
	//  - alwaysCommit: 常に保護されたブランチに変更をコミットします。
	//  - alwaysCommitToNewBranch: 新しいブランチへの変更をコミットします。
	//  - alwaysPrompt: 変更が保護されたブランチにコミットされる前に、常にプロンプトを表示します。
	"git.branchProtectionPrompt": "alwaysPrompt",
	// ランダムに生成されたブランチ名に使用されるディクショナリの一覧。各値は、ブランチ名のセグメントを生成するために使用されるディクショナリを表します。サポートされている辞書: `adjectives`, `animals`, `colors`, `numbers`。
	//  - adjectives: ランダムな形容詞
	//  - animals: ランダムな動物の名前
	//  - colors: ランダムな色の名前
	//  - numbers: 100 と 999 の間のランダムな数
	"git.branchRandomName.dictionary": [
		"adjectives",
		"animals"
	],
	// 新しいブランチの作成時にランダムな名前を生成するかどうかを制御します。
	"git.branchRandomName.enable": false,
	// ブランチの並べ替え順序を制御します。
	"git.branchSortOrder": "committerdate",
	// 新しいブランチ名を検証するための正規表現。
	"git.branchValidationRegex": "",
	// 新しいブランチ名の空白文字を置き換え、ランダムに生成されたブランチ名のセグメントを区切る文字。
	"git.branchWhitespaceChar": "-",
	// 'Checkout to...' を実行するときに一覧表示される Git 参照の種類を制御します。
	//  - local: ローカル ブランチ
	//  - tags: タグ
	//  - remote: リモート ブランチ
	"git.checkoutType": [
		"local",
		"remote",
		"tags"
	],
	// 変更をスタッシュ、コミット、破棄、ステージング、またはステージング解除する場合に差分エディターを自動的に閉じるかどうかを制御します。
	"git.closeDiffOnOperation": false,
	// 'stdout' のログが[git output](command:git.showOutput) に記録される Git コマンドの一覧 (commit、push など)。Git コマンドでクライアント側フックが構成されている場合、クライアント側フックの 'stdout' のログも[git output](command:git.showOutput) に記録されます。
	"git.commandsToLog": [],
	// 'Git: Commit Empty' コマンドの空のコミットの作成を常に確認します。
	"git.confirmEmptyCommits": true,
	// 強制的なプッシュの前に確認を求めるかどうかを制御します。
	"git.confirmForcePush": true,
	// 確認せずにコミットする前に確認メッセージを表示するかどうかを制御します。
	"git.confirmNoVerifyCommit": true,
	// Git リポジトリを同期する前に確認してください。
	"git.confirmSync": true,
	// Git カウント バッジを制御します。
	//  - all: すべての変更をカウントします。
	//  - tracked: 追跡済みの変更のみカウントします。
	//  - off: カウンターをオフにします。
	"git.countBadge": "all",
	// Git が配色とバッジをエクスプローラーと [開いているエディター] ビューに提供するかどうかを制御します。
	"git.decorations.enabled": true,
	// 新しい Git リポジトリを初期化するときの既定のブランチの名前 (例: main、trunk、development)。空に設定すると、Git で構成された既定のブランチ名が使用されます。**注:** Git バージョン '2.28.0' 以降が必要です。
	"git.defaultBranchName": "main",
	// Git リポジトリをクローンする既定の場所。
	"git.defaultCloneDirectory": null,
	// Git サブモジュールを自動的に検出するかどうかを制御します。
	"git.detectSubmodules": true,
	// 検出された Git サブモジュールの制限を制御します。
	"git.detectSubmodulesLimit": 10,
	// GPG、X.509、または SSH によるコミットの署名を有効にします。
	"git.enableCommitSigning": false,
	// Git が有効かどうか。
	"git.enabled": true,
	// ステージされた変更がない場合はすべての変更をコミットします。
	"git.enableSmartCommit": false,
	// ステータス バーに Git Sync コマンドを表示するかどうかを制御します。
	"git.enableStatusBarSync": true,
	// 有効にすると、プル時にすべてのブランチをフェッチします。それ以外の場合は、現在のブランチだけをフェッチします。
	"git.fetchOnPull": false,
	// 同期コマンドを実行するときに、注釈付きタグをすべてプッシュします。
	"git.followTagsWhenSync": false,
	// This setting is now deprecated, please use `github.gitAuthentication` instead.
	// 
	"git.githubAuthentication": null,
	// 無視する Git リポジトリのリスト。
	"git.ignoredRepositories": [],
	// 古い Git である警告を無視します。
	"git.ignoreLegacyWarning": false,
	// リポジトリ内に変更が多い場合の警告を無視します。
	"git.ignoreLimitWarning": false,
	// Git が見つからない場合の警告を無視します。
	"git.ignoreMissingGitWarning": false,
	// ブランチがプル時にリベースされた可能性があると思われる場合、警告を無視します。
	"git.ignoreRebaseWarning": false,
	// ファイル ツリーでのサブモジュールの変更を無視します。
	"git.ignoreSubmodules": false,
	// Git 2.25 - 2.26 が Windows にインストールされている場合は警告を無視します。
	"git.ignoreWindowsGit27Warning": false,
	// コミット メッセージの入力検証診断を表示するかどうかを制御します。
	"git.inputValidation": false,
	// 警告を表示するコミット メッセージの長さのしきい値を制御します。
	"git.inputValidationLength": 72,
	// 警告を表示するためのコミット メッセージの件名長のしきい値を制御します。'#git.inputValidationLength#' の値を継承する場合には設定解除します。
	"git.inputValidationSubjectLength": 50,
	// 現在競合しているファイルのマージ エディターを開きます。
	"git.mergeEditor": false,
	// 複製後にリポジトリを自動的に開くかどうかを制御します。
	//  - always: 常に現在のウィンドウで開きます。
	//  - alwaysNewWindow: 常に新しいウィンドウで開きます。
	//  - whenNoFolderOpen: 開いているフォルダーがない場合は現在のウィンドウでのみ開きます。
	//  - prompt: 常にアクションを確認します。
	"git.openAfterClone": "prompt",
	// 変更をクリックすると差分エディターを開くかどうかを制御します。そうでなければ通常のエディターを開きます。
	"git.openDiffOnClick": true,
	// ワークスペースの親フォルダー内または開いているファイルのどちらでのリポジトリを開く必要があるのかを制御します。
	//  - always: 常にワークスペースの親フォルダーまたは開いているファイルでリポジトリを開きます。
	//  - never: ワークスペースの親フォルダーまたは開いているファイルでリポジトリを開きません。
	//  - prompt: ワークスペースの親フォルダーまたは開いているファイルでリポジトリを開く前に、ダイアログを表示します。
	"git.openRepositoryInParentFolders": "prompt",
	// git コマンドの実行後にソース管理ビューの状態を楽観的に更新するかどうかを制御します。
	"git.optimisticUpdate": true,
	// Git 実行可能ファイルのパスとファイル名 (例: Windows の場合は `C:\Program Files\Git\bin\git.exe`)。検索する複数のパスを含む文字列値の配列を指定することもできます。
	"git.path": null,
	// コミットの成功後、git コマンドを実行します。
	//  - none: コミット後、任意のコマンドを実行しません。
	//  - push: コミットの成功後、'git push' を実行します。
	//  - sync: コミットが成功した後、'git pull' と 'git push' を実行します。
	"git.postCommitCommand": "none",
	// コミット前に Git が保存していないファイルを確認すべきかどうかを制御します。
	//  - always: 保存されていないファイルがないか確認します。
	//  - staged: 保存されていないステージング済みファイルのみを確認します。
	//  - never: このチェックを無効にします。
	"git.promptToSaveFilesBeforeCommit": "always",
	// 変更をスタッシュする前に Git で保存していないファイルを確認すべきかどうかを制御します。
	//  - always: 保存されていないファイルがないか確認します。
	//  - staged: 保存されていないステージング済みファイルのみを確認します。
	//  - never: このチェックを無効にします。
	"git.promptToSaveFilesBeforeStash": "always",
	// フェッチ時に取り除きます。
	"git.pruneOnFetch": false,
	// 出力方向のコミットがないブランチを、チェックアウト前に早送りするかどうかを制御します。
	"git.pullBeforeCheckout": false,
	// プルするときにすべてのタグをフェッチします。
	"git.pullTags": true,
	// 同期コマンドの実行時に Git にリベースの使用を強制します。
	"git.rebaseWhenSync": false,
	// コミット後に最後に実行された git コマンドを覚えておいてください。
	"git.rememberPostCommitCommand": false,
	// pull コマンドの実行時にタグの競合が発生した場合に、ローカル タグをリモート タグに自動的に置き換えます。
	"git.replaceTagsWhenPull": false,
	// `git.autoRepositoryDetection` が `true` または `subFolders` に設定されている場合に Git リポジトリのスキャン中に無視されるフォルダーのリスト。
	"git.repositoryScanIgnoredFolders": [
		"node_modules"
	],
	// '#git.autoRepositoryDetection#' が 'true' もしくは 'subFolders' であるとき、Git リポジトリのワークスペース フォルダーをスキャンする際に使用される深さを制御します。制限なしとするためには、'-1' として設定可能です。
	"git.repositoryScanMaxDepth": 1,
	// 明示的な Git ユーザーの構成が必要かどうかを制御するか、指定されていない場合は Git による推測を許可します。
	"git.requireGitUserConfig": true,
	// Git リポジトリを検索するパスのリスト。
	"git.scanRepositories": [],
	// ソース管理ビューにアクション ボタンを表示するかどうかを制御します。
	"git.showActionButton": {
		"commit": true,
		"publish": true,
		"sync": true
	},
	// Git ソース管理パネルにコミットの入力を表示するかどうかを制御します。
	"git.showCommitInput": true,
	// Git 変更の表示内にインラインのファイルを開くアクションを表示するかどうかを制御します。
	"git.showInlineOpenFileAction": true,
	// Git アクションに進行状況を表示するかどうかを制御します。
	"git.showProgress": true,
	// プッシュが成功したときに通知を表示するかどうかを制御します。
	"git.showPushSuccessNotification": false,
	// 名前変更と見なされる追加/削除されたファイルのペアの変更に対する類似性インデックスのしきい値 (ファイルのサイズと比較した追加/削除の量) を制御します。**注意:** Git バージョン `2.18.0` 以降が必要です。
	"git.similarityThreshold": 50,
	// スマート コミットで変更を自動的にステージングするかどうかを制御します。
	//  - all: すべての変更を自動的にステージします。
	//  - tracked: 自動的にステージングされた変更箇所のみ。
	"git.smartCommitChanges": "all",
	// Git 状態コマンドで解析できる変更回数の制限方法を制御します。0 に設定すると制限なしにすることができます。
	"git.statusLimit": 10000,
	// スマート コミットを有効にすることを推奨します (ステージング済み変更がない場合、すべての変更をコミットします)。
	"git.suggestSmartCommit": true,
	// ユーザーが操作を中止できる同期アクションの実行時に通知が表示されるかどうかを制御します。
	"git.supportCancellation": false,
	// 統合ターミナルで生成される Git プロセスの認証ハンドラーとして VS Code を有効にするかどうかを制御します。注意: この設定の変更を反映させるには、ターミナルを再起動する必要があります。
	"git.terminalAuthentication": true,
	// 統合ターミナルで生成される Git プロセスの Git エディターとして VS Code を有効にするかどうかを制御します。注意: この設定の変更を反映させるには、ターミナルを再起動する必要があります。
	"git.terminalGitEditor": false,
	// タイムライン ビューでアイテムに使用する日付を制御します。
	//  - committed: コミットされた日付を使用する
	//  - authored: 作成日を使用する
	"git.timeline.date": "committed",
	// タイムライン ビューにコミット作成者を表示するかどうかを制御します。
	"git.timeline.showAuthor": true,
	// コミットされていない変更をタイムライン ビューに表示するかどうかを制御します。
	"git.timeline.showUncommitted": false,
	// 追跡対象外の変更の動作を制御します。
	//  - mixed: 追跡対象および追跡対象外のすべての変更は、一緒に表示され、均等に動作します。
	//  - separate: 追跡されていない変更は、ソース管理ビューに個別に表示されます。それらは、複数のアクションからも除外されます。
	//  - hidden: 追跡対象外の変更は非表示になり、複数のアクションから除外されます。
	"git.untrackedChanges": "mixed",
	// コミット入力ボックスからのメッセージを既定のスタッシュ メッセージとして使用するかどうかを制御します。
	"git.useCommitInputAsStashMessage": false,
	// コミット入力ボックスにメッセージが指定されていない場合に、コミット メッセージの作成にフル テキスト エディターを使用するかどうかを制御します。
	"git.useEditorAsCommitInput": true,
	// 強制プッシュで、より安全な force-if-includes バリアントを使用するかどうかを制御します。注: この設定では、'#git.useForcePushWithLease#' 設定を有効にし、Git バージョン '2.30.0' 以降が必要です。
	"git.useForcePushIfIncludes": true,
	// force プッシュより安全な force-with-lease 方式を使用するかどうかを制御します。
	"git.useForcePushWithLease": true,
	// 統合バージョンを使用するために GIT_ASKPASS を上書きするかどうかを制御します。
	"git.useIntegratedAskPass": true,
	// 「#git.useEditorAsCommitInput#」が有効になっている場合は、冗長出力を有効化してください。
	"git.verboseCommit": false,
	// GitHub リポジトリのリポジトリ ルールに対してクエリを実行するかどうかを制御します
	"github.branchProtection": true,
	// VS Code 内で Git コマンドの自動 GitHub 認証を有効にするかどうかを制御します。
	"github.gitAuthentication": true,
	// GitHub リポジトリの複製に使用するプロトコルを制御します
	"github.gitProtocol": "https",
	// GitHub Enterprise Server URI
	"github-enterprise.uri": "",
	// Grunt タスク検出の有効化を制御します。Grunt タスク検出を行うと、開いているワークスペース内のファイルが実行される可能性があります。
	"grunt.autoDetect": "off",
	// Gulp タスク検出の有効化を制御します。Gulp タスク検出を行うと、開いているワークスペース内のファイルが実行される可能性があります。
	"gulp.autoDetect": "off",
	// Experimental feature to serialize the Jupyter notebook in a worker thread.
	"ipynb.experimental.serialization": false,
	// ipynb ノートブック ファイルの Markdown セルへの画像の貼り付け機能を有効または無効にします。貼り付けられた画像は、セルに添付ファイルとして挿入されます。
	"ipynb.pasteImagesAsAttachments.enabled": true,
	// Jake タスク検出の有効化を制御します。Jake タスク検出を行うと、開いているワークスペース内のファイルが実行される可能性があります。
	"jake.autoDetect": "off",
	// 組み込みのマークダウン プレビューでの数式のレンダリングを有効/無効にします。
	"markdown.math.enabled": true,
	// カスタム マクロのコレクションです。各マクロはキーと値のペアであり、キーは新しいコマンド名、値はマクロの展開形です。
	"markdown.math.macros": {},
	// ミュート時にビデオの再生を自動的に開始します。
	"mediaPreview.video.autoPlay": false,
	// ビデオを自動的にループさせます。
	"mediaPreview.video.loop": false,
	// マージ競合を解決した後で、次のマージの競合に自動的に移動するかどうか。
	"merge-conflict.autoNavigateNextConflict.enabled": false,
	// エディター内のマージ競合ブロックのコード レンズを作成します。
	"merge-conflict.codeLens.enabled": true,
	// エディター内のマージ競合ブロック用デコレータを作成します。
	"merge-conflict.decorators.enabled": true,
	// マージの競合の変更を比較するときに、差分ビューを開く場所を制御します。
	//  - Current: 現在のエディター グループで差分ビューを開きます。
	//  - Beside: 現在のエディター グループの隣に差分ビューを開きます。
	//  - Below: 現在のエディター グループの下にある差分ビューを開きます。
	"merge-conflict.diffViewPosition": "Current",
	// Microsoft ソブリン クラウド認証プロバイダーで使用するソブリン クラウドのカスタム構成です。この機能を使用するには、これと、`microsoft-sovereign-cloud.environment` を 'custom' に設定することが必要です。
	"microsoft-sovereign-cloud.customEnvironment": {},
	// 認証に使用するソブリン クラウドです。`custom` を選択した場合は、`microsoft-sovereign-cloud.customEnvironment` も設定する必要があります。
	//  - ChinaCloud: Azure China
	//  - USGovernment: Azure 米国政府機関
	//  - custom: カスタム Microsoft ソブリン クラウド
	"microsoft-sovereign-cloud.environment": "",
	// Microsoft 認証ライブラリ (MSAL) を使用して、Microsoft アカウントでサインインします。
	"microsoft.useMsal": false,
	// '#debug.node.autoAttach#' がオンの場合に、自動的にアタッチしてデバッグするプロセスを構成します。'--inspect' フラグで起動されるノード プロセスは、この設定に関係なく、常にアタッチされます。
	//  - always: ターミナルで起動されるすべての Node.js プロセスに自動アタッチします。
	//  - smart: node_modules フォルダーにないスクリプトを実行しているときに自動アタッチします。
	//  - onlyWithFlag: `--inspect` が指定されている場合にのみ自動アタッチします。
	//  - disabled: オート アタッチが無効で、ステータス バーに表示されません。
	"debug.javascript.autoAttachFilter": "disabled",
	// "スマート" `debug.javascript.autoAttachFilter` モードでアタッチするタイミングを決定するために glob パターンを構成します。`$KNOWN_TOOLS$` は、共通テストとコード ランナーの名前の一覧で置き換えられます。[VS Code ドキュメントで詳細をご確認ください](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns)。
	"debug.javascript.autoAttachSmartPattern": [
		"${workspaceFolder}/**",
		"!**/node_modules/**",
		"**/$KNOWN_TOOLS$/**"
	],
	// リモート Web アプリをデバッグするときに、リモート サーバーを自動的にローカル マシンにトンネルするかどうかを構成します。
	"debug.javascript.automaticallyTunnelRemoteServer": true,
	// 条件付きブレークポイントでエラーが発生したときに停止するかどうかを指定します。
	"debug.javascript.breakOnConditionalError": false,
	// npm スクリプトで "実行" と "デバッグ" のコード レンズが表示される場所。"すべて" のスクリプトまたはスクリプト セクションの "上" に表示するか、"表示しない" を指定できます。
	"debug.javascript.codelens.npmScripts": "top",
	// デバッグ時に使用したオプションによって、デバッグ ターミナル内からクリックしたリンクが開きます。"false" に設定にすると、この動作を無効にできます。
	"debug.javascript.debugByLinkOptions": "on",
	// 指定されていない場合に起動構成に使用される、既定の 'runtimeExecutable'。これは、Node.js またはブラウザーのインストールのカスタム パスを構成するために使用できます。
	"debug.javascript.defaultRuntimeExecutable": {
		"pwa-node": "node"
	},
	// それをサポートするターゲットの試験的なネットワーク ビューを有効にします。
	"debug.javascript.enableNetworkView": false,
	// 'デバッグ: Node.js のプロセスにアタッチ' コマンドでプロセスをデバッグするときに使用する既定のオプション
	"debug.javascript.pickAndAttachOptions": {},
	// デバッガーでソース マップなどのリソースを読み込むときに使用する要求オプションです。ソースマップで認証が必要な場合または自己署名証明書を使用する場合などに、これを構成する必要がある可能性があります。オプションは、[`got`](https://github.com/sindresorhus/got) ライブラリを使用して要求を作成するために使用されます。
	// 
	// 通常、証明書の検証を無効にするためには、`{ "https": { "rejectUnauthorized": false } }` をパスします。
	"debug.javascript.resourceRequestOptions": {},
	// JavaScript デバッグ ターミナルおよび npm スクリプトの既定の起動オプション。
	"debug.javascript.terminalOptions": {},
	// 元のファイルを読み取ることができない sourcemapped ファイルが自動的にマップ解除されるかどうかを構成します。これが False (既定) の場合は、プロンプトが表示されます。
	"debug.javascript.unmapMissingSources": false,
	// npm スクリプトを自動的に検出するかどうかを制御します。
	"npm.autoDetect": "on",
	// エクスプローラー コンテキスト メニューから、フォルダーに含まれる NPM スクリプトの実行を有効にします。
	"npm.enableRunFromFolder": false,
	// The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
	// 最上位の 'package.json' ファイルがない場合は、npm スクリプトのエクスプローラー ビューを有効にします。
	"npm.enableScriptExplorer": false,
	// 自動スクリプト検出から除外するフォルダーの glob パターンを構成します。
	"npm.exclude": "",
	// https://registry.npmjs.org および https://registry.bower.io からデータをフェッチして、npm 依存関係に対してオート コンプリートとホバー機能に関する情報を提供します。
	"npm.fetchOnlinePackageInfo": true,
	// スクリプトを実行するために使用するパッケージ マネージャー。
	//  - auto: ロック ファイルとインストールされたパッケージ マネージャーに基づいてスクリプトを実行するためにどのパッケージ マネージャーを使用するかを自動検出します。
	//  - npm: スクリプトを実行するためのパッケージ マネージャーとして npm を使用します。
	//  - yarn: スクリプトを実行するためのパッケージ マネージャーとして yarn を使用します。
	//  - pnpm: スクリプトを実行するためのパッケージ マネージャーとして pnpm を使用します。
	//  - bun: スクリプトを実行するためのパッケージ マネージャーとして bun を使用します。
	"npm.packageManager": "auto",
	// `--silent` オプションを使用して npm コマンドを実行する。
	"npm.runSilent": false,
	// NPM スクリプト エクスプローラーで使用される既定のクリック アクション: `open` または `run`、既定値は `open` です。
	"npm.scriptExplorerAction": "open",
	// NPM スクリプト ビューから除外する必要があるスクリプトを示す正規表現の配列。
	"npm.scriptExplorerExclude": [],
	// スクリプトの [実行] と [デバッグ] コマンドでホバーを表示します。
	"npm.scriptHover": true,
	// CodeLens 参照を選択するときに '参照のクイック表示' または '参照の検索' を呼び出すかどうかを制御します。
	//  - peek: 参照をピーク エディターで表示します。
	//  - view: 参照を別のビューに表示します。
	"references.preferredLocation": "peek",
	// 単純なブラウザーにフォーカスが置かれたときに表示されるフローティング インジケーターを有効または無効にします。
	"simpleBrowser.focusLockIndicator.enabled": true,
	// The associated document types to be linted.
	"htmlhint.documentSelector": [
		"html",
		"htm"
	],
	// Control whether HTMLHint is enabled for HTML files or not.
	"htmlhint.enable": true,
	// The HTMLHint options object to provide args to the HTMLHint command.
	"htmlhint.options": {},
	// Points to the flake8 exectuable.
	"cornflakes.linter.executablePath": "flake8",
	// Whether the linter is run on save, on type or disabled.
	"cornflakes.linter.run": "onSave",
	// Depreciated: This setting has been renamed to `git-graph.commitDetailsView.autoCenter`
	// Automatically center the commit details view when it is opened.
	"git-graph.autoCenterCommitDetailsView": true,
	// Depreciated: This setting has been renamed to `git-graph.referenceLabels.combineLocalAndRemoteBranchLabels`
	// Combine local and remote branch labels if they refer to the same branch, and are on the same commit.
	"git-graph.combineLocalAndRemoteBranchLabels": true,
	// Automatically center the Commit Details View when it is opened.
	"git-graph.commitDetailsView.autoCenter": true,
	// Render the File Tree in the Commit Details View in a compacted form, such that folders with a single child folder are compressed into a single combined folder element.
	"git-graph.commitDetailsView.fileView.fileTree.compactFolders": true,
	// Sets the default type of File View used in the Commit Details View. This can be overridden per repository using the controls on the right side of the Commit Details View.
	//  - File Tree: Display files in a tree structure.
	//  - File List: Display files in a list (useful for repositories with deep folder structures).
	"git-graph.commitDetailsView.fileView.type": "File Tree",
	// Specifies where the Commit Details View is rendered in the Git Graph View.
	//  - Inline: Show the Commit Details View inline with the graph & commits.
	//  - Docked to Bottom: Show the Commit Details View docked to the bottom of the Git Graph View.
	"git-graph.commitDetailsView.location": "Inline",
	// Depreciated: This setting has been renamed to `git-graph.commitDetailsView.fileView.fileTree.compactFolders`
	// Render the File Tree in the Commit Details / Comparison View in a compacted form, such that folders with a single child folder are compressed into a single combined folder element.
	"git-graph.commitDetailsViewFileTreeCompactFolders": true,
	// Depreciated: This setting has been renamed to `git-graph.commitDetailsView.location`
	// Specifies where the Commit Details View is rendered in the Git Graph view.
	//  - Inline: Show the Commit Details View inline with the graph
	//  - Docked to Bottom: Show the Commit Details View docked to the bottom of the Git Graph view
	"git-graph.commitDetailsViewLocation": "Inline",
	// Depreciated: This setting has been renamed to `git-graph.repository.commits.order`
	// Specifies the order of commits on the Git Graph view. See [git log](https://git-scm.com/docs/git-log#_commit_ordering) for more information on each order option.
	//  - date: Show commits in the commit timestamp order.
	//  - author-date: Show commits in the author timestamp order.
	//  - topo: Avoid showing commits on multiple lines of history intermixed.
	"git-graph.commitOrdering": "date",
	// Customise which context menu actions are visible. For example, if you want to hide the rebase action from the branch context menu, a suitable value for this setting is `{ "branch": { "rebase": false } }`. For more information of how to configure this setting, view the documentation [here](https://github.com/mhutchie/vscode-git-graph/wiki/Extension-Settings#context-menu-actions-visibility).
	"git-graph.contextMenuActionsVisibility": {},
	// An array of Custom Branch Glob Patterns to be shown in the 'Branches' dropdown. Example: [{"name": "Feature Requests", "glob": "heads/feature/*"}]
	"git-graph.customBranchGlobPatterns": [],
	// An array of custom Emoji Shortcode mappings. Example: [{"shortcode": ":sparkles:", "emoji":"✨"}]
	"git-graph.customEmojiShortcodeMappings": [],
	// An array of custom Pull Request providers that can be used in the "Pull Request Creation" Integration. For information on how to configure this setting, see the documentation [here](https://github.com/mhutchie/vscode-git-graph/wiki/Configuring-a-custom-Pull-Request-Provider).
	"git-graph.customPullRequestProviders": [],
	// Specifies the date format to be used in the "Date" column on the Git Graph View.
	//  - Date & Time: Show the date and time (e.g. "24 Mar 2019 21:34")
	//  - Date Only: Show the date only (e.g. "24 Mar 2019")
	//  - ISO Date & Time: Show the ISO date and time (e.g. "2019-03-24 21:34")
	//  - ISO Date Only: Show the ISO date only (e.g. "2019-03-24")
	//  - Relative: Show relative times (e.g. "5 minutes ago")
	"git-graph.date.format": "Date & Time",
	// Specifies the date type to be displayed in the "Date" column on the Git Graph View.
	//  - Author Date: Use the author date of a commit.
	//  - Commit Date: Use the committer date of a commit.
	"git-graph.date.type": "Author Date",
	// Depreciated: This setting has been renamed to `git-graph.date.format`
	// Specifies the date format to be used in the "Date" column on the Git Graph View.
	//  - Date & Time: Show the date and time, for example "24 Mar 2019 21:34"
	//  - Date Only: Show the date only, for example "24 Mar 2019"
	//  - ISO Date & Time: Show the ISO date and time, for example "2019-03-24 21:34"
	//  - ISO Date Only: Show the ISO date only, for example "2019-03-24"
	//  - Relative: Show relative times, for example "5 minutes ago"
	"git-graph.dateFormat": "Date & Time",
	// Depreciated: This setting has been renamed to `git-graph.date.type`
	// Specifies the date type to be displayed in the "Date" column on the Git Graph View.
	//  - Author Date: Use the author date of a commit
	//  - Commit Date: Use the committer date of a commit
	"git-graph.dateType": "Author Date",
	// An object specifying the default visibility of the Date, Author & Commit columns. Example: {"Date": true, "Author": true, "Commit": true}
	"git-graph.defaultColumnVisibility": {
		"Date": true,
		"Author": true,
		"Commit": true
	},
	// Depreciated: This setting has been renamed to `git-graph.commitDetailsView.fileView.type`
	// Sets the default type of File View used in the Commit Details / Comparison Views. This can be overridden per repository using the controls on the right side of the Commit Details / Comparison Views.
	//  - File Tree: Display files in a tree structure
	//  - File List: Display files in a list (useful for repositories with deep folder structures)
	"git-graph.defaultFileViewType": "File Tree",
	// Default state of the field indicating whether the tag should be pushed to a remote once it is added.
	"git-graph.dialog.addTag.pushToRemote": false,
	// Default type of the tag being added.
	"git-graph.dialog.addTag.type": "Annotated",
	// Default state of the "Reinstate Index" checkbox.
	"git-graph.dialog.applyStash.reinstateIndex": false,
	// Default state of the "No Commit" checkbox.
	"git-graph.dialog.cherryPick.noCommit": false,
	// Default state of the "Record Origin" checkbox.
	"git-graph.dialog.cherryPick.recordOrigin": false,
	// Default state of the "Check out" checkbox.
	"git-graph.dialog.createBranch.checkOut": false,
	// Default state of the "Force Delete" checkbox.
	"git-graph.dialog.deleteBranch.forceDelete": false,
	// Default state of the "Force Fetch" checkbox.
	"git-graph.dialog.fetchIntoLocalBranch.forceFetch": false,
	// Default state of the "Prune" checkbox.
	"git-graph.dialog.fetchRemote.prune": false,
	// Default state of the "Prune Tags" checkbox.
	"git-graph.dialog.fetchRemote.pruneTags": false,
	// Specifies a substitution that is automatically performed when space characters are entered or pasted into reference inputs on dialogs (e.g. Create Branch, Add Tag, etc.).
	//  - None: Don't replace spaces.
	//  - Hyphen: Replace space characters with hyphens, for example: "new branch" -> "new-branch".
	//  - Underscore: Replace space characters with underscores, for example: "new branch" -> "new_branch".
	"git-graph.dialog.general.referenceInputSpaceSubstitution": "None",
	// Default state of the "No Commit" checkbox.
	"git-graph.dialog.merge.noCommit": false,
	// Default state of the "Create a new commit even if fast-forward is possible" checkbox.
	"git-graph.dialog.merge.noFastForward": true,
	// Default state of the "Squash Commits" checkbox.
	"git-graph.dialog.merge.squashCommits": false,
	// Specifies the message format used for the squashed commit (when the "Squash Commits" option is selected).
	//  - Default: Use the squash message generated by Git Graph.
	//  - Git SQUASH_MSG: Use the detailed squash message generated by Git (stored in .git/SQUASH_MSG).
	"git-graph.dialog.merge.squashMessageFormat": "Default",
	// Default state of the "Reinstate Index" checkbox.
	"git-graph.dialog.popStash.reinstateIndex": false,
	// Default state of the "Create a new commit even if fast-forward is possible" checkbox.
	"git-graph.dialog.pullBranch.noFastForward": false,
	// Default state of the "Squash Commits" checkbox.
	"git-graph.dialog.pullBranch.squashCommits": false,
	// Specifies the message format used for the squashed commit (when the "Squash Commits" option is selected).
	//  - Default: Use the squash message generated by Git Graph.
	//  - Git SQUASH_MSG: Use the detailed squash message generated by Git (stored in .git/SQUASH_MSG).
	"git-graph.dialog.pullBranch.squashMessageFormat": "Default",
	// Default state of the "Ignore Date (non-interactive rebase only)" checkbox.
	"git-graph.dialog.rebase.ignoreDate": true,
	// Default state of the "Launch Interactive Rebase in new Terminal" checkbox.
	"git-graph.dialog.rebase.launchInteractiveRebase": false,
	// Default mode to be used for the reset action.
	//  - Soft: Soft - Keep all changes, but reset head
	//  - Mixed: Mixed - Keep working tree, but reset index
	//  - Hard: Hard - Discard all changes
	"git-graph.dialog.resetCurrentBranchToCommit.mode": "Mixed",
	// Default mode to be used for the reset action.
	//  - Mixed: Mixed - Keep working tree, but reset index
	//  - Hard: Hard - Discard all changes
	"git-graph.dialog.resetUncommittedChanges.mode": "Mixed",
	// Default state of the "Include Untracked" checkbox.
	"git-graph.dialog.stashUncommittedChanges.includeUntracked": true,
	// Visual file change A|M|D|R|U indicators in the Commit Details View for users with colour blindness. In the future, this setting will enable any additional accessibility related features of Git Graph that aren't enabled by default.
	"git-graph.enhancedAccessibility": false,
	// Depreciated: This setting has been renamed to `git-graph.repository.fetchAndPrune`
	// Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any remote-tracking references that no longer exist on the remote(s).
	"git-graph.fetchAndPrune": false,
	// Depreciated: This setting has been renamed to `git-graph.repository.commits.fetchAvatars`
	// Fetch avatars of commit authors and committers. By enabling this setting, you consent to commit author and committer email addresses being sent GitHub, GitLab or Gravatar, depending on the repositories remote origin.
	"git-graph.fetchAvatars": false,
	// The character set encoding used when retrieving a specific version of repository files (e.g. in the Diff View). A list of all supported encodings can be found [here](https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings).
	"git-graph.fileEncoding": "utf8",
	// Specifies the colours used on the graph.
	"git-graph.graph.colours": [
		"#0085d9",
		"#d9008f",
		"#00d90a",
		"#d98500",
		"#a300d9",
		"#ff0000",
		"#00d9cc",
		"#e138e8",
		"#85d900",
		"#dc5b23",
		"#6f24d6",
		"#ffcc00"
	],
	// Specifies the style of the graph.
	//  - rounded: Use smooth curves when transitioning between branches on the graph.
	//  - angular: Use angular lines when transitioning between branches on the graph.
	"git-graph.graph.style": "rounded",
	// Specifies how the Uncommitted Changes are displayed on the graph.
	//  - Open Circle at the Uncommitted Changes: Display the Uncommitted Changes as a grey open circle, connected to the commit referenced by HEAD with a solid grey line. The current file system's state is therefore always displayed as an open circle.
	//  - Open Circle at the Checked Out Commit: Display the Uncommitted Changes as a grey closed circle, connected to the commit referenced by HEAD with a dotted grey line. The commit referenced by HEAD is therefore always displayed as an open circle.
	"git-graph.graph.uncommittedChanges": "Open Circle at the Uncommitted Changes",
	// Depreciated: This setting has been renamed to `git-graph.graph.colours`
	// Specifies the colours used on the graph.
	"git-graph.graphColours": [
		"#0085d9",
		"#d9008f",
		"#00d90a",
		"#d98500",
		"#a300d9",
		"#ff0000",
		"#00d9cc",
		"#e138e8",
		"#85d900",
		"#dc5b23",
		"#6f24d6",
		"#ffcc00"
	],
	// Depreciated: This setting has been renamed to `git-graph.graph.style`
	// Specifies the style of the graph.
	//  - rounded: Use smooth curves when transitioning between branches on the graph
	//  - angular: Use angular lines when transitioning between branches on the graph
	"git-graph.graphStyle": "rounded",
	// Depreciated: This setting has been renamed to `git-graph.repository.includeCommitsMentionedByReflogs`
	// Include commits only mentioned by reflogs in the Git Graph View (only applies when showing all branches). This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.includeCommitsMentionedByReflogs": false,
	// Depreciated: This setting has been renamed to `git-graph.repository.commits.initialLoad`
	// Specifies the number of commits to initially load.
	"git-graph.initialLoadCommits": 300,
	// Specifies the path and filename of the Shell executable to be used by the Visual Studio Code Integrated Terminal, when it is opened by Git Graph. For example, to use Git Bash on Windows this setting would commonly be set to "C:\Program Files\Git\bin\bash.exe". If this setting is left blank, the default Shell is used.
	"git-graph.integratedTerminalShell": "",
	// The keybinding for the keyboard shortcut that opens the Find Widget in the Git Graph View.
	"git-graph.keyboardShortcut.find": "CTRL/CMD + F",
	// The keybinding for the keyboard shortcut that refreshes the Git Graph View.
	"git-graph.keyboardShortcut.refresh": "CTRL/CMD + R",
	// The keybinding for the keyboard shortcut that scrolls the Git Graph View to be centered on the commit referenced by HEAD.
	"git-graph.keyboardShortcut.scrollToHead": "CTRL/CMD + H",
	// The keybinding for the keyboard shortcut that scrolls the Git Graph View to the first (or next) stash in the loaded commits. The Shift Key Modifier can be applied to this keybinding to scroll the Git Graph View to the last (or previous) stash in the loaded commits.
	"git-graph.keyboardShortcut.scrollToStash": "CTRL/CMD + S",
	// Depreciated: This setting has been renamed to `git-graph.repository.commits.loadMore`
	// Specifies the number of additional commits to load when the "Load More Commits" button is pressed, or more commits are automatically loaded.
	"git-graph.loadMoreCommits": 100,
	// Depreciated: This setting has been renamed to `git-graph.repository.commits.loadMoreAutomatically`
	// When the view has been scrolled to the bottom, automatically load more commits if they exist (instead of having to press the "Load More Commits" button).
	"git-graph.loadMoreCommitsAutomatically": true,
	// Parse and render a frequently used subset of inline Markdown formatting rules in commit messages and tag details (bold, italics, bold & italics, and inline code blocks).
	"git-graph.markdown": true,
	// Specifies the maximum depth of subfolders to search when discovering repositories in the workspace. Note: Sub-repos are not automatically detected when searching subfolders, however they can be manually added by running the command "Git Graph: Add Git Repository" in the Command Palette.
	"git-graph.maxDepthOfRepoSearch": 0,
	// Depreciated: This setting has been renamed to `git-graph.repository.commits.mute.commitsThatAreNotAncestorsOfHead`
	// Display commits that aren't ancestors of the checked-out branch / commit with a muted text color. Muting will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
	"git-graph.muteCommitsThatAreNotAncestorsOfHead": false,
	// Depreciated: This setting has been renamed to `git-graph.repository.commits.mute.mergeCommits`
	// Display merge commits with a muted text color.
	"git-graph.muteMergeCommits": true,
	// Depreciated: This setting has been renamed to `git-graph.repository.onlyFollowFirstParent`
	// Only follow the first parent of commits when discovering the commits to load in the Git Graph View. See [--first-parent](https://git-scm.com/docs/git-log#Documentation/git-log.txt---first-parent) to find out more about this setting.
	"git-graph.onlyFollowFirstParent": false,
	// Depreciated: This setting has been renamed to `git-graph.openNewTabEditorGroup`
	// Specifies which Editor Group the Visual Studio Code Diff View is opened in.
	//  - Active: Open the Visual Studio Code Diff View in the Active Editor Group.
	//  - Beside: Open the Visual Studio Code Diff View beside the Active Editor Group.
	//  - One: Open the Visual Studio Code Diff View in the First Editor Group.
	//  - Two: Open the Visual Studio Code Diff View in the Second Editor Group.
	//  - Three: Open the Visual Studio Code Diff View in the Third Editor Group.
	//  - Four: Open the Visual Studio Code Diff View in the Fourth Editor Group.
	//  - Five: Open the Visual Studio Code Diff View in the Fifth Editor Group.
	//  - Six: Open the Visual Studio Code Diff View in the Sixth Editor Group.
	//  - Seven: Open the Visual Studio Code Diff View in the Seventh Editor Group.
	//  - Eight: Open the Visual Studio Code Diff View in the Eighth Editor Group.
	//  - Nine: Open the Visual Studio Code Diff View in the Ninth Editor Group.
	"git-graph.openDiffTabLocation": "Active",
	// Specifies the Editor Group where Git Graph should open new tabs, when performing the following actions from the Git Graph View: Viewing the Visual Studio Code Diff View, Opening a File, Viewing a File at a Specific Revision.
	//  - Active: Open the new tab in the Active Editor Group.
	//  - Beside: Open the new tab beside the Active Editor Group.
	//  - One: Open the new tab in the First Editor Group.
	//  - Two: Open the new tab in the Second Editor Group.
	//  - Three: Open the new tab in the Third Editor Group.
	//  - Four: Open the new tab in the Fourth Editor Group.
	//  - Five: Open the new tab in the Fifth Editor Group.
	//  - Six: Open the new tab in the Sixth Editor Group.
	//  - Seven: Open the new tab in the Seventh Editor Group.
	//  - Eight: Open the new tab in the Eighth Editor Group.
	//  - Nine: Open the new tab in the Ninth Editor Group.
	"git-graph.openNewTabEditorGroup": "Active",
	// Depreciated: This setting has been renamed to `git-graph.repository.onLoad.scrollToHead`
	// When opening or switching repositories in the Git Graph View, automatically scroll the view to be centered on the commit referenced by HEAD. This will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
	"git-graph.openRepoToHead": false,
	// Open the Git Graph View to the repository containing the active Text Editor document.
	"git-graph.openToTheRepoOfTheActiveTextEditorDocument": false,
	// Depreciated: This setting has been renamed to `git-graph.referenceLabels.alignment`
	// Specifies how branch and tag reference labels are aligned for each commit.
	//  - Normal: Show branch & tag labels on the left of the commit message in the 'Description' column.
	//  - Branches (on the left) & Tags (on the right): Show branch labels on the left of the commit message in the 'Description' column, and tag labels on the right.
	//  - Branches (aligned to the graph) & Tags (on the right): Show branch labels aligned to the graph in the 'Graph' column, and tag labels on the right in the 'Description' column.
	"git-graph.referenceLabelAlignment": "Normal",
	// Specifies how branch and tag reference labels are aligned for each commit.
	//  - Normal: Show branch & tag labels on the left of the commit message in the 'Description' column.
	//  - Branches (on the left) & Tags (on the right): Show branch labels on the left of the commit message in the 'Description' column, and tag labels on the right.
	//  - Branches (aligned to the graph) & Tags (on the right): Show branch labels aligned to the graph in the 'Graph' column, and tag labels on the right in the 'Description' column.
	"git-graph.referenceLabels.alignment": "Normal",
	// Combine local and remote branch labels if they refer to the same branch, and are on the same commit.
	"git-graph.referenceLabels.combineLocalAndRemoteBranchLabels": true,
	// Fetch avatars of commit authors and committers. By enabling this setting, you consent to commit author and committer email addresses being sent GitHub, GitLab or Gravatar, depending on the repositories remote origin.
	"git-graph.repository.commits.fetchAvatars": false,
	// Specifies the number of commits to initially load.
	"git-graph.repository.commits.initialLoad": 300,
	// Specifies the number of additional commits to load when the "Load More Commits" button is pressed, or more commits are automatically loaded.
	"git-graph.repository.commits.loadMore": 100,
	// When the view has been scrolled to the bottom, automatically load more commits if they exist (instead of having to press the "Load More Commits" button).
	"git-graph.repository.commits.loadMoreAutomatically": true,
	// Display commits that aren't ancestors of the checked-out branch / commit with a muted text color. Muting will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
	"git-graph.repository.commits.mute.commitsThatAreNotAncestorsOfHead": false,
	// Display merge commits with a muted text color.
	"git-graph.repository.commits.mute.mergeCommits": true,
	// Specifies the order of commits on the Git Graph View. See [git log](https://git-scm.com/docs/git-log#_commit_ordering) for more information on each order option. This can be overridden per repository via the Git Graph View's Column Header Context Menu.
	//  - date: Show commits in the commit timestamp order.
	//  - author-date: Show commits in the author timestamp order.
	//  - topo: Avoid showing commits on multiple lines of history intermixed.
	"git-graph.repository.commits.order": "date",
	// Show the commit's signature status to the right of the Committer in the Commit Details View (only for signed commits). Hovering over the signature icon displays a tooltip with the signature details. Requires Git (>= 2.4.0) & GPG (or equivalent) to be installed on the same machine that is running Visual Studio Code.
	"git-graph.repository.commits.showSignatureStatus": false,
	// Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any remote-tracking references that no longer exist on the remote(s).
	"git-graph.repository.fetchAndPrune": false,
	// Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any local tags that no longer exist on the remote(s). Requires Git >= 2.17.0, and the "Repository: Fetch And Prune" setting to be enabled. Caution: If you work in repositories that have multiple remotes, it is not recommended to use this setting (instead you can prune tags for a specific remote via "Fetch Remote" Dialog from the Repository Settings Widget on the Git Graph View).
	"git-graph.repository.fetchAndPruneTags": false,
	// Include commits only mentioned by reflogs in the Git Graph View (only applies when showing all branches). This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.repository.includeCommitsMentionedByReflogs": false,
	// Automatically scroll the Git Graph View to be centered on the commit referenced by HEAD. This will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
	"git-graph.repository.onLoad.scrollToHead": false,
	// Show the checked out branch when a repository is loaded in the Git Graph View. This setting can be used in conjunction with "Repository > On Load: Show Specific Branches". Default: false (show all branches)
	"git-graph.repository.onLoad.showCheckedOutBranch": false,
	// Show specific branches when a repository is loaded in the Git Graph View. Branches can be specified as follows: A local branch name (e.g. `master`), a remote-tracking branch name prefixed with "remotes/" (e.g. `remotes/origin/master`), or a glob pattern defined in `git-graph.customBranchGlobPatterns` prefixed with "--glob=" (e.g. `--glob=heads/feature/*`). This setting can be used in conjunction with "Repository > On Load: Show Checked Out Branch". Default: [] (show all branches)
	"git-graph.repository.onLoad.showSpecificBranches": [],
	// Only follow the first parent of commits when discovering the commits to load in the Git Graph View. See [--first-parent](https://git-scm.com/docs/git-log#Documentation/git-log.txt---first-parent) to find out more about this setting. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.repository.onlyFollowFirstParent": false,
	// Show Commits that are only referenced by tags in Git Graph.
	"git-graph.repository.showCommitsOnlyReferencedByTags": true,
	// Show Remote Branches in Git Graph by default. This can be overridden per repository from the Git Graph View's Control Bar.
	"git-graph.repository.showRemoteBranches": true,
	// Show Remote HEAD Symbolic References in Git Graph (e.g. "origin/HEAD").
	"git-graph.repository.showRemoteHeads": true,
	// Show Stashes in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.repository.showStashes": true,
	// Show Tags in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.repository.showTags": true,
	// Show uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
	"git-graph.repository.showUncommittedChanges": true,
	// Show untracked files when viewing the uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
	"git-graph.repository.showUntrackedFiles": true,
	// Enables commit signing with GPG or X.509.
	"git-graph.repository.sign.commits": false,
	// Enables tag signing with GPG or X.509.
	"git-graph.repository.sign.tags": false,
	// Respect [.mailmap](https://git-scm.com/docs/git-check-mailmap#_mapping_authors) files when displaying author & committer names and email addresses.
	"git-graph.repository.useMailmap": false,
	// Specifies the order that repositories are sorted in the repository dropdown on the Git Graph View (only visible when more than one repository exists in the current Visual Studio Code Workspace).
	//  - Full Path: Sort repositories alphabetically by the full path of the repository.
	//  - Name: Sort repositories alphabetically by the name of the repository.
	//  - Workspace Full Path: Sort repositories according to the Visual Studio Code Workspace Folder order, then alphabetically by the full path of the repository.
	"git-graph.repositoryDropdownOrder": "Workspace Full Path",
	// Specifies if the Git Graph View's Visual Studio Code context is kept when the panel is no longer visible (e.g. moved to background tab). Enabling this setting will make Git Graph load significantly faster when switching back to the Git Graph tab, however has a higher memory overhead.
	"git-graph.retainContextWhenHidden": true,
	// Depreciated: This setting has been renamed to `git-graph.repository.showCommitsOnlyReferencedByTags`
	// Show commits that are only referenced by tags in Git Graph.
	"git-graph.showCommitsOnlyReferencedByTags": true,
	// Depreciated: This setting has been renamed to `git-graph.repository.onLoad.showCheckedOutBranch`
	// Show the current branch by default when Git Graph is opened. Default: false (show all branches)
	"git-graph.showCurrentBranchByDefault": false,
	// Depreciated: This setting has been renamed to `git-graph.repository.commits.showSignatureStatus`
	// Show the commit's signature status to the right of the Committer in the Commit Details View (only for signed commits). Hovering over the signature icon displays a tooltip with the signature details. Requires Git (>= 2.4.0) & GPG (or equivalent) to be installed on the same machine that is running Visual Studio Code.
	"git-graph.showSignatureStatus": false,
	// Show a Status Bar Item that opens the Git Graph View when clicked.
	"git-graph.showStatusBarItem": true,
	// Depreciated: This setting has been renamed to `git-graph.repository.showTags`
	// Show Tags in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.showTags": true,
	// Depreciated: This setting has been renamed to `git-graph.repository.showUncommittedChanges`
	// Show uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
	"git-graph.showUncommittedChanges": true,
	// Depreciated: This setting has been renamed to `git-graph.repository.showUntrackedFiles`
	// Show untracked files when viewing the uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
	"git-graph.showUntrackedFiles": true,
	// Specifies where the "View Git Graph" action appears on the title of SCM Providers.
	//  - Inline: Show the 'View Git Graph' action on the title of SCM Providers
	//  - More Actions: Show the 'View Git Graph' action in the 'More Actions...' menu on the title of SCM Providers
	"git-graph.sourceCodeProviderIntegrationLocation": "Inline",
	// Specifies the colour theme of the icon displayed on the Git Graph tab.
	//  - colour: Show a colour icon which suits most Visual Studio Code colour themes
	//  - grey: Show a grey icon which suits Visual Studio Code colour themes that are predominantly grayscale
	"git-graph.tabIconColourTheme": "colour",
	// Depreciated: This setting has been renamed to `git-graph.repository.useMailmap`
	// Respect [.mailmap](https://git-scm.com/docs/git-check-mailmap#_mapping_authors) files when displaying author & committer names and email addresses.
	"git-graph.useMailmap": false,
	// ユーザーが作成したコードを使ったステップのみをデバッグする場合。これを無効にすると、ライブラリ コードにステップ インできるようになります。
	"debugpy.debugJustMyCode": true,
	// デバッグ中にエディターにインライン値を表示するかどうか。
	"debugpy.showPythonInlineValues": false,
	// ActiveState ランタイム用の State Tool 実行可能ファイルへのパス (バージョン 0.36 以降)。
	"python.activeStateToolPath": "state",
	// オートコンプリート エンジンでインポートする必要があるライブラリなどへのパスのリスト。たとえば、Google App SDK を使用する場合、パスはシステム パスにないため、このリストに追加する必要があります。
	"python.autoComplete.extraPaths": [],
	// アクティブ化に使用する Conda 実行可能ファイルへのパス (バージョン 4.4 以降)。
	"python.condaPath": "",
	// 'requirements.txt' またはその他の依存関係ファイルのエディターの [環境の作成] ボタンを表示または非表示にします。
	"python.createEnvironment.contentButton": "hide",
	// 現在のプロジェクトに環境の作成が必要かどうかを検出する
	"python.createEnvironment.trigger": "prompt",
	// 拡張機能が初めて読み込まれるときに使用する既定の Python へのパス。ワークスペースにインタープリターが選択されると使用されなくなります。[こちら](https://aka.ms/AAfekmf) を参照して、これがいつ使用されるかを理解してください
	"python.defaultInterpreterPath": "python",
	// エラー ログで意味のあるスタック トレースのソース マップ サポートを有効にします。
	"python.diagnostics.sourceMapsEnabled": false,
	// 環境変数定義が含まれているファイルへの絶対パス。
	"python.envFile": "${workspaceFolder}/.env",
	// Python 拡張機能で A/B テストの実験を有効にします。有効にすると、提案された拡張機能や機能に含まれる可能性があります。
	"python.experiments.enabled": true,
	// オプトインする実験のリスト。空の場合、ユーザーには既定の実験グループが割り当てられます。詳細については、[こちら](https://github.com/microsoft/vscode-python/wiki/Experiments) を参照してください。
	"python.experiments.optInto": [],
	// オプトアウトする実験のリスト。空の場合、ユーザーには既定の実験グループが割り当てられます。詳細については、[こちら](https://github.com/microsoft/vscode-python/wiki/Experiments) を参照してください。
	"python.experiments.optOutFrom": [],
	// 環境を使用しない場合に Python モジュールをグローバルにインストールするかどうか。
	"python.globalModuleInstallation": false,
	// 選択したインタープリターをステータス バーに表示するタイミングをコントロールします。
	//  - never: 情報を表示しません。
	//  - onPythonRelated: Python 関連ファイルが開かれている場合にのみ情報を表示します。
	//  - always: 常に情報を表示します。
	"python.interpreter.infoVisibility": "onPythonRelated",
	// 言語サーバーの種類を定義します。
	//  - Default: 言語サーバーを自動的に選択する: インストールされて使用可能な場合は Pylance、それ以外の場合は、Jedi にフォールバックします。
	//  - Jedi: 言語サーバーとして言語サーバー プロトコル (LSP) の背後で Jedi を使用します。
	//  - Pylance: 言語サーバーとして Pylance を使用します。
	//  - None: 言語サーバーの機能を無効にします。
	"python.languageServer": "Default",
	// [試験段階] 環境ロケーターの実装を選択します。これは、ネイティブ環境の場所をテストする際の試験的な設定です。
	"python.locator": "js",
	// この設定は非推奨です。ログ レベルを設定するには、コマンド 'Developer: Set Log Level...' を使用してください。
	// 拡張機能がログに記録するログ レベルは、既定で `error` になります
	"python.logging.level": "error",
	// requirements.txt または pyproject.toml で見つからないパッケージの重要度を設定します
	"python.missingPackage.severity": "Hint",
	// アクティブ化に使用する pipenv 実行可能ファイルへのパス。
	"python.pipenvPath": "pipenv",
	// pixi 実行可能ファイルへのパス。
	"python.pixiToolPath": "pixi",
	// poetry 実行可能ファイルへのパス。
	"python.poetryPath": "poetry",
	// Python REPL 用の Smart Send を切り替えます。Smart Send を使用すると、コードの実行可能な最小ブロックを Shift+Enter の REPL に送信し、それに応じてカーソルを移動できます。
	"python.REPL.enableREPLSmartSend": true,
	// ネイティブ REPL の REPL 変数ビューに変数を表示するかどうかを切り替えます。
	"python.REPL.provideVariables": true,
	// 実行時にターミナルではなく Python REPL にコードを送信するように切り替えます。これをオンにすると、コンテキスト メニューのスマート送信と実行の選択/行の両方の動作が変更されます。
	"python.REPL.sendToNativeREPL": true,
	// Tensorboard のサポートは拡張機能 [Tensorboard 拡張機能](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.tensorboard) に移行されました。代わりに、設定 'tensorBoard.logDirectory' を使用します。
	// TensorBoard の起動時にログ ディレクトリ プロンプトをスキップするには、この設定を優先する TensorBoard ログ ディレクトリに設定します。
	"python.tensorBoard.logDirectory": "",
	// 拡張機能の読み込み時に、現在のターミナルで Python 環境をアクティブにします。
	"python.terminal.activateEnvInCurrentTerminal": false,
	// 作成されたすべてのターミナルで Python 環境をアクティブ化します。
	"python.terminal.activateEnvironment": true,
	// ターミナルでファイルを実行する場合、現在開いているフォルダーではなく、ファイルのディレクトリで execute を使用するかどうか。
	"python.terminal.executeInFileDir": false,
	// Python ターミナルを起動するときに、ターミナルにカーソルを合わせるかどうか。
	"python.terminal.focusAfterLaunch": false,
	// ターミナルでファイルを実行するときに使用する Python 起動引数。
	"python.terminal.launchArgs": [],
	// Python を実行しているターミナルの [シェル統合](https://code.visualstudio.com/docs/terminal/shell-integration) を有効にします。シェル統合では特に、コマンドの装飾、最近のコマンドの実行、アクセシビリティの向上を可能にすることで、ターミナルのエクスペリエンスが向上します。
	"python.terminal.shellIntegration.enabled": false,
	// テスト ファイルを保存するときに、自動実行テスト検出を有効にします。
	"python.testing.autoTestDiscoverOnSaveEnabled": true,
	// テストの作業ディレクトリ (省略可能)。
	"python.testing.cwd": null,
	// テストのデバッグに使用されるポート番号。
	"python.testing.debugPort": 3000,
	// 潜在的なテスト ディレクトリが検出された場合は、テスト フレームワークを構成するように求められます。
	"python.testing.promptToConfigure": true,
	// 引数が渡されました。各引数は配列内の個別の項目です。
	"python.testing.pytestArgs": [],
	// pytest を使用したテストを有効にします。
	"python.testing.pytestEnabled": false,
	// pytest (pytest) へのパスです。この設定を変更して完全なパスを含めることで、カスタム バージョンの pytest を使用できます。
	"python.testing.pytestPath": "pytest",
	// 引数が渡されました。各引数は配列内の個別の項目です。
	"python.testing.unittestArgs": [
		"-v",
		"-s",
		".",
		"-p",
		"*test*.py"
	],
	// unittest を使用したテストを有効にします。
	"python.testing.unittestEnabled": false,
	// 仮想環境を検索するホーム ディレクトリ内のフォルダー (既定では pyenv、direnv、virtualenvwrapper をサポート)。
	"python.venvFolders": [],
	// 仮想環境のリストを含むフォルダーへのパス (例: ~/.pyenv、~/Envs、~/.virtualenvs)。
	"python.venvPath": "",
	// AI 支援コード アクションを有効または無効にします。Copilot Chat 拡張機能を有効にする必要があります。
	"python.analysis.aiCodeActions": {},
	// 文字列に '{' を入力すると、文字列の先頭に 'f' が自動的に付きます。
	"python.analysis.autoFormatStrings": false,
	// 自動インポートの入力候補を有効にします。
	"python.analysis.autoImportCompletions": false,
	// Python コードを入力する際の言語セマンティクスに基づいて、インデントを自動的に調整します。
	"python.analysis.autoIndent": true,
	// 'src' などの一般的な検索パスを自動的に追加します。
	"python.analysis.autoSearchPaths": true,
	// LSP データをキャッシュして完了時間を短縮します。試験段階のため、Pylance が動作しなくなる可能性があります。
	"python.analysis.cacheLSPData": false,
	// 関数の入力候補にかっこを追加します。
	"python.analysis.completeFunctionParens": false,
	// 完了時の実験のオーバーライド動作を有効または無効にします。
	"python.analysis.completionOverrideExperiment": false,
	// 診断を表示するための分析スコープ。
	//  - openFilesOnly: Analyzes and reports errors on only open files.
	//  - workspace: Analyzes and reports errors on all files in the workspace.
	"python.analysis.diagnosticMode": "openFilesOnly",
	// ユーザーが個々の診断の重大度レベルを上書きできるようにします。ルール名をキーとして使用し、"error"、"warning"、"information"、"none"、'true' ("error"のエイリアス)、または 'false' ("none" のエイリアス) のいずれかを値として使用します。"python.analysis.typeCheckingMode" が "off" に設定されている場合、各診断に表示される既定値が既定です。各型チェック モード ("off"、"basic"、"strict") の既定値については、[こちら](https://github.com/microsoft/pyright/blob/main/docs/configuration.md#diagnostic-rule-defaults) を参照してください。
	"python.analysis.diagnosticSeverityOverrides": {},
	// 灰色表示テキストまたは取り消し線付きテキストの特別なヒントを含むヒント診断を無効にします。
	"python.analysis.disableTaggedHints": false,
	// VS Code の表示言語に関係なく、英語で診断を表示します。
	"python.analysis.displayEnglishDiagnostics": false,
	// Pylance で pytest のサポートを有効にします。
	"python.analysis.enablePytestSupport": true,
	// Use sync server mode [Experimental]. For internal use only, may cause Pylance to stop working.
	"python.analysis.enableSyncServer": false,
	// 含めることができないディレクトリまたはファイルのパス。これらは、インクルード ディレクトリをオーバーライドして、特定のサブディレクトリを除外できるようにします。除外パスにあるファイルでも、除外されていないソース ファイルから参照 (インポート) されている場合は、分析に含まれる場合があることに注意してください。パスには、ワイルドカード文字 ** (ディレクトリまたは複数レベルのディレクトリ)、* (0 文字以上のシーケンス)、または ?(1 つの文字) が含まれる場合があります。除外パスが指定されていない場合、Pylance は次のディレクトリを自動的に除外します: `**/node_modules`、`**/__pycache__`、`.git`、仮想環境ディレクトリ。パスに '${workspaceFolder:<workspaceName>}' 変数が含まれている場合、glob パターンはマルチルート ワークスペース環境の対応するワークスペースにのみ適用されます。
	"python.analysis.exclude": [],
	// 該当する場合、コミット文字として '.', '(' を使用できます。
	"python.analysis.extraCommitChars": false,
	// 検索解決パスの追加のインポート
	"python.analysis.extraPaths": [],
	// ソース修正プログラムを [すべて修正] で実行します。
	"python.analysis.fixAll": [],
	// モジュール名のように見える文字列リテラルの場合、[定義へ移動] を有効にするとモジュールに移動します。
	"python.analysis.gotoDefinitionInStringLiteral": true,
	// インクルード ファイルまたはインクルード ファイルの推移閉包内であっても、診断出力 (エラーと警告) を抑制する必要があるディレクトリまたはファイルのパス。パスには、ワイルドカード文字 ** (ディレクトリまたは複数レベルのディレクトリ)、* (0 文字以上のシーケンス)、または ?(1 つの文字) が含まれる場合があります。パスに '${workspaceFolder:<workspaceName>}' 変数が含まれている場合、glob パターンはマルチルート ワークスペース環境の対応するワークスペースにのみ適用されます。
	"python.analysis.ignore": [],
	// モジュールをインポートするための既定の形式を定義します。
	//  - absolute: Use absolute import format when creating new import statement.
	//  - relative: Use relative import format when creating new import statement.
	"python.analysis.importFormat": "absolute",
	// 含める必要があるディレクトリまたはファイルのパス。パスが指定されていない場合、ワークスペースのルート ディレクトリに対する Pylance の既定値。パスには、ワイルドカード文字 ** (ディレクトリまたは複数レベルのディレクトリ)、* (0 文字以上のシーケンス)、または ?(1 つの文字) が含まれる場合があります。パスに '${workspaceFolder:<workspaceName>}' 変数が含まれている場合、glob パターンはマルチルート ワークスペース環境の対応するワークスペースにのみ適用されます。
	"python.analysis.include": [],
	// ユーザー ファイルのエイリアス シンボルを含めます。これにより、`インポートの追加`、`自動インポート` などの機能に表示されるエイリアス シンボルが作成されます
	"python.analysis.includeAliasesFromUserFiles": false,
	// 自動インポート、インポートの追加、ワークスペース シンボルなど、インストールされている言語機能用のサード パーティ製ライブラリとユーザー ファイルのインデックスを有効にします。
	"python.analysis.indexing": true,
	// 呼び出し引数名のインレイ ヒントを有効または無効にする:
	// ```python
	// datetime('year='2019, 'month='10, 'day='27)
	// ```
	// 
	//  - off: Disable inlay hints for call argument names.
	//  - partial: Enable inlay hints for positional-or-keyword arguments while ignoring positional-only and keyword-only.
	//  - all: Enable inlay hints for positional-or-keyword and positional-only arguments while ignoring keyword-only.
	"python.analysis.inlayHints.callArgumentNames": "off",
	// 関数の戻り値の型のインレイ ヒントを有効または無効にする:
	// ```python
	// def foo(x:int) '-> int':
	// 	return x
	// ```
	// 
	"python.analysis.inlayHints.functionReturnTypes": false,
	// pytest 関数パラメーター型のインレイ ヒントを有効または無効にします:
	// ```python
	// def test_foo(my_fixture: 'str'):
	// 	assert(my_fixture == 'foo')
	// ```
	// 
	"python.analysis.inlayHints.pytestParameters": false,
	// 変数型のインレイ ヒントを有効または無効にします。リテラルまたは定数の代入に対するヒントは表示されません:
	// ```python
	// foo':list[str]' = ["a"]
	//  
	// ```
	// 
	"python.analysis.inlayHints.variableTypes": false,
	// 設定に対して定義済みの値のセットを選択します。詳細については、[このリンク](https://aka.ms/languageserver-mode) を確認してください。
	//  - light: 軽量化のため、不可欠な作業のみを実行するように Pylance を設定します。どの設定がどの値に設定されているかを正確に確認するには、説明のリンクを参照してください。
	//  - default: Pylance の設定を既定のままにします。
	"python.analysis.languageServerMode": "default",
	// 出力パネルのログのレベルを指定する
	"python.analysis.logLevel": "Information",
	// 言語サーバーの実行に使用する Node.js 実行可能ファイルへのパス。指定しない場合、言語サーバーは VS Code に付属する Node.js 実行可能ファイルを使用します。Pylance でメモリが不足している場合は、このオプションを設定します。詳細については、[こちら](https://aka.ms/AApf7ox) を参照してください。
	"python.analysis.nodeExecutable": "",
	// インストールされたパッケージの下の何階層をパッケージ単位でインデックス付けするかをオーバーライドするために使用します。既定では、最上位レベルのモジュールのみがインデックス付けされます (depth = 1)。サブモジュールにインデックス付けするには、インデックス付けするサブモジュールのレベルごとに depth を 1 つ増やします。使用できる値は次のとおりです:
	// ```JSON
	// {"name": "package name (str)",
	//  "depth": "depth to scan (int)",
	//  "includeAllSymbols": "whether to include all symbols (bool)"}
	// 
	// ```
	// `includeAllSymbols` が `false` に設定されている場合、各パッケージの `__all__` のシンボルのみが含まれます。これを `true` に設定すると、Pylance はファイル内のすべてのモジュール/最上位レベルのシンボル宣言にインデックス付けします。
	//  
	// 使用例:
	// ```JSON
	// [
	// 	{"name": "sklearn", "depth": 2, "includeAllSymbols": true},
	// 	{"name": "matplotlib", "depth": 3, "includeAllSymbols": false}
	// ]
	// 
	// ```
	// 
	"python.analysis.packageIndexDepths": [
		{
			"name": "sklearn",
			"depth": 2
		},
		{
			"name": "matplotlib",
			"depth": 2
		},
		{
			"name": "scipy",
			"depth": 2
		},
		{
			"name": "django",
			"depth": 2
		},
		{
			"name": "flask",
			"depth": 2
		},
		{
			"name": "fastapi",
			"depth": 2
		}
	],
	// すべてのサード パーティ製ライブラリのインデックスはディスクに永続化されます。
	"python.analysis.persistAllIndices": true,
	// すべての Python バージョンの共有 stdlib.json インデックスに依存する代わりに、各ワークスペースの特定の Python バージョンとプラットフォームに合わせて調整された一意のインデックスを生成します。この再生成プロセスは、事前構築済みの stdlib インデックスの使用とは異なり、パフォーマンスに影響します。
	"python.analysis.regenerateStdLibIndices": false,
	// 追加のテレメトリを報告する [試験段階]。内部使用の場合のみ、Pylance の速度が低下する可能性があります。
	"python.analysis.reportExtraTelemetry": false,
	// カスタム型スタブ ファイルを含むディレクトリへのパスです。
	"python.analysis.stubPath": "typings",
	// docstring 生成のサポートを有効または無効にします。空白の docstring では、`Ctrl+Space` を使用して docstring を生成します。
	"python.analysis.supportDocstringTemplate": false,
	// docstrings で reStructuredText のサポートを有効または無効にします。試験段階のため、docstrings がレンダリングされなくなる可能性があります。
	"python.analysis.supportRestructuredText": true,
	// Defines the default rule set for type checking.
	//  - off: 無効な構文、未解決のインポート、未定義の変数の診断を表示します。
	//  - basic: "off" + "basic" 型チェック ルールのすべてのルール。
	//  - standard: "basic" + "standard" 型チェック ルールのすべてのルール。
	//  - strict: "standard" + "strict" 型チェック ルールのすべてのルール。
	"python.analysis.typeCheckingMode": "off",
	// 入力パラメーターまたは戻り値の型に対する型注釈がない関数とメソッドのエラーを分析して報告します。この設定の既定値は `true` です。
	"python.analysis.typeEvaluation.analyzeUnannotatedFunctions": true,
	// PEP 585 は、ジェネリックのみをサポートするために導入された標準コレクション内の型に対するエイリアスが Python 3.9 の時点で非推奨であることを示します。このスイッチは、これらが非推奨として扱われるかどうかを制御します。これは、pythonVersion が 3.9 以降である場合にのみ適用されます。この設定の既定値は `false` ですが、今後 `true` に切り替わる可能性があります。
	"python.analysis.typeEvaluation.deprecateTypingAliases": false,
	// `bytearray` と `memoryview` が `bytes` のサブタイプであると見なされる従来の動作を無効にします。[PEP 688](https://peps.python.org/pep-0688/#no-special-meaning-for-bytes) ではこの動作が非推奨ですが、このスイッチは古い動作を復元するために提供されています。この設定の既定値は `false` です。
	"python.analysis.typeEvaluation.disableBytesTypePromotions": false,
	// Python 入力標準に対する提案済み変更または探索的変更に対応する試験的な (ほとんどはドキュメントに記載されていない) 機能セットを有効にします。これらの機能は変更または削除される可能性があるため、実験目的以外では使用しないでください。この設定の既定値は `false` です。
	"python.analysis.typeEvaluation.enableExperimentalFeatures": false,
	// 有効である場合、型分析によって到達できないと判断されたコードは、タグ付きヒントを使用して報告されます。この設定は、型分析に関係なく到達できないと判断されたコードには影響しません。このようなコードは、常に到達不能として報告されます。この設定は、コマンド ライン バージョンの pyright を使用する場合にも影響しません。なぜなら、到達不能のコードに関するタグ付きヒントが生成されないからです。
	"python.analysis.typeEvaluation.enableReachabilityAnalysis": false,
	// PEP 484 は、`# type: ignore` コメントのサポートを定義します。このスイッチは、これらのコメントのサポートを有効または無効にします。この設定の既定値は `true` です。これは、`# pyright: ignore` コメントには影響しません。
	"python.analysis.typeEvaluation.enableTypeIgnoreComments": true,
	// 辞書のキーと値の型を推論する場合、厳密な型の仮定を使用します。たとえば、式 `{'a': 1, 'b': 'a'}` は、型 `dict[str, Any]` または `dict[str, int | str]` であると推論できます。この設定が true である場合、後者の (より厳密な) 型が使用されます。この設定の既定値は `false` です。
	"python.analysis.typeEvaluation.strictDictionaryInference": false,
	// list の型を推論するときは、厳密な型の仮定を使用します。たとえば、式 `[1, 'a', 3.4]` は `list[Any]` 型または `list[int | str | float]` 型であると推論できます。この設定が true である場合、後者の (より厳密な) 型が使用されます。この設定の既定値は `false` です。
	"python.analysis.typeEvaluation.strictListInference": false,
	// PEP 484 は、関数パラメーターに既定値 None が割り当てられている場合、明示的な型が Optional でなくても、その型が暗黙的に Optional であることを示します。この規則が有効になっていると、この場合、パラメーター型の注釈で Optional を明示的に使用する必要があります。この設定の既定値は `true` です。
	"python.analysis.typeEvaluation.strictParameterNoneValue": true,
	// When inferring the type of a set, use strict type assumptions. For example, the expression `{1, 'a', 3.4}` could be inferred to be of type `set[Any]` or `set[int | str | float]`. If this setting is true, it will use the latter (stricter) type. The default value for this setting is `false`.
	"python.analysis.typeEvaluation.strictSetInference": false,
	// Paths to look for typeshed modules.
	"python.analysis.typeshedPaths": [],
	// ライブラリ実装を使用して、型スタブが存在しない場合に型情報を抽出します。
	"python.analysis.useLibraryCodeForTypes": true,
	// ワークスペースでインデックスを作成するユーザー ファイルの最大数。ファイルのインデックス作成は、パフォーマンス集約型のタスクです。この設定を使用して、インデックスを作成するファイルの数を制限してください。-1 を入力すると、すべてのファイルにインデックスが作成されます。
	"python.analysis.userFileIndexingLimit": 2000,
	// 設定されている場合、WSL ログの出力にデバッグ情報が表示されます。
	"remote.WSL.debug": false,
	// 設定すると、WSL 拡張機能はバックグラウンドで最新のサーバー ビルドをダウンロードします。これは、過去 2 週間に使用されたすべての WSL プラットフォームに対して行われます。
	"remote.WSL.downloadInBackground": true,
	// 設定されている場合、ポーリングは WSL1 内のファイル監視に使用されます。ポーリングは CPU を集中的に使用できますが、監視中にフォルダー名を変更できないという WSL1 の問題を修正します。このオプションを有効にするには再起動が必要です。
	"remote.WSL.fileWatcher.polling": false,
	// `remote.WSL.fileWatcher.polling` が設定されている場合、WSL1 ディストリビューション内で使用されるファイル ウォッチャーのポーリング間隔 (ミリ秒単位)。
	// このオプションを有効にするには再起動が必要です。
	"remote.WSL.fileWatcher.pollingInterval": 5000,
	// 設定されている場合、WSL ウィンドウは、開かれたシェルから環境を取得します。
	"remote.WSL.useShellEnvironment": true,
	// 使用されなくなりました。接続を WSL に転送するには、常に 'wsl.exe' が使用されるようになりました。
	// 
	"remote.WSL1.connectionMethod": "",
	// 使用されなくなりました。接続を WSL に転送するために常に 'wsl.exe' が使用されるようになりました。
	// 
	"remote.WSL2.connectionMethod": "",
	// プレビューを自動的に更新する頻度。
	"livePreview.autoRefreshPreview": "On All Changes in Editor",
	// 外部ブラウザーでファイルをプレビューするときに起動するブラウザー。通常のプレビュー (非デバッグ) でのみ機能し、デスクトップでのみ機能します。
	"livePreview.customExternalBrowser": "Default",
	// 外部プレビューの起動で JavaScript デバッガーをアタッチするかどうか。
	"livePreview.debugOnExternalPreview": false,
	// サーバーの起動時に自動的に表示されるファイル。インデックスで開くには空白のままにします。
	"livePreview.defaultPreviewPath": "",
	// ファイルをホストするローカル IP ホスト アドレス。
	"livePreview.hostIP": "127.0.0.1",
	// サーバーの HTTP 応答で設定する必要がある追加の HTTP ヘッダー。
	"livePreview.httpHeaders": {
		"Accept-Ranges": "bytes"
	},
	// 現在開いているワークスペース (またはサーバーがホストされているワークスペース) の一部ではないファイルのプレビューを開くときにユーザーに通知するかどうか。
	"livePreview.notifyOnOpenLooseFile": true,
	// プレビューの優先ターゲット。
	"livePreview.openPreviewTarget": "Embedded Preview",
	// ライブ プレビューのサーバーが最初に試行する必要があるローカル ポート。このポート番号が機能しない場合は、空きポートが見つかるまでポート番号がインクリメントされます。
	"livePreview.portNumber": 3000,
	// プレビューの更新をデバウンスするときに使用する遅延時間 (ミリ秒)。
	"livePreview.previewDebounceDelay": 50,
	// 埋め込みプレビューを閉じてから何分後にサーバーをシャットダウンするか。0に設定すると、サーバは無期限に稼働し続けます。
	"livePreview.serverKeepAliveAfterEmbeddedPreviewClose": 3,
	// ファイルが提供されるワークスペース ルートからの相対パス。ファイルは、ワークスペースルートがこの相対パスにあるかのようにプレビューされます。このディレクトリ パスがワークスペースに存在しない場合は、既定でワークスペース ルートが使用されます。この設定は、ワークスペースが開いている場合にのみ適用されます。
	"livePreview.serverRoot": "",
	// サーバーのオン/オフ状態の変更に関する情報メッセージを表示するかどうか。
	"livePreview.showServerStatusNotifications": false,
	// 外部プレビュー インスタンスを自動生成されたサーバー タスクとペアリングするかどうか。無効にすると、サーバーも自動的に閉じなくなります (ウィンドウが閉じられるまで)。
	"livePreview.tasks.runTaskWithExternalPreview": false,
	// Controls the enablement.
	"cssPeek.enable": true,
	// A list of vscode language names where the extension should be used.
	"cssPeek.peekFromLanguages": [
		"html",
		"django-html",
		"laravel-blade",
		"razor",
		"vue",
		"blade",
		"pug",
		"jade",
		"handlebars",
		"php",
		"twig",
		"md",
		"nunjucks",
		"javascript",
		"javascriptreact",
		"erb",
		"typescript",
		"typescriptreact",
		"HTML (Eex)",
		"html-eex",
		"ejs",
		"hbs",
		"svelte"
	],
	// A list of file globs that filters out peekable files
	"cssPeek.peekToExclude": [
		"**/node_modules/**",
		"**/bower_components/**"
	],
	// Enable Peeking from HTML tags in addition to classnames and IDs. React components are ignored, but it's a good idea to disable this feature when using Angular
	"cssPeek.supportTags": true,
	// Traces the communication between VSCode and the language server.
	"cssPeek.trace.server": "off",
	// Note: If it is not Null, It will override CustomBrowser and ChromeDebuggingAttachment settings.
	// 
	//  Examples : 
	// chrome --incognito --headless --remote-debugging-port=9222 
	//  C:\\Program Files\\Firefox Developer Edition\\firefox.exe --private-window
	"liveServer.settings.AdvanceCustomBrowserCmdLine": null,
	// Enable Chrome Debugging Attachment to Live Server at Debuging Port 9222.
	//  NOTE: You have to install 'Debugger for Chrome' 
	// If the value is true, Select 'Attach to Chrome' from Debug Window to start debugging. 
	// 
	//  CAUTION: If it is true, 'Launch Chrome against localhost' may not work.
	"liveServer.settings.ChromeDebuggingAttachment": false,
	// Specify custom browser settings for Live Server. 
	// By Default it will open your default favorite browser.
	"liveServer.settings.CustomBrowser": null,
	// To disable information pop up messages.
	"liveServer.settings.donotShowInfoMsg": false,
	// To turn off prompt warning message if body or head or other supporting tag is missing in your HTML.
	"liveServer.settings.donotVerifyTags": false,
	// When set, serve this file (server root relative) for every 404 (useful for single-page applications)
	"liveServer.settings.file": "",
	// By Default Live Server inject CSS changes without full reloading of browser. You can change this behavior by making this setting as `true`
	"liveServer.settings.fullReload": false,
	// To switch between localhost or 127.0.0.1 or anything else. Default is 127.0.0.1
	"liveServer.settings.host": "127.0.0.1",
	// Setup https configuration
	"liveServer.settings.https": {
		"enable": false,
		"cert": "",
		"key": "",
		"passphrase": ""
	},
	// To ignore specific file changes
	"liveServer.settings.ignoreFiles": [
		".vscode/**",
		"**/*.scss",
		"**/*.sass",
		"**/*.ts"
	],
	// Mount a directory to a route. Such as [['/components', './node_modules']]
	"liveServer.settings.mount": [],
	// This the entry point of server when you're in multiroot workspace
	"liveServer.settings.multiRootWorkspaceName": null,
	// If it is true live server will start without browser opened.
	"liveServer.settings.NoBrowser": false,
	// Set Custom Port Number of Live Server. Set 0 if you want random port.
	"liveServer.settings.port": 5500,
	// To Setup Proxy
	"liveServer.settings.proxy": {
		"enable": false,
		"baseUri": "/",
		"proxyUri": "http://127.0.0.1:80"
	},
	// Set Custom root of Live Server. 
	// To change root the the server to sub folder of workspace, use '/' and relative path from workspace. 
	// Example: /subfolder1/subfolder2
	"liveServer.settings.root": "/",
	// Change this to false if you don't want the button to show in the statusbar
	"liveServer.settings.showOnStatusbar": true,
	// Use local IP as host
	"liveServer.settings.useLocalIp": false,
	// You have to install a browser extension. That will be works for your dynamic pages (like PHP).
	"liveServer.settings.useWebExt": false,
	// Delay before live reloading. Value in milliseconds. Default is 100
	"liveServer.settings.wait": 100,
	// Automatically open the preview when an svg file is opened.
	"svgPreview.autoOpen": true,
	// Whether or not the svg should be scaled to fit the viewport or keep its original size
	"svgPreview.scaleToFit": true,
	// Custom style for the preview.
	"svgPreview.style": {},
	// Enable the new experimental issue reporter in electron.
	"issueReporter.experimental.auxWindow": true,
	// Arguments passed to autopep8 to format Python files. Each argument should be provided as a separate string in the array. 
	//  Example: 
	//  `"autopep8.args" = ["--config", "<file>"]`
	"autopep8.args": [],
	// Sets the current working directory used to format Python files with autopep8. By default, it uses the root directory of the workspace `${workspaceFolder}`. You can set it to `${fileDirname}` to use the parent folder of the file being formatted as the working directory for autopep8.
	"autopep8.cwd": "${workspaceFolder}",
	// Defines which autopep8 formatter binary to be used to format Python files. When set to `useBundled`, the extension will use the autopep8 formatter binary that is shipped with the extension. When set to `fromEnvironment`, the extension will attempt to use the autopep8 formatter binary and all dependencies that are available in the currently selected environment. **Note**: If the extension can't find a valid autopep8 formatter binary in the selected environment, it will fallback to using the binary that is shipped with the extension. The `autopep8.path` setting takes precedence and overrides the behavior of `autopep8.importStrategy`.
	//  - useBundled: Always use the bundled version of autopep8 to format Python files.
	//  - fromEnvironment: Use the autopep8 binary from the selected Python environment. If the extension fails to find a valid autopep8 binary, it will fallback to using the bundled version of autopep8.
	"autopep8.importStrategy": "useBundled",
	// Path to a Python executable or a command that will be used to launch the autopep8 server and any subprocess. Accepts an array of a single or multiple strings. When set to `[]`, the extension will use the path to the selected Python interpreter. If passing a command, each argument should be provided as a separate string in the array.
	"autopep8.interpreter": [],
	// Path or command to be used by the extension to format Python files with autopep8. Accepts an array of a single or multiple strings. If passing a command, each argument should be provided as a separate string in the array. If set to `["autopep8"]`, it will use the version of autopep8 available in the `PATH` environment variable. Note: Using this option may slowdown formatting. 
	//   Examples: 
	//   - `["~/global_env/autopep8"]` 
	//   - `["conda", "run", "-n", "lint_env", "python", "-m", "autopep8"]`
	"autopep8.path": [],
	// Controls when notifications are shown by this extension.
	//  - off: All notifications are turned off, any errors or warnings when formatting Python files are still available in the logs.
	//  - onError: Notifications are shown only in the case of an error when formatting Python files.
	//  - onWarning: Notifications are shown for any errors and warnings when formatting Python files.
	//  - always: Notifications are show for anything that the server chooses to show when formatting Python files.
	"autopep8.showNotifications": "off",
	// Arguments passed to Black to format Python files. Each argument should be provided as a separate string in the array. 
	//  Example: 
	//  `"black-formatter.args" = ["--config", "<file>"]`
	"black-formatter.args": [],
	// Sets the current working directory used to format Python files with Black. By default, it uses the root directory of the workspace `${workspaceFolder}`. You can set it to `${fileDirname}` to use the parent folder of the file being formatted as the working directory for Black.
	"black-formatter.cwd": "${workspaceFolder}",
	// Defines which Black formatter binary to be used to format Python files. When set to `useBundled`, the extension will use the Black formatter binary that is shipped with the extension. When set to `fromEnvironment`, the extension will attempt to use the Black formatter binary and all dependencies that are available in the currently selected environment. **Note**: If the extension can't find a valid Black formatter binary in the selected environment, it will fallback to using the binary that is shipped with the extension. The `black-formatter.path` setting takes precedence and overrides the behavior of `black-formatter.importStrategy`.
	//  - fromEnvironment: Use the Black binary from the selected Python environment. If the extension fails to find a valid Black binary, it will fallback to using the bundled version of Black.
	//  - useBundled: Always use the bundled version of Black to format Python files.
	"black-formatter.importStrategy": "useBundled",
	// Path to a Python executable or a command that will be used to launch the Black server and any subprocess. Accepts an array of a single or multiple strings. When set to `[]`, the extension will use the path to the selected Python interpreter. If passing a command, each argument should be provided as a separate string in the array.
	"black-formatter.interpreter": [],
	// Path or command to be used by the extension to format Python files with Black. Accepts an array of a single or multiple strings. If passing a command, each argument should be provided as a separate string in the array. If set to `["black"]`, it will use the version of Black available in the `PATH` environment variable. Note: Using this option may slowdown formatting. 
	//   Examples: 
	//   - `["~/global_env/black"]` 
	//   - `["conda", "run", "-n", "lint_env", "python", "-m", "black"]`
	"black-formatter.path": [],
	// Selects the transport protocol to be used by the Black server. When set to `stdio`, the extension will use the standard input/output streams to communicate with the Black server. When set to `pipe`, the extension will use a named pipe (on Windows) or Unix Domain Socket (on Linux/Mac) to communicate with the Black server. The `stdio` transport protocol is the default and recommended option for most users.
	//  - stdio: Use the standard input/output streams to communicate with the Black server.
	//  - pipe: Use a named pipe (on windows) and Unix Domain Socket (on linux/mac) to communicate with the Black server.
	"black-formatter.serverTransport": "stdio",
	// Controls when notifications are shown by this extension.
	//  - always: Notifications are show for anything that the server chooses to show when formatting Python files.
	//  - off: All notifications are turned off, any errors or warnings when formatting Python files are still available in the logs.
	//  - onError: Notifications are shown only in the case of an error when formatting Python files.
	//  - onWarning: Notifications are shown for any errors and warnings when formatting Python files.
	"black-formatter.showNotifications": "off",
	"python.formatting.provider": "black",
}